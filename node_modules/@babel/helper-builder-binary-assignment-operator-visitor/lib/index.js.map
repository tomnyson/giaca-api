{"version":3,"sources":["../../../../../node_modules/@babel/helper-builder-binary-assignment-operator-visitor/lib/index.js"],"names":["Object","value","exports","_helperExplodeAssignableExpression","require","_t","sequenceExpression","operator","AssignmentExpression","scope","node","nodes","exploded","assignmentExpression","build","path","BinaryExpression"],"mappings":"AAAA;;AAEAA,MAAM,CAANA,cAAAA,CAAAA,OAAAA,EAAAA,YAAAA,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7CD;AAGAE,OAAO,CAAPA,OAAAA,GAAAA,QAAAA;;AAEA,IAAIC,kCAAkC,GAAGC,OAAO,CAAhD,6CAAgD,CAAhD;;AAEA,IAAIC,EAAE,GAAGD,OAAO,CAAhB,cAAgB,CAAhB;;AAEA,MAAM;AAAA,EAAA,oBAAA;AAEJE,EAAAA;AAFI,IAAN,EAAA;;AAKA,SAAA,QAAA,CAAA,IAAA,EAAwB;AACtB,QAAM;AAAA,IAAA,KAAA;AAEJC,IAAAA;AAFI,MAAN,IAAA;AAIA,SAAO;AACLC,IAAAA,oBAAoB,CAAA,IAAA,EAAO;AACzB,YAAM;AAAA,QAAA,IAAA;AAEJC,QAAAA;AAFI,UAAN,IAAA;AAIA,UAAIC,IAAI,CAAJA,QAAAA,KAAkBH,QAAQ,GAA9B,GAAA,EAAsC;AACtC,YAAMI,KAAK,GAAX,EAAA;AACA,YAAMC,QAAQ,GAAG,CAAC,GAAGT,kCAAkC,CAAtC,OAAA,EAAgDO,IAAI,CAApD,IAAA,EAAA,KAAA,EAAA,IAAA,EAAjB,KAAiB,CAAjB;AACAC,MAAAA,KAAK,CAALA,IAAAA,CAAWE,oBAAoB,CAAA,GAAA,EAAMD,QAAQ,CAAd,GAAA,EAAoBE,KAAK,CAACF,QAAQ,CAAT,GAAA,EAAeF,IAAI,CAA3EC,KAAwD,CAAzB,CAA/BA;AACAI,MAAAA,IAAI,CAAJA,WAAAA,CAAiBT,kBAAkB,CAAnCS,KAAmC,CAAnCA;AAVG,KAAA;;AAaLC,IAAAA,gBAAgB,CAAA,IAAA,EAAO;AACrB,YAAM;AACJN,QAAAA;AADI,UAAN,IAAA;;AAIA,UAAIA,IAAI,CAAJA,QAAAA,KAAJ,QAAA,EAAgC;AAC9BK,QAAAA,IAAI,CAAJA,WAAAA,CAAiBD,KAAK,CAACJ,IAAI,CAAL,IAAA,EAAYA,IAAI,CAAtCK,KAAsB,CAAtBA;AACD;AACF;;AArBI,GAAP;AAwBD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nvar _helperExplodeAssignableExpression = require(\"@babel/helper-explode-assignable-expression\");\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  assignmentExpression,\n  sequenceExpression\n} = _t;\n\nfunction _default(opts) {\n  const {\n    build,\n    operator\n  } = opts;\n  return {\n    AssignmentExpression(path) {\n      const {\n        node,\n        scope\n      } = path;\n      if (node.operator !== operator + \"=\") return;\n      const nodes = [];\n      const exploded = (0, _helperExplodeAssignableExpression.default)(node.left, nodes, this, scope);\n      nodes.push(assignmentExpression(\"=\", exploded.ref, build(exploded.uid, node.right)));\n      path.replaceWith(sequenceExpression(nodes));\n    },\n\n    BinaryExpression(path) {\n      const {\n        node\n      } = path;\n\n      if (node.operator === operator) {\n        path.replaceWith(build(node.left, node.right));\n      }\n    }\n\n  };\n}"],"file":"index.js"}