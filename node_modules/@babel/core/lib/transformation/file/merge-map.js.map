{"version":3,"sources":["../../../../../../../node_modules/@babel/core/lib/transformation/file/merge-map.js"],"names":["Object","value","exports","data","require","_sourceMap","input","buildMappingData","output","mergedGenerator","source","defaultSource","insertedMappings","eachInputGeneratedRange","eachOverlappingGeneratedOutputRange","item","key","makeMappingKey","original","line","column","columnStart","generated","name","clearItem","columnEnd","result","overlappingOriginal","filterApplicableOriginalRanges","callback","mappings","filterSortedArray","outOriginal","map","consumer","sourceRoot","sources","last","m","path","content","sourceData","obj","mapping","originalColumn","file","Array","left","right","array","mid","Math","i","start","findInsertionLocation","results"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = mergeSourceMap;\n\nfunction _sourceMap() {\n  const data = require(\"source-map\");\n\n  _sourceMap = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction mergeSourceMap(inputMap, map) {\n  const input = buildMappingData(inputMap);\n  const output = buildMappingData(map);\n  const mergedGenerator = new (_sourceMap().SourceMapGenerator)();\n\n  for (const {\n    source\n  } of input.sources) {\n    if (typeof source.content === \"string\") {\n      mergedGenerator.setSourceContent(source.path, source.content);\n    }\n  }\n\n  if (output.sources.length === 1) {\n    const defaultSource = output.sources[0];\n    const insertedMappings = new Map();\n    eachInputGeneratedRange(input, (generated, original, source) => {\n      eachOverlappingGeneratedOutputRange(defaultSource, generated, item => {\n        const key = makeMappingKey(item);\n        if (insertedMappings.has(key)) return;\n        insertedMappings.set(key, item);\n        mergedGenerator.addMapping({\n          source: source.path,\n          original: {\n            line: original.line,\n            column: original.columnStart\n          },\n          generated: {\n            line: item.line,\n            column: item.columnStart\n          },\n          name: original.name\n        });\n      });\n    });\n\n    for (const item of insertedMappings.values()) {\n      if (item.columnEnd === Infinity) {\n        continue;\n      }\n\n      const clearItem = {\n        line: item.line,\n        columnStart: item.columnEnd\n      };\n      const key = makeMappingKey(clearItem);\n\n      if (insertedMappings.has(key)) {\n        continue;\n      }\n\n      mergedGenerator.addMapping({\n        generated: {\n          line: clearItem.line,\n          column: clearItem.columnStart\n        }\n      });\n    }\n  }\n\n  const result = mergedGenerator.toJSON();\n\n  if (typeof input.sourceRoot === \"string\") {\n    result.sourceRoot = input.sourceRoot;\n  }\n\n  return result;\n}\n\nfunction makeMappingKey(item) {\n  return `${item.line}/${item.columnStart}`;\n}\n\nfunction eachOverlappingGeneratedOutputRange(outputFile, inputGeneratedRange, callback) {\n  const overlappingOriginal = filterApplicableOriginalRanges(outputFile, inputGeneratedRange);\n\n  for (const {\n    generated\n  } of overlappingOriginal) {\n    for (const item of generated) {\n      callback(item);\n    }\n  }\n}\n\nfunction filterApplicableOriginalRanges({\n  mappings\n}, {\n  line,\n  columnStart,\n  columnEnd\n}) {\n  return filterSortedArray(mappings, ({\n    original: outOriginal\n  }) => {\n    if (line > outOriginal.line) return -1;\n    if (line < outOriginal.line) return 1;\n    if (columnStart >= outOriginal.columnEnd) return -1;\n    if (columnEnd <= outOriginal.columnStart) return 1;\n    return 0;\n  });\n}\n\nfunction eachInputGeneratedRange(map, callback) {\n  for (const {\n    source,\n    mappings\n  } of map.sources) {\n    for (const {\n      original,\n      generated\n    } of mappings) {\n      for (const item of generated) {\n        callback(item, original, source);\n      }\n    }\n  }\n}\n\nfunction buildMappingData(map) {\n  const consumer = new (_sourceMap().SourceMapConsumer)(Object.assign({}, map, {\n    sourceRoot: null\n  }));\n  const sources = new Map();\n  const mappings = new Map();\n  let last = null;\n  consumer.computeColumnSpans();\n  consumer.eachMapping(m => {\n    if (m.originalLine === null) return;\n    let source = sources.get(m.source);\n\n    if (!source) {\n      source = {\n        path: m.source,\n        content: consumer.sourceContentFor(m.source, true)\n      };\n      sources.set(m.source, source);\n    }\n\n    let sourceData = mappings.get(source);\n\n    if (!sourceData) {\n      sourceData = {\n        source,\n        mappings: []\n      };\n      mappings.set(source, sourceData);\n    }\n\n    const obj = {\n      line: m.originalLine,\n      columnStart: m.originalColumn,\n      columnEnd: Infinity,\n      name: m.name\n    };\n\n    if (last && last.source === source && last.mapping.line === m.originalLine) {\n      last.mapping.columnEnd = m.originalColumn;\n    }\n\n    last = {\n      source,\n      mapping: obj\n    };\n    sourceData.mappings.push({\n      original: obj,\n      generated: consumer.allGeneratedPositionsFor({\n        source: m.source,\n        line: m.originalLine,\n        column: m.originalColumn\n      }).map(item => ({\n        line: item.line,\n        columnStart: item.column,\n        columnEnd: item.lastColumn + 1\n      }))\n    });\n  }, null, _sourceMap().SourceMapConsumer.ORIGINAL_ORDER);\n  return {\n    file: map.file,\n    sourceRoot: map.sourceRoot,\n    sources: Array.from(mappings.values())\n  };\n}\n\nfunction findInsertionLocation(array, callback) {\n  let left = 0;\n  let right = array.length;\n\n  while (left < right) {\n    const mid = Math.floor((left + right) / 2);\n    const item = array[mid];\n    const result = callback(item);\n\n    if (result === 0) {\n      left = mid;\n      break;\n    }\n\n    if (result >= 0) {\n      right = mid;\n    } else {\n      left = mid + 1;\n    }\n  }\n\n  let i = left;\n\n  if (i < array.length) {\n    while (i >= 0 && callback(array[i]) >= 0) {\n      i--;\n    }\n\n    return i + 1;\n  }\n\n  return i;\n}\n\nfunction filterSortedArray(array, callback) {\n  const start = findInsertionLocation(array, callback);\n  const results = [];\n\n  for (let i = start; i < array.length && callback(array[i]) === 0; i++) {\n    results.push(array[i]);\n  }\n\n  return results;\n}"],"file":"merge-map.js"}