{"version":3,"sources":["../../../../../../../node_modules/@babel/core/lib/transformation/file/generate.js"],"names":["Object","value","exports","data","require","_convertSourceMap","_generator","_mergeMap","inputMap","results","generatorOverride","result","opts","code","map","outputMap","outputCode"],"mappings":"AAAA;;AAEAA,MAAM,CAANA,cAAAA,CAAAA,OAAAA,EAAAA,YAAAA,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7CD;AAGAE,OAAO,CAAPA,OAAAA,GAAAA,YAAAA;;AAEA,SAAA,iBAAA,GAA6B;AAC3B,QAAMC,IAAI,GAAGC,OAAO,CAApB,oBAAoB,CAApB;;AAEAC,EAAAA,iBAAiB,GAAG,YAAY;AAC9B,WAAA,IAAA;AADFA,GAAAA;;AAIA,SAAA,IAAA;AACD;;AAED,SAAA,UAAA,GAAsB;AACpB,QAAMF,IAAI,GAAGC,OAAO,CAApB,kBAAoB,CAApB;;AAEAE,EAAAA,UAAU,GAAG,YAAY;AACvB,WAAA,IAAA;AADFA,GAAAA;;AAIA,SAAA,IAAA;AACD;;AAED,IAAIC,SAAS,GAAGH,OAAO,CAAvB,aAAuB,CAAvB;;AAEA,SAAA,YAAA,CAAA,YAAA,EAAA,IAAA,EAA0C;AACxC,QAAM;AAAA,IAAA,IAAA;AAAA,IAAA,GAAA;AAAA,IAAA,IAAA;AAIJI,IAAAA;AAJI,MAAN,IAAA;AAMA,QAAMC,OAAO,GAAb,EAAA;;AAEA,OAAK,MAAL,OAAA,IAAA,YAAA,EAAoC;AAClC,SAAK,MAAL,MAAA,IAAA,OAAA,EAA8B;AAC5B,YAAM;AACJC,QAAAA;AADI,UAAN,MAAA;;AAIA,UAAA,iBAAA,EAAuB;AACrB,cAAMC,MAAM,GAAGD,iBAAiB,CAAA,GAAA,EAAME,IAAI,CAAV,aAAA,EAAA,IAAA,EAAgCN,UAAU,GAA1E,OAAgC,CAAhC;AACA,YAAIK,MAAM,KAAV,SAAA,EAA0BF,OAAO,CAAPA,IAAAA,CAAAA,MAAAA;AAC3B;AACF;AACF;;AAED,MAAA,MAAA;;AAEA,MAAIA,OAAO,CAAPA,MAAAA,KAAJ,CAAA,EAA0B;AACxBE,IAAAA,MAAM,GAAG,CAAC,GAAGL,UAAU,GAAd,OAAA,EAAA,GAAA,EAA+BM,IAAI,CAAnC,aAAA,EAATD,IAAS,CAATA;AADF,GAAA,MAEO,IAAIF,OAAO,CAAPA,MAAAA,KAAJ,CAAA,EAA0B;AAC/BE,IAAAA,MAAM,GAAGF,OAAO,CAAhBE,CAAgB,CAAhBA;;AAEA,QAAI,OAAOA,MAAM,CAAb,IAAA,KAAJ,UAAA,EAAuC;AACrC,YAAM,IAAA,KAAA,CAAU,kDAAA,GAAA,wDAAA,GAAhB,sCAAgB,GAAhB,mDAAM,CAAN;AACD;AALI,GAAA,MAMA;AACL,UAAM,IAAA,KAAA,CAAN,qDAAM,CAAN;AACD;;AAED,MAAI;AACFE,IAAAA,IAAI,EADF,UAAA;AAEFC,IAAAA,GAAG,EAAEC;AAFH,MAAJ,MAAA;;AAKA,MAAIA,SAAS,IAAb,QAAA,EAA2B;AACzBA,IAAAA,SAAS,GAAG,CAAC,GAAGR,SAAS,CAAb,OAAA,EAAuBC,QAAQ,CAA/B,QAAuBA,EAAvB,EAAZO,SAAY,CAAZA;AACD;;AAED,MAAIH,IAAI,CAAJA,UAAAA,KAAAA,QAAAA,IAAgCA,IAAI,CAAJA,UAAAA,KAApC,MAAA,EAAgE;AAC9DI,IAAAA,UAAU,IAAI,OAAOX,iBAAiB,GAAjBA,UAAAA,CAAAA,SAAAA,EAArBW,SAAqBX,EAArBW;AACD;;AAED,MAAIJ,IAAI,CAAJA,UAAAA,KAAJ,QAAA,EAAkC;AAChCG,IAAAA,SAAS,GAATA,IAAAA;AACD;;AAED,SAAO;AAAA,IAAA,UAAA;AAELA,IAAAA;AAFK,GAAP;AAID","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = generateCode;\n\nfunction _convertSourceMap() {\n  const data = require(\"convert-source-map\");\n\n  _convertSourceMap = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _generator() {\n  const data = require(\"@babel/generator\");\n\n  _generator = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _mergeMap = require(\"./merge-map\");\n\nfunction generateCode(pluginPasses, file) {\n  const {\n    opts,\n    ast,\n    code,\n    inputMap\n  } = file;\n  const results = [];\n\n  for (const plugins of pluginPasses) {\n    for (const plugin of plugins) {\n      const {\n        generatorOverride\n      } = plugin;\n\n      if (generatorOverride) {\n        const result = generatorOverride(ast, opts.generatorOpts, code, _generator().default);\n        if (result !== undefined) results.push(result);\n      }\n    }\n  }\n\n  let result;\n\n  if (results.length === 0) {\n    result = (0, _generator().default)(ast, opts.generatorOpts, code);\n  } else if (results.length === 1) {\n    result = results[0];\n\n    if (typeof result.then === \"function\") {\n      throw new Error(`You appear to be using an async codegen plugin, ` + `which your current version of Babel does not support. ` + `If you're using a published plugin, ` + `you may need to upgrade your @babel/core version.`);\n    }\n  } else {\n    throw new Error(\"More than one plugin attempted to override codegen.\");\n  }\n\n  let {\n    code: outputCode,\n    map: outputMap\n  } = result;\n\n  if (outputMap && inputMap) {\n    outputMap = (0, _mergeMap.default)(inputMap.toObject(), outputMap);\n  }\n\n  if (opts.sourceMaps === \"inline\" || opts.sourceMaps === \"both\") {\n    outputCode += \"\\n\" + _convertSourceMap().fromObject(outputMap).toComment();\n  }\n\n  if (opts.sourceMaps === \"inline\") {\n    outputMap = null;\n  }\n\n  return {\n    outputCode,\n    outputMap\n  };\n}"],"file":"generate.js"}