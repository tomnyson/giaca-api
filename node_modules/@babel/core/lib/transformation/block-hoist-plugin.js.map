{"version":3,"sources":["../../../../../../node_modules/@babel/core/lib/transformation/block-hoist-plugin.js"],"names":["Object","value","exports","data","require","_traverse","_plugin","LOADED_PLUGIN","visitor","blockHoistPlugin","priority","bodyNode","buckets","i","body","n","p","bucket","keys","k","b","index","name","Block","exit","node","max","Math","hasChange","stableSort"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = loadBlockHoistPlugin;\n\nfunction _traverse() {\n  const data = require(\"@babel/traverse\");\n\n  _traverse = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _plugin = require(\"../config/plugin\");\n\nlet LOADED_PLUGIN;\n\nfunction loadBlockHoistPlugin() {\n  if (!LOADED_PLUGIN) {\n    LOADED_PLUGIN = new _plugin.default(Object.assign({}, blockHoistPlugin, {\n      visitor: _traverse().default.explode(blockHoistPlugin.visitor)\n    }), {});\n  }\n\n  return LOADED_PLUGIN;\n}\n\nfunction priority(bodyNode) {\n  const priority = bodyNode == null ? void 0 : bodyNode._blockHoist;\n  if (priority == null) return 1;\n  if (priority === true) return 2;\n  return priority;\n}\n\nfunction stableSort(body) {\n  const buckets = Object.create(null);\n\n  for (let i = 0; i < body.length; i++) {\n    const n = body[i];\n    const p = priority(n);\n    const bucket = buckets[p] || (buckets[p] = []);\n    bucket.push(n);\n  }\n\n  const keys = Object.keys(buckets).map(k => +k).sort((a, b) => b - a);\n  let index = 0;\n\n  for (const key of keys) {\n    const bucket = buckets[key];\n\n    for (const n of bucket) {\n      body[index++] = n;\n    }\n  }\n\n  return body;\n}\n\nconst blockHoistPlugin = {\n  name: \"internal.blockHoist\",\n  visitor: {\n    Block: {\n      exit({\n        node\n      }) {\n        const {\n          body\n        } = node;\n        let max = Math.pow(2, 30) - 1;\n        let hasChange = false;\n\n        for (let i = 0; i < body.length; i++) {\n          const n = body[i];\n          const p = priority(n);\n\n          if (p > max) {\n            hasChange = true;\n            break;\n          }\n\n          max = p;\n        }\n\n        if (!hasChange) return;\n        node.body = stableSort(body.slice());\n      }\n\n    }\n  }\n};"],"file":"block-hoist-plugin.js"}