{"version":3,"sources":["../../../../../../node_modules/@babel/core/lib/transformation/normalize-file.js"],"names":["Object","value","exports","data","require","_fs","_path","_debug","_t","_convertSourceMap","_file","_parser","_cloneDeep","traverseFast","debug","LARGE_INPUT_SOURCEMAP_THRESHOLD","code","ast","file","options","inputMap","lastComment","extractComments","match","EXTERNAL_SOURCEMAP_REGEX","inputMapContent","INLINE_SOURCEMAP_REGEX","comments","regex","node","extractCommentsFromList"],"mappings":"AAAA;;AAEAA,MAAM,CAANA,cAAAA,CAAAA,OAAAA,EAAAA,YAAAA,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7CD;AAGAE,OAAO,CAAPA,OAAAA,GAAAA,aAAAA;;AAEA,SAAA,GAAA,GAAe;AACb,QAAMC,IAAI,GAAGC,OAAO,CAApB,IAAoB,CAApB;;AAEAC,EAAAA,GAAG,GAAG,YAAY;AAChB,WAAA,IAAA;AADFA,GAAAA;;AAIA,SAAA,IAAA;AACD;;AAED,SAAA,KAAA,GAAiB;AACf,QAAMF,IAAI,GAAGC,OAAO,CAApB,MAAoB,CAApB;;AAEAE,EAAAA,KAAK,GAAG,YAAY;AAClB,WAAA,IAAA;AADFA,GAAAA;;AAIA,SAAA,IAAA;AACD;;AAED,SAAA,MAAA,GAAkB;AAChB,QAAMH,IAAI,GAAGC,OAAO,CAApB,OAAoB,CAApB;;AAEAG,EAAAA,MAAM,GAAG,YAAY;AACnB,WAAA,IAAA;AADFA,GAAAA;;AAIA,SAAA,IAAA;AACD;;AAED,SAAA,EAAA,GAAc;AACZ,QAAMJ,IAAI,GAAGC,OAAO,CAApB,cAAoB,CAApB;;AAEAI,EAAAA,EAAE,GAAG,YAAY;AACf,WAAA,IAAA;AADFA,GAAAA;;AAIA,SAAA,IAAA;AACD;;AAED,SAAA,iBAAA,GAA6B;AAC3B,QAAML,IAAI,GAAGC,OAAO,CAApB,oBAAoB,CAApB;;AAEAK,EAAAA,iBAAiB,GAAG,YAAY;AAC9B,WAAA,IAAA;AADFA,GAAAA;;AAIA,SAAA,IAAA;AACD;;AAED,IAAIC,KAAK,GAAGN,OAAO,CAAnB,aAAmB,CAAnB;;AAEA,IAAIO,OAAO,GAAGP,OAAO,CAArB,WAAqB,CAArB;;AAEA,IAAIQ,UAAU,GAAGR,OAAO,CAAxB,mBAAwB,CAAxB;;AAEA,MAAM;AAAA,EAAA,IAAA;AAEJS,EAAAA;AAFI,IAGFL,EAHJ,EAAA;;AAKA,MAAMM,KAAK,GAAGP,MAAM,GAApB,sBAAoB,CAApB;;AAEA,MAAMQ,+BAA+B,GAArC,OAAA;;AAEA,UAAA,aAAA,CAAA,YAAA,EAAA,OAAA,EAAA,IAAA,EAAA,GAAA,EAA0D;AACxDC,EAAAA,IAAI,GAAI,GAAEA,IAAI,IAAdA,EAAAA,EAAAA;;AAEA,MAAA,GAAA,EAAS;AACP,QAAIC,GAAG,CAAHA,IAAAA,KAAJ,SAAA,EAA4B;AAC1BA,MAAAA,GAAG,GAAGC,IAAI,CAAA,GAAA,EAAA,EAAA,EAAVD,EAAU,CAAVA;AADF,KAAA,MAEO,IAAIA,GAAG,CAAHA,IAAAA,KAAJ,MAAA,EAAyB;AAC9B,YAAM,IAAA,KAAA,CAAN,yCAAM,CAAN;AACD;;AAED,QAAIE,OAAO,CAAX,aAAA,EAA2B;AACzBF,MAAAA,GAAG,GAAG,CAAC,GAAGL,UAAU,CAAd,OAAA,EAANK,GAAM,CAANA;AACD;AATH,GAAA,MAUO;AACLA,IAAAA,GAAG,GAAG,OAAO,CAAC,GAAGN,OAAO,CAAX,OAAA,EAAA,YAAA,EAAA,OAAA,EAAbM,IAAa,CAAbA;AACD;;AAED,MAAIG,QAAQ,GAAZ,IAAA;;AAEA,MAAID,OAAO,CAAPA,cAAAA,KAAJ,KAAA,EAAsC;AACpC,QAAI,OAAOA,OAAO,CAAd,cAAA,KAAJ,QAAA,EAAgD;AAC9CC,MAAAA,QAAQ,GAAGX,iBAAiB,GAAjBA,UAAAA,CAA+BU,OAAO,CAAjDC,cAAWX,CAAXW;AACD;;AAED,QAAI,CAAJ,QAAA,EAAe;AACb,YAAMC,WAAW,GAAGC,eAAe,CAAA,sBAAA,EAAnC,GAAmC,CAAnC;;AAEA,UAAA,WAAA,EAAiB;AACf,YAAI;AACFF,UAAAA,QAAQ,GAAGX,iBAAiB,GAAjBA,WAAAA,CAAXW,WAAWX,CAAXW;AADF,SAAA,CAEE,OAAA,GAAA,EAAY;AACZN,UAAAA,KAAK,CAAA,2CAAA,EAALA,GAAK,CAALA;AACD;AACF;AACF;;AAED,QAAI,CAAJ,QAAA,EAAe;AACb,YAAMO,WAAW,GAAGC,eAAe,CAAA,wBAAA,EAAnC,GAAmC,CAAnC;;AAEA,UAAI,OAAOH,OAAO,CAAd,QAAA,KAAA,QAAA,IAAJ,WAAA,EAAyD;AACvD,YAAI;AACF,gBAAMI,KAAK,GAAGC,wBAAwB,CAAxBA,IAAAA,CAAd,WAAcA,CAAd;;AAEA,gBAAMC,eAAe,GAAGpB,GAAG,GAAHA,YAAAA,CAAmBC,KAAK,GAALA,OAAAA,CAAgBA,KAAK,GAALA,OAAAA,CAAgBa,OAAO,CAAvCb,QAAgBA,CAAhBA,EAAmDiB,KAAK,CAAnG,CAAmG,CAAxDjB,CAAnBD,CAAxB;;AAEA,cAAIoB,eAAe,CAAfA,MAAAA,GAAJ,+BAAA,EAA8D;AAC5DX,YAAAA,KAAK,CAALA,+BAAK,CAALA;AADF,WAAA,MAEO;AACLM,YAAAA,QAAQ,GAAGX,iBAAiB,GAAjBA,QAAAA,CAAXW,eAAWX,CAAXW;AACD;AATH,SAAA,CAUE,OAAA,GAAA,EAAY;AACZN,UAAAA,KAAK,CAAA,yCAAA,EAALA,GAAK,CAALA;AACD;AAbH,OAAA,MAcO,IAAA,WAAA,EAAiB;AACtBA,QAAAA,KAAK,CAALA,6CAAK,CAALA;AACD;AACF;AACF;;AAED,SAAO,IAAIJ,KAAK,CAAT,OAAA,CAAA,OAAA,EAA2B;AAAA,IAAA,IAAA;AAAA,IAAA,GAAA;AAGhCU,IAAAA;AAHgC,GAA3B,CAAP;AAKD;;AAED,MAAMM,sBAAsB,GAA5B,8FAAA;AACA,MAAMF,wBAAwB,GAA9B,gDAAA;;AAEA,SAAA,uBAAA,CAAA,KAAA,EAAA,QAAA,EAAA,WAAA,EAA+D;AAC7D,MAAA,QAAA,EAAc;AACZG,IAAAA,QAAQ,GAAG,QAAQ,CAAR,MAAA,CAAgB,CAAC;AAC1B1B,MAAAA;AAD0B,KAAD,KAErB;AACJ,UAAI2B,KAAK,CAALA,IAAAA,CAAJ,KAAIA,CAAJ,EAAuB;AACrBP,QAAAA,WAAW,GAAXA,KAAAA;AACA,eAAA,KAAA;AACD;;AAED,aAAA,IAAA;AARFM,KAAW,CAAXA;AAUD;;AAED,SAAO,CAAA,QAAA,EAAP,WAAO,CAAP;AACD;;AAED,SAAA,eAAA,CAAA,KAAA,EAAA,GAAA,EAAqC;AACnC,MAAIN,WAAW,GAAf,IAAA;AACAR,EAAAA,YAAY,CAAA,GAAA,EAAMgB,IAAI,IAAI;AACxB,KAACA,IAAI,CAAL,eAAA,EAAA,WAAA,IAAsCC,uBAAuB,CAAA,KAAA,EAAQD,IAAI,CAAZ,eAAA,EAA7D,WAA6D,CAA7D;AACA,KAACA,IAAI,CAAL,aAAA,EAAA,WAAA,IAAoCC,uBAAuB,CAAA,KAAA,EAAQD,IAAI,CAAZ,aAAA,EAA3D,WAA2D,CAA3D;AACA,KAACA,IAAI,CAAL,gBAAA,EAAA,WAAA,IAAuCC,uBAAuB,CAAA,KAAA,EAAQD,IAAI,CAAZ,gBAAA,EAA9D,WAA8D,CAA9D;AAHFhB,GAAY,CAAZA;AAKA,SAAA,WAAA;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = normalizeFile;\n\nfunction _fs() {\n  const data = require(\"fs\");\n\n  _fs = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  const data = require(\"path\");\n\n  _path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _debug() {\n  const data = require(\"debug\");\n\n  _debug = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _t() {\n  const data = require(\"@babel/types\");\n\n  _t = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _convertSourceMap() {\n  const data = require(\"convert-source-map\");\n\n  _convertSourceMap = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _file = require(\"./file/file\");\n\nvar _parser = require(\"../parser\");\n\nvar _cloneDeep = require(\"./util/clone-deep\");\n\nconst {\n  file,\n  traverseFast\n} = _t();\n\nconst debug = _debug()(\"babel:transform:file\");\n\nconst LARGE_INPUT_SOURCEMAP_THRESHOLD = 1000000;\n\nfunction* normalizeFile(pluginPasses, options, code, ast) {\n  code = `${code || \"\"}`;\n\n  if (ast) {\n    if (ast.type === \"Program\") {\n      ast = file(ast, [], []);\n    } else if (ast.type !== \"File\") {\n      throw new Error(\"AST root must be a Program or File node\");\n    }\n\n    if (options.cloneInputAst) {\n      ast = (0, _cloneDeep.default)(ast);\n    }\n  } else {\n    ast = yield* (0, _parser.default)(pluginPasses, options, code);\n  }\n\n  let inputMap = null;\n\n  if (options.inputSourceMap !== false) {\n    if (typeof options.inputSourceMap === \"object\") {\n      inputMap = _convertSourceMap().fromObject(options.inputSourceMap);\n    }\n\n    if (!inputMap) {\n      const lastComment = extractComments(INLINE_SOURCEMAP_REGEX, ast);\n\n      if (lastComment) {\n        try {\n          inputMap = _convertSourceMap().fromComment(lastComment);\n        } catch (err) {\n          debug(\"discarding unknown inline input sourcemap\", err);\n        }\n      }\n    }\n\n    if (!inputMap) {\n      const lastComment = extractComments(EXTERNAL_SOURCEMAP_REGEX, ast);\n\n      if (typeof options.filename === \"string\" && lastComment) {\n        try {\n          const match = EXTERNAL_SOURCEMAP_REGEX.exec(lastComment);\n\n          const inputMapContent = _fs().readFileSync(_path().resolve(_path().dirname(options.filename), match[1]));\n\n          if (inputMapContent.length > LARGE_INPUT_SOURCEMAP_THRESHOLD) {\n            debug(\"skip merging input map > 1 MB\");\n          } else {\n            inputMap = _convertSourceMap().fromJSON(inputMapContent);\n          }\n        } catch (err) {\n          debug(\"discarding unknown file input sourcemap\", err);\n        }\n      } else if (lastComment) {\n        debug(\"discarding un-loadable file input sourcemap\");\n      }\n    }\n  }\n\n  return new _file.default(options, {\n    code,\n    ast,\n    inputMap\n  });\n}\n\nconst INLINE_SOURCEMAP_REGEX = /^[@#]\\s+sourceMappingURL=data:(?:application|text)\\/json;(?:charset[:=]\\S+?;)?base64,(?:.*)$/;\nconst EXTERNAL_SOURCEMAP_REGEX = /^[@#][ \\t]+sourceMappingURL=([^\\s'\"`]+)[ \\t]*$/;\n\nfunction extractCommentsFromList(regex, comments, lastComment) {\n  if (comments) {\n    comments = comments.filter(({\n      value\n    }) => {\n      if (regex.test(value)) {\n        lastComment = value;\n        return false;\n      }\n\n      return true;\n    });\n  }\n\n  return [comments, lastComment];\n}\n\nfunction extractComments(regex, ast) {\n  let lastComment = null;\n  traverseFast(ast, node => {\n    [node.leadingComments, lastComment] = extractCommentsFromList(regex, node.leadingComments, lastComment);\n    [node.innerComments, lastComment] = extractCommentsFromList(regex, node.innerComments, lastComment);\n    [node.trailingComments, lastComment] = extractCommentsFromList(regex, node.trailingComments, lastComment);\n  });\n  return lastComment;\n}"],"file":"normalize-file.js"}