{"version":3,"sources":["../../../../../../node_modules/@babel/core/lib/config/pattern-to-regex.js"],"names":["Object","value","exports","data","require","_path","sep","endSep","substitution","starPat","starPatLast","starStarPat","starStarPatLast","string","parts","last","i","part","escapeRegExp"],"mappings":"AAAA;;AAEAA,MAAM,CAANA,cAAAA,CAAAA,OAAAA,EAAAA,YAAAA,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7CD;AAGAE,OAAO,CAAPA,OAAAA,GAAAA,aAAAA;;AAEA,SAAA,KAAA,GAAiB;AACf,QAAMC,IAAI,GAAGC,OAAO,CAApB,MAAoB,CAApB;;AAEAC,EAAAA,KAAK,GAAG,YAAY;AAClB,WAAA,IAAA;AADFA,GAAAA;;AAIA,SAAA,IAAA;AACD;;AAED,MAAMC,GAAG,GAAI,KAAID,KAAK,GAAtB,GAAA,EAAA;AACA,MAAME,MAAM,GAAI,MAAhB,GAAA,KAAA;AACA,MAAMC,YAAY,GAAI,KAAtB,GAAA,IAAA;AACA,MAAMC,OAAO,GAAI,MAAKD,YAAa,GAAnC,GAAA,GAAA;AACA,MAAME,WAAW,GAAI,MAAKF,YAAa,GAAvC,MAAA,GAAA;AACA,MAAMG,WAAW,GAAI,GAArB,OAAA,IAAA;AACA,MAAMC,eAAe,GAAI,GAAEH,OAAQ,KAAnC,WAAA,GAAA;;AAEA,SAAA,YAAA,CAAA,MAAA,EAA8B;AAC5B,SAAOI,MAAM,CAANA,OAAAA,CAAAA,qBAAAA,EAAP,MAAOA,CAAP;AACD;;AAED,SAAA,aAAA,CAAA,OAAA,EAAA,OAAA,EAAyC;AACvC,QAAMC,KAAK,GAAGT,KAAK,GAALA,OAAAA,CAAAA,OAAAA,EAAAA,OAAAA,EAAAA,KAAAA,CAAwCA,KAAK,GAA3D,GAAcA,CAAd;;AAEA,SAAO,IAAA,MAAA,CAAW,CAAA,GAAA,EAAM,GAAG,KAAK,CAAL,GAAA,CAAU,CAAA,IAAA,EAAA,CAAA,KAAa;AAChD,UAAMU,IAAI,GAAGC,CAAC,KAAKF,KAAK,CAALA,MAAAA,GAAnB,CAAA;AACA,QAAIG,IAAI,KAAR,IAAA,EAAmB,OAAOF,IAAI,GAAA,eAAA,GAAX,WAAA;AACnB,QAAIE,IAAI,KAAR,GAAA,EAAkB,OAAOF,IAAI,GAAA,WAAA,GAAX,OAAA;;AAElB,QAAIE,IAAI,CAAJA,OAAAA,CAAAA,IAAAA,MAAJ,CAAA,EAA8B;AAC5B,aAAOT,YAAY,GAAGU,YAAY,CAACD,IAAI,CAAJA,KAAAA,CAA5BT,CAA4BS,CAAD,CAA3BT,IAA8CO,IAAI,GAAA,MAAA,GAAzD,GAAOP,CAAP;AACD;;AAED,WAAOU,YAAY,CAAZA,IAAY,CAAZA,IAAsBH,IAAI,GAAA,MAAA,GAAjC,GAAOG,CAAP;AATgB,GAAS,CAAT,EAAA,IAAA,CAAlB,EAAkB,CAAX,CAAP;AAWD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = pathToPattern;\n\nfunction _path() {\n  const data = require(\"path\");\n\n  _path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nconst sep = `\\\\${_path().sep}`;\nconst endSep = `(?:${sep}|$)`;\nconst substitution = `[^${sep}]+`;\nconst starPat = `(?:${substitution}${sep})`;\nconst starPatLast = `(?:${substitution}${endSep})`;\nconst starStarPat = `${starPat}*?`;\nconst starStarPatLast = `${starPat}*?${starPatLast}?`;\n\nfunction escapeRegExp(string) {\n  return string.replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\");\n}\n\nfunction pathToPattern(pattern, dirname) {\n  const parts = _path().resolve(dirname, pattern).split(_path().sep);\n\n  return new RegExp([\"^\", ...parts.map((part, i) => {\n    const last = i === parts.length - 1;\n    if (part === \"**\") return last ? starStarPatLast : starStarPat;\n    if (part === \"*\") return last ? starPatLast : starPat;\n\n    if (part.indexOf(\"*.\") === 0) {\n      return substitution + escapeRegExp(part.slice(1)) + (last ? endSep : sep);\n    }\n\n    return escapeRegExp(part) + (last ? endSep : sep);\n  })].join(\"\"));\n}"],"file":"pattern-to-regex.js"}