{"version":3,"sources":["../../../../../../../node_modules/@babel/core/lib/config/validation/plugins.js"],"names":["Object","value","exports","_optionAssertions","require","VALIDATORS","name","manipulateOptions","pre","post","inherits","visitor","parserOverride","generatorOverride","assertFunction","obj","prop","assertVisitorHandler","handler","rootPath","type","source","key","validator","optLoc","parent","invalidPluginPropertyError"],"mappings":"AAAA;;AAEAA,MAAM,CAANA,cAAAA,CAAAA,OAAAA,EAAAA,YAAAA,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7CD;AAGAE,OAAO,CAAPA,oBAAAA,GAAAA,oBAAAA;;AAEA,IAAIC,iBAAiB,GAAGC,OAAO,CAA/B,qBAA+B,CAA/B;;AAEA,MAAMC,UAAU,GAAG;AACjBC,EAAAA,IAAI,EAAEH,iBAAiB,CADN,YAAA;AAEjBI,EAAAA,iBAAiB,EAAEJ,iBAAiB,CAFnB,cAAA;AAGjBK,EAAAA,GAAG,EAAEL,iBAAiB,CAHL,cAAA;AAIjBM,EAAAA,IAAI,EAAEN,iBAAiB,CAJN,cAAA;AAKjBO,EAAAA,QAAQ,EAAEP,iBAAiB,CALV,cAAA;AAMjBQ,EAAAA,OAAO,EANU,gBAAA;AAOjBC,EAAAA,cAAc,EAAET,iBAAiB,CAPhB,cAAA;AAQjBU,EAAAA,iBAAiB,EAAEV,iBAAiB,CAACW;AARpB,CAAnB;;AAWA,SAAA,gBAAA,CAAA,GAAA,EAAA,KAAA,EAAsC;AACpC,QAAMC,GAAG,GAAG,CAAC,GAAGZ,iBAAiB,CAArB,YAAA,EAAA,GAAA,EAAZ,KAAY,CAAZ;;AAEA,MAAA,GAAA,EAAS;AACPH,IAAAA,MAAM,CAANA,IAAAA,CAAAA,GAAAA,EAAAA,OAAAA,CAAyBgB,IAAI,IAAIC,oBAAoB,CAAA,IAAA,EAAOF,GAAG,CAA/Df,IAA+D,CAAV,CAArDA;;AAEA,QAAIe,GAAG,CAAHA,KAAAA,IAAaA,GAAG,CAApB,IAAA,EAA2B;AACzB,YAAM,IAAA,KAAA,CAAW,GAAE,CAAC,GAAGZ,iBAAiB,CAArB,GAAA,EAAnB,GAAmB,CAAnB,uFAAM,CAAN;AACD;AACF;;AAED,SAAA,GAAA;AACD;;AAED,SAAA,oBAAA,CAAA,GAAA,EAAA,KAAA,EAA0C;AACxC,MAAIF,KAAK,IAAI,OAAA,KAAA,KAAb,QAAA,EAAwC;AACtCD,IAAAA,MAAM,CAANA,IAAAA,CAAAA,KAAAA,EAAAA,OAAAA,CAA2BkB,OAAO,IAAI;AACpC,UAAIA,OAAO,KAAPA,OAAAA,IAAuBA,OAAO,KAAlC,MAAA,EAA+C;AAC7C,cAAM,IAAA,KAAA,CAAW,aAAjB,GAAA,gDAAM,CAAN;AACD;AAHHlB,KAAAA;AADF,GAAA,MAMO,IAAI,OAAA,KAAA,KAAJ,UAAA,EAAiC;AACtC,UAAM,IAAA,KAAA,CAAW,aAAjB,GAAA,uBAAM,CAAN;AACD;;AAED,SAAA,KAAA;AACD;;AAED,SAAA,oBAAA,CAAA,GAAA,EAAmC;AACjC,QAAMmB,QAAQ,GAAG;AACfC,IAAAA,IAAI,EADW,MAAA;AAEfC,IAAAA,MAAM,EAAE;AAFO,GAAjB;AAIArB,EAAAA,MAAM,CAANA,IAAAA,CAAAA,GAAAA,EAAAA,OAAAA,CAAyBsB,GAAG,IAAI;AAC9B,UAAMC,SAAS,GAAGlB,UAAU,CAA5B,GAA4B,CAA5B;;AAEA,QAAA,SAAA,EAAe;AACb,YAAMmB,MAAM,GAAG;AACbJ,QAAAA,IAAI,EADS,QAAA;AAEbd,QAAAA,IAAI,EAFS,GAAA;AAGbmB,QAAAA,MAAM,EAAEN;AAHK,OAAf;AAKAI,MAAAA,SAAS,CAAA,MAAA,EAASR,GAAG,CAArBQ,GAAqB,CAAZ,CAATA;AANF,KAAA,MAOO;AACL,YAAMG,0BAA0B,GAAG,IAAA,KAAA,CAAW,IAA9C,GAAA,iCAAmC,CAAnC;AACAA,MAAAA,0BAA0B,CAA1BA,IAAAA,GAAAA,+BAAAA;AACA,YAAA,0BAAA;AACD;AAdH1B,GAAAA;AAgBA,SAAA,GAAA;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validatePluginObject = validatePluginObject;\n\nvar _optionAssertions = require(\"./option-assertions\");\n\nconst VALIDATORS = {\n  name: _optionAssertions.assertString,\n  manipulateOptions: _optionAssertions.assertFunction,\n  pre: _optionAssertions.assertFunction,\n  post: _optionAssertions.assertFunction,\n  inherits: _optionAssertions.assertFunction,\n  visitor: assertVisitorMap,\n  parserOverride: _optionAssertions.assertFunction,\n  generatorOverride: _optionAssertions.assertFunction\n};\n\nfunction assertVisitorMap(loc, value) {\n  const obj = (0, _optionAssertions.assertObject)(loc, value);\n\n  if (obj) {\n    Object.keys(obj).forEach(prop => assertVisitorHandler(prop, obj[prop]));\n\n    if (obj.enter || obj.exit) {\n      throw new Error(`${(0, _optionAssertions.msg)(loc)} cannot contain catch-all \"enter\" or \"exit\" handlers. Please target individual nodes.`);\n    }\n  }\n\n  return obj;\n}\n\nfunction assertVisitorHandler(key, value) {\n  if (value && typeof value === \"object\") {\n    Object.keys(value).forEach(handler => {\n      if (handler !== \"enter\" && handler !== \"exit\") {\n        throw new Error(`.visitor[\"${key}\"] may only have .enter and/or .exit handlers.`);\n      }\n    });\n  } else if (typeof value !== \"function\") {\n    throw new Error(`.visitor[\"${key}\"] must be a function`);\n  }\n\n  return value;\n}\n\nfunction validatePluginObject(obj) {\n  const rootPath = {\n    type: \"root\",\n    source: \"plugin\"\n  };\n  Object.keys(obj).forEach(key => {\n    const validator = VALIDATORS[key];\n\n    if (validator) {\n      const optLoc = {\n        type: \"option\",\n        name: key,\n        parent: rootPath\n      };\n      validator(optLoc, obj[key]);\n    } else {\n      const invalidPluginPropertyError = new Error(`.${key} is not a valid Plugin property`);\n      invalidPluginPropertyError.code = \"BABEL_UNKNOWN_PLUGIN_PROPERTY\";\n      throw invalidPluginPropertyError;\n    }\n  });\n  return obj;\n}"],"file":"plugins.js"}