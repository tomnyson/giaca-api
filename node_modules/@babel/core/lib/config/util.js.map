{"version":3,"sources":["../../../../../../node_modules/@babel/core/lib/config/util.js"],"names":["Object","value","exports","k","source","parserOpts","targetObj","target","mergeDefaultFields","val","Symbol"],"mappings":"AAAA;;AAEAA,MAAM,CAANA,cAAAA,CAAAA,OAAAA,EAAAA,YAAAA,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7CD;AAGAE,OAAO,CAAPA,YAAAA,GAAAA,YAAAA;AACAA,OAAO,CAAPA,kBAAAA,GAAAA,kBAAAA;;AAEA,SAAA,YAAA,CAAA,MAAA,EAAA,MAAA,EAAsC;AACpC,OAAK,MAAL,CAAA,IAAgBF,MAAM,CAANA,IAAAA,CAAhB,MAAgBA,CAAhB,EAAqC;AACnC,QAAI,CAACG,CAAC,KAADA,YAAAA,IAAsBA,CAAC,KAAvBA,eAAAA,IAA+CA,CAAC,KAAjD,aAAA,KAAwEC,MAAM,CAAlF,CAAkF,CAAlF,EAAuF;AACrF,YAAMC,UAAU,GAAGD,MAAM,CAAzB,CAAyB,CAAzB;AACA,YAAME,SAAS,GAAGC,MAAM,CAANA,CAAM,CAANA,KAAcA,MAAM,CAANA,CAAM,CAANA,GAAhC,EAAkBA,CAAlB;AACAC,MAAAA,kBAAkB,CAAA,SAAA,EAAlBA,UAAkB,CAAlBA;AAHF,KAAA,MAIO;AACL,YAAMC,GAAG,GAAGL,MAAM,CAAlB,CAAkB,CAAlB;AACA,UAAIK,GAAG,KAAP,SAAA,EAAuBF,MAAM,CAANA,CAAM,CAANA,GAAAA,GAAAA;AACxB;AACF;AACF;;AAED,SAAA,kBAAA,CAAA,MAAA,EAAA,MAAA,EAA4C;AAC1C,OAAK,MAAL,CAAA,IAAgBP,MAAM,CAANA,IAAAA,CAAhB,MAAgBA,CAAhB,EAAqC;AACnC,UAAMS,GAAG,GAAGL,MAAM,CAAlB,CAAkB,CAAlB;AACA,QAAIK,GAAG,KAAP,SAAA,EAAuBF,MAAM,CAANA,CAAM,CAANA,GAAAA,GAAAA;AACxB;AACF;;AAED,SAAA,kBAAA,CAAA,KAAA,EAAmC;AACjC,SAAO,CAAC,CAAD,KAAA,IAAW,OAAON,KAAK,CAAZ,IAAA,KAAX,UAAA,IAA+C,OAAOA,KAAK,CAACS,MAAM,CAAnB,QAAY,CAAZ,KAAtD,UAAA;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.mergeOptions = mergeOptions;\nexports.isIterableIterator = isIterableIterator;\n\nfunction mergeOptions(target, source) {\n  for (const k of Object.keys(source)) {\n    if ((k === \"parserOpts\" || k === \"generatorOpts\" || k === \"assumptions\") && source[k]) {\n      const parserOpts = source[k];\n      const targetObj = target[k] || (target[k] = {});\n      mergeDefaultFields(targetObj, parserOpts);\n    } else {\n      const val = source[k];\n      if (val !== undefined) target[k] = val;\n    }\n  }\n}\n\nfunction mergeDefaultFields(target, source) {\n  for (const k of Object.keys(source)) {\n    const val = source[k];\n    if (val !== undefined) target[k] = val;\n  }\n}\n\nfunction isIterableIterator(value) {\n  return !!value && typeof value.next === \"function\" && typeof value[Symbol.iterator] === \"function\";\n}"],"file":"util.js"}