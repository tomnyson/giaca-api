{"version":3,"sources":["../../../../../../node_modules/@babel/core/lib/parser/index.js"],"names":["Object","value","exports","data","require","_parser","_codeFrame","_missingPluginHelper","highlightCode","filename","results","parserOverride","ast","err","missingPlugin","codeFrame","start","line","loc","column"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parser;\n\nfunction _parser() {\n  const data = require(\"@babel/parser\");\n\n  _parser = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _codeFrame() {\n  const data = require(\"@babel/code-frame\");\n\n  _codeFrame = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _missingPluginHelper = require(\"./util/missing-plugin-helper\");\n\nfunction* parser(pluginPasses, {\n  parserOpts,\n  highlightCode = true,\n  filename = \"unknown\"\n}, code) {\n  try {\n    const results = [];\n\n    for (const plugins of pluginPasses) {\n      for (const plugin of plugins) {\n        const {\n          parserOverride\n        } = plugin;\n\n        if (parserOverride) {\n          const ast = parserOverride(code, parserOpts, _parser().parse);\n          if (ast !== undefined) results.push(ast);\n        }\n      }\n    }\n\n    if (results.length === 0) {\n      return (0, _parser().parse)(code, parserOpts);\n    } else if (results.length === 1) {\n      yield* [];\n\n      if (typeof results[0].then === \"function\") {\n        throw new Error(`You appear to be using an async parser plugin, ` + `which your current version of Babel does not support. ` + `If you're using a published plugin, you may need to upgrade ` + `your @babel/core version.`);\n      }\n\n      return results[0];\n    }\n\n    throw new Error(\"More than one plugin attempted to override parsing.\");\n  } catch (err) {\n    if (err.code === \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\") {\n      err.message += \"\\nConsider renaming the file to '.mjs', or setting sourceType:module \" + \"or sourceType:unambiguous in your Babel config for this file.\";\n    }\n\n    const {\n      loc,\n      missingPlugin\n    } = err;\n\n    if (loc) {\n      const codeFrame = (0, _codeFrame().codeFrameColumns)(code, {\n        start: {\n          line: loc.line,\n          column: loc.column + 1\n        }\n      }, {\n        highlightCode\n      });\n\n      if (missingPlugin) {\n        err.message = `${filename}: ` + (0, _missingPluginHelper.default)(missingPlugin[0], loc, codeFrame);\n      } else {\n        err.message = `${filename}: ${err.message}\\n\\n` + codeFrame;\n      }\n\n      err.code = \"BABEL_PARSE_ERROR\";\n    }\n\n    throw err;\n  }\n}"],"file":"index.js"}