{"version":3,"sources":["../../../../../node_modules/@babel/helper-create-regexp-features-plugin/lib/index.js"],"names":["Object","value","exports","_regexpuCore","require","_features","_util","_core","_helperAnnotateAsPure","node","version","v","versionKey","options","pre","file","features","_file$get","newFeatures","runtime","useUnicodeFlag","visitor","RegExpLiteral","_file$get2","regexpuOptions","namedCaptureGroups","isRegExpTest","call","path","pullFlag","object","computed","name"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createRegExpFeaturePlugin = createRegExpFeaturePlugin;\n\nvar _regexpuCore = require(\"regexpu-core\");\n\nvar _features = require(\"./features\");\n\nvar _util = require(\"./util\");\n\nvar _core = require(\"@babel/core\");\n\nvar _helperAnnotateAsPure = require(\"@babel/helper-annotate-as-pure\");\n\nfunction pullFlag(node, flag) {\n  node.flags = node.flags.replace(flag, \"\");\n}\n\nconst version = \"7.14.5\".split(\".\").reduce((v, x) => v * 1e5 + +x, 0);\nconst versionKey = \"@babel/plugin-regexp-features/version\";\n\nfunction createRegExpFeaturePlugin({\n  name,\n  feature,\n  options = {}\n}) {\n  return {\n    name,\n\n    pre() {\n      var _file$get;\n\n      const {\n        file\n      } = this;\n      const features = (_file$get = file.get(_features.featuresKey)) != null ? _file$get : 0;\n      let newFeatures = (0, _features.enableFeature)(features, _features.FEATURES[feature]);\n      const {\n        useUnicodeFlag,\n        runtime = true\n      } = options;\n\n      if (useUnicodeFlag === false) {\n        newFeatures = (0, _features.enableFeature)(newFeatures, _features.FEATURES.unicodeFlag);\n      }\n\n      if (newFeatures !== features) {\n        file.set(_features.featuresKey, newFeatures);\n      }\n\n      if (!runtime) {\n        file.set(_features.runtimeKey, false);\n      }\n\n      if (!file.has(versionKey) || file.get(versionKey) < version) {\n        file.set(versionKey, version);\n      }\n    },\n\n    visitor: {\n      RegExpLiteral(path) {\n        var _file$get2;\n\n        const {\n          node\n        } = path;\n        const {\n          file\n        } = this;\n        const features = file.get(_features.featuresKey);\n        const runtime = (_file$get2 = file.get(_features.runtimeKey)) != null ? _file$get2 : true;\n        const regexpuOptions = (0, _util.generateRegexpuOptions)(node, features);\n\n        if (regexpuOptions === null) {\n          return;\n        }\n\n        const namedCaptureGroups = {};\n\n        if (regexpuOptions.namedGroup) {\n          regexpuOptions.onNamedGroup = (name, index) => {\n            namedCaptureGroups[name] = index;\n          };\n        }\n\n        node.pattern = _regexpuCore(node.pattern, node.flags, regexpuOptions);\n\n        if (regexpuOptions.namedGroup && Object.keys(namedCaptureGroups).length > 0 && runtime && !isRegExpTest(path)) {\n          const call = _core.types.callExpression(this.addHelper(\"wrapRegExp\"), [node, _core.types.valueToNode(namedCaptureGroups)]);\n\n          (0, _helperAnnotateAsPure.default)(call);\n          path.replaceWith(call);\n        }\n\n        if ((0, _features.hasFeature)(features, _features.FEATURES.unicodeFlag)) {\n          pullFlag(node, \"u\");\n        }\n\n        if ((0, _features.hasFeature)(features, _features.FEATURES.dotAllFlag)) {\n          pullFlag(node, \"s\");\n        }\n      }\n\n    }\n  };\n}\n\nfunction isRegExpTest(path) {\n  return path.parentPath.isMemberExpression({\n    object: path.node,\n    computed: false\n  }) && path.parentPath.get(\"property\").isIdentifier({\n    name: \"test\"\n  });\n}"],"file":"index.js"}