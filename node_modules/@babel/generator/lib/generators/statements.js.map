{"version":3,"sources":["../../../../../../node_modules/@babel/generator/lib/generators/statements.js"],"names":["Object","value","exports","_t","require","isStatement","node","needsBlock","isIfStatement","getLastStatement","statement","buildForXStatement","op","ForInStatement","ForOfStatement","key","label","isLabel","terminatorState","ContinueStatement","buildLabelStatement","ReturnStatement","BreakStatement","ThrowStatement","indent","addNewlines","i","hasInits","isFor","declar","separator","isForStatement","parent"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WithStatement = WithStatement;\nexports.IfStatement = IfStatement;\nexports.ForStatement = ForStatement;\nexports.WhileStatement = WhileStatement;\nexports.DoWhileStatement = DoWhileStatement;\nexports.LabeledStatement = LabeledStatement;\nexports.TryStatement = TryStatement;\nexports.CatchClause = CatchClause;\nexports.SwitchStatement = SwitchStatement;\nexports.SwitchCase = SwitchCase;\nexports.DebuggerStatement = DebuggerStatement;\nexports.VariableDeclaration = VariableDeclaration;\nexports.VariableDeclarator = VariableDeclarator;\nexports.ThrowStatement = exports.BreakStatement = exports.ReturnStatement = exports.ContinueStatement = exports.ForOfStatement = exports.ForInStatement = void 0;\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  isFor,\n  isForStatement,\n  isIfStatement,\n  isStatement\n} = _t;\n\nfunction WithStatement(node) {\n  this.word(\"with\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.object, node);\n  this.token(\")\");\n  this.printBlock(node);\n}\n\nfunction IfStatement(node) {\n  this.word(\"if\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.test, node);\n  this.token(\")\");\n  this.space();\n  const needsBlock = node.alternate && isIfStatement(getLastStatement(node.consequent));\n\n  if (needsBlock) {\n    this.token(\"{\");\n    this.newline();\n    this.indent();\n  }\n\n  this.printAndIndentOnComments(node.consequent, node);\n\n  if (needsBlock) {\n    this.dedent();\n    this.newline();\n    this.token(\"}\");\n  }\n\n  if (node.alternate) {\n    if (this.endsWith(125)) this.space();\n    this.word(\"else\");\n    this.space();\n    this.printAndIndentOnComments(node.alternate, node);\n  }\n}\n\nfunction getLastStatement(statement) {\n  if (!isStatement(statement.body)) return statement;\n  return getLastStatement(statement.body);\n}\n\nfunction ForStatement(node) {\n  this.word(\"for\");\n  this.space();\n  this.token(\"(\");\n  this.inForStatementInitCounter++;\n  this.print(node.init, node);\n  this.inForStatementInitCounter--;\n  this.token(\";\");\n\n  if (node.test) {\n    this.space();\n    this.print(node.test, node);\n  }\n\n  this.token(\";\");\n\n  if (node.update) {\n    this.space();\n    this.print(node.update, node);\n  }\n\n  this.token(\")\");\n  this.printBlock(node);\n}\n\nfunction WhileStatement(node) {\n  this.word(\"while\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.test, node);\n  this.token(\")\");\n  this.printBlock(node);\n}\n\nconst buildForXStatement = function (op) {\n  return function (node) {\n    this.word(\"for\");\n    this.space();\n\n    if (op === \"of\" && node.await) {\n      this.word(\"await\");\n      this.space();\n    }\n\n    this.token(\"(\");\n    this.print(node.left, node);\n    this.space();\n    this.word(op);\n    this.space();\n    this.print(node.right, node);\n    this.token(\")\");\n    this.printBlock(node);\n  };\n};\n\nconst ForInStatement = buildForXStatement(\"in\");\nexports.ForInStatement = ForInStatement;\nconst ForOfStatement = buildForXStatement(\"of\");\nexports.ForOfStatement = ForOfStatement;\n\nfunction DoWhileStatement(node) {\n  this.word(\"do\");\n  this.space();\n  this.print(node.body, node);\n  this.space();\n  this.word(\"while\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.test, node);\n  this.token(\")\");\n  this.semicolon();\n}\n\nfunction buildLabelStatement(prefix, key = \"label\") {\n  return function (node) {\n    this.word(prefix);\n    const label = node[key];\n\n    if (label) {\n      this.space();\n      const isLabel = key == \"label\";\n      const terminatorState = this.startTerminatorless(isLabel);\n      this.print(label, node);\n      this.endTerminatorless(terminatorState);\n    }\n\n    this.semicolon();\n  };\n}\n\nconst ContinueStatement = buildLabelStatement(\"continue\");\nexports.ContinueStatement = ContinueStatement;\nconst ReturnStatement = buildLabelStatement(\"return\", \"argument\");\nexports.ReturnStatement = ReturnStatement;\nconst BreakStatement = buildLabelStatement(\"break\");\nexports.BreakStatement = BreakStatement;\nconst ThrowStatement = buildLabelStatement(\"throw\", \"argument\");\nexports.ThrowStatement = ThrowStatement;\n\nfunction LabeledStatement(node) {\n  this.print(node.label, node);\n  this.token(\":\");\n  this.space();\n  this.print(node.body, node);\n}\n\nfunction TryStatement(node) {\n  this.word(\"try\");\n  this.space();\n  this.print(node.block, node);\n  this.space();\n\n  if (node.handlers) {\n    this.print(node.handlers[0], node);\n  } else {\n    this.print(node.handler, node);\n  }\n\n  if (node.finalizer) {\n    this.space();\n    this.word(\"finally\");\n    this.space();\n    this.print(node.finalizer, node);\n  }\n}\n\nfunction CatchClause(node) {\n  this.word(\"catch\");\n  this.space();\n\n  if (node.param) {\n    this.token(\"(\");\n    this.print(node.param, node);\n    this.print(node.param.typeAnnotation, node);\n    this.token(\")\");\n    this.space();\n  }\n\n  this.print(node.body, node);\n}\n\nfunction SwitchStatement(node) {\n  this.word(\"switch\");\n  this.space();\n  this.token(\"(\");\n  this.print(node.discriminant, node);\n  this.token(\")\");\n  this.space();\n  this.token(\"{\");\n  this.printSequence(node.cases, node, {\n    indent: true,\n\n    addNewlines(leading, cas) {\n      if (!leading && node.cases[node.cases.length - 1] === cas) return -1;\n    }\n\n  });\n  this.token(\"}\");\n}\n\nfunction SwitchCase(node) {\n  if (node.test) {\n    this.word(\"case\");\n    this.space();\n    this.print(node.test, node);\n    this.token(\":\");\n  } else {\n    this.word(\"default\");\n    this.token(\":\");\n  }\n\n  if (node.consequent.length) {\n    this.newline();\n    this.printSequence(node.consequent, node, {\n      indent: true\n    });\n  }\n}\n\nfunction DebuggerStatement() {\n  this.word(\"debugger\");\n  this.semicolon();\n}\n\nfunction variableDeclarationIndent() {\n  this.token(\",\");\n  this.newline();\n\n  if (this.endsWith(10)) {\n    for (let i = 0; i < 4; i++) this.space(true);\n  }\n}\n\nfunction constDeclarationIndent() {\n  this.token(\",\");\n  this.newline();\n\n  if (this.endsWith(10)) {\n    for (let i = 0; i < 6; i++) this.space(true);\n  }\n}\n\nfunction VariableDeclaration(node, parent) {\n  if (node.declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this.word(node.kind);\n  this.space();\n  let hasInits = false;\n\n  if (!isFor(parent)) {\n    for (const declar of node.declarations) {\n      if (declar.init) {\n        hasInits = true;\n      }\n    }\n  }\n\n  let separator;\n\n  if (hasInits) {\n    separator = node.kind === \"const\" ? constDeclarationIndent : variableDeclarationIndent;\n  }\n\n  this.printList(node.declarations, node, {\n    separator\n  });\n\n  if (isFor(parent)) {\n    if (isForStatement(parent)) {\n      if (parent.init === node) return;\n    } else {\n      if (parent.left === node) return;\n    }\n  }\n\n  this.semicolon();\n}\n\nfunction VariableDeclarator(node) {\n  this.print(node.id, node);\n  if (node.definite) this.token(\"!\");\n  this.print(node.id.typeAnnotation, node);\n\n  if (node.init) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.init, node);\n  }\n}"],"file":"statements.js"}