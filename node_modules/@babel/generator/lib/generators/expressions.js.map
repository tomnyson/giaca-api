{"version":3,"sources":["../../../../../../node_modules/@babel/generator/lib/generators/expressions.js"],"names":["Object","value","exports","_t","require","n","isNewExpression","node","isCallExpression","callee","isMemberExpression","computed","isLiteral","terminatorState","YieldExpression","buildYieldAwait","AwaitExpression","parens","indent"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.UnaryExpression = UnaryExpression;\nexports.DoExpression = DoExpression;\nexports.ParenthesizedExpression = ParenthesizedExpression;\nexports.UpdateExpression = UpdateExpression;\nexports.ConditionalExpression = ConditionalExpression;\nexports.NewExpression = NewExpression;\nexports.SequenceExpression = SequenceExpression;\nexports.ThisExpression = ThisExpression;\nexports.Super = Super;\nexports.Decorator = Decorator;\nexports.OptionalMemberExpression = OptionalMemberExpression;\nexports.OptionalCallExpression = OptionalCallExpression;\nexports.CallExpression = CallExpression;\nexports.Import = Import;\nexports.EmptyStatement = EmptyStatement;\nexports.ExpressionStatement = ExpressionStatement;\nexports.AssignmentPattern = AssignmentPattern;\nexports.LogicalExpression = exports.BinaryExpression = exports.AssignmentExpression = AssignmentExpression;\nexports.BindExpression = BindExpression;\nexports.MemberExpression = MemberExpression;\nexports.MetaProperty = MetaProperty;\nexports.PrivateName = PrivateName;\nexports.V8IntrinsicIdentifier = V8IntrinsicIdentifier;\nexports.ModuleExpression = ModuleExpression;\nexports.AwaitExpression = exports.YieldExpression = void 0;\n\nvar _t = require(\"@babel/types\");\n\nvar n = require(\"../node\");\n\nconst {\n  isCallExpression,\n  isLiteral,\n  isMemberExpression,\n  isNewExpression\n} = _t;\n\nfunction UnaryExpression(node) {\n  if (node.operator === \"void\" || node.operator === \"delete\" || node.operator === \"typeof\" || node.operator === \"throw\") {\n    this.word(node.operator);\n    this.space();\n  } else {\n    this.token(node.operator);\n  }\n\n  this.print(node.argument, node);\n}\n\nfunction DoExpression(node) {\n  if (node.async) {\n    this.word(\"async\");\n    this.space();\n  }\n\n  this.word(\"do\");\n  this.space();\n  this.print(node.body, node);\n}\n\nfunction ParenthesizedExpression(node) {\n  this.token(\"(\");\n  this.print(node.expression, node);\n  this.token(\")\");\n}\n\nfunction UpdateExpression(node) {\n  if (node.prefix) {\n    this.token(node.operator);\n    this.print(node.argument, node);\n  } else {\n    this.startTerminatorless(true);\n    this.print(node.argument, node);\n    this.endTerminatorless();\n    this.token(node.operator);\n  }\n}\n\nfunction ConditionalExpression(node) {\n  this.print(node.test, node);\n  this.space();\n  this.token(\"?\");\n  this.space();\n  this.print(node.consequent, node);\n  this.space();\n  this.token(\":\");\n  this.space();\n  this.print(node.alternate, node);\n}\n\nfunction NewExpression(node, parent) {\n  this.word(\"new\");\n  this.space();\n  this.print(node.callee, node);\n\n  if (this.format.minified && node.arguments.length === 0 && !node.optional && !isCallExpression(parent, {\n    callee: node\n  }) && !isMemberExpression(parent) && !isNewExpression(parent)) {\n    return;\n  }\n\n  this.print(node.typeArguments, node);\n  this.print(node.typeParameters, node);\n\n  if (node.optional) {\n    this.token(\"?.\");\n  }\n\n  this.token(\"(\");\n  this.printList(node.arguments, node);\n  this.token(\")\");\n}\n\nfunction SequenceExpression(node) {\n  this.printList(node.expressions, node);\n}\n\nfunction ThisExpression() {\n  this.word(\"this\");\n}\n\nfunction Super() {\n  this.word(\"super\");\n}\n\nfunction Decorator(node) {\n  this.token(\"@\");\n  this.print(node.expression, node);\n  this.newline();\n}\n\nfunction OptionalMemberExpression(node) {\n  this.print(node.object, node);\n\n  if (!node.computed && isMemberExpression(node.property)) {\n    throw new TypeError(\"Got a MemberExpression for MemberExpression property\");\n  }\n\n  let computed = node.computed;\n\n  if (isLiteral(node.property) && typeof node.property.value === \"number\") {\n    computed = true;\n  }\n\n  if (node.optional) {\n    this.token(\"?.\");\n  }\n\n  if (computed) {\n    this.token(\"[\");\n    this.print(node.property, node);\n    this.token(\"]\");\n  } else {\n    if (!node.optional) {\n      this.token(\".\");\n    }\n\n    this.print(node.property, node);\n  }\n}\n\nfunction OptionalCallExpression(node) {\n  this.print(node.callee, node);\n  this.print(node.typeArguments, node);\n  this.print(node.typeParameters, node);\n\n  if (node.optional) {\n    this.token(\"?.\");\n  }\n\n  this.token(\"(\");\n  this.printList(node.arguments, node);\n  this.token(\")\");\n}\n\nfunction CallExpression(node) {\n  this.print(node.callee, node);\n  this.print(node.typeArguments, node);\n  this.print(node.typeParameters, node);\n  this.token(\"(\");\n  this.printList(node.arguments, node);\n  this.token(\")\");\n}\n\nfunction Import() {\n  this.word(\"import\");\n}\n\nfunction buildYieldAwait(keyword) {\n  return function (node) {\n    this.word(keyword);\n\n    if (node.delegate) {\n      this.token(\"*\");\n    }\n\n    if (node.argument) {\n      this.space();\n      const terminatorState = this.startTerminatorless();\n      this.print(node.argument, node);\n      this.endTerminatorless(terminatorState);\n    }\n  };\n}\n\nconst YieldExpression = buildYieldAwait(\"yield\");\nexports.YieldExpression = YieldExpression;\nconst AwaitExpression = buildYieldAwait(\"await\");\nexports.AwaitExpression = AwaitExpression;\n\nfunction EmptyStatement() {\n  this.semicolon(true);\n}\n\nfunction ExpressionStatement(node) {\n  this.print(node.expression, node);\n  this.semicolon();\n}\n\nfunction AssignmentPattern(node) {\n  this.print(node.left, node);\n  if (node.left.optional) this.token(\"?\");\n  this.print(node.left.typeAnnotation, node);\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(node.right, node);\n}\n\nfunction AssignmentExpression(node, parent) {\n  const parens = this.inForStatementInitCounter && node.operator === \"in\" && !n.needsParens(node, parent);\n\n  if (parens) {\n    this.token(\"(\");\n  }\n\n  this.print(node.left, node);\n  this.space();\n\n  if (node.operator === \"in\" || node.operator === \"instanceof\") {\n    this.word(node.operator);\n  } else {\n    this.token(node.operator);\n  }\n\n  this.space();\n  this.print(node.right, node);\n\n  if (parens) {\n    this.token(\")\");\n  }\n}\n\nfunction BindExpression(node) {\n  this.print(node.object, node);\n  this.token(\"::\");\n  this.print(node.callee, node);\n}\n\nfunction MemberExpression(node) {\n  this.print(node.object, node);\n\n  if (!node.computed && isMemberExpression(node.property)) {\n    throw new TypeError(\"Got a MemberExpression for MemberExpression property\");\n  }\n\n  let computed = node.computed;\n\n  if (isLiteral(node.property) && typeof node.property.value === \"number\") {\n    computed = true;\n  }\n\n  if (computed) {\n    this.token(\"[\");\n    this.print(node.property, node);\n    this.token(\"]\");\n  } else {\n    this.token(\".\");\n    this.print(node.property, node);\n  }\n}\n\nfunction MetaProperty(node) {\n  this.print(node.meta, node);\n  this.token(\".\");\n  this.print(node.property, node);\n}\n\nfunction PrivateName(node) {\n  this.token(\"#\");\n  this.print(node.id, node);\n}\n\nfunction V8IntrinsicIdentifier(node) {\n  this.token(\"%\");\n  this.word(node.name);\n}\n\nfunction ModuleExpression(node) {\n  this.word(\"module\");\n  this.space();\n  this.token(\"{\");\n\n  if (node.body.body.length === 0) {\n    this.token(\"}\");\n  } else {\n    this.newline();\n    this.printSequence(node.body.body, node, {\n      indent: true\n    });\n    this.rightBrace();\n  }\n}"],"file":"expressions.js"}