{"version":3,"sources":["../../../../../../node_modules/@babel/generator/lib/generators/template-literals.js"],"names":["Object","value","exports","node","isFirst","parent","isLast","quasis","i"],"mappings":"AAAA;;AAEAA,MAAM,CAANA,cAAAA,CAAAA,OAAAA,EAAAA,YAAAA,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7CD;AAGAE,OAAO,CAAPA,wBAAAA,GAAAA,wBAAAA;AACAA,OAAO,CAAPA,eAAAA,GAAAA,eAAAA;AACAA,OAAO,CAAPA,eAAAA,GAAAA,eAAAA;;AAEA,SAAA,wBAAA,CAAA,IAAA,EAAwC;AACtC,OAAA,KAAA,CAAWC,IAAI,CAAf,GAAA,EAAA,IAAA;AACA,OAAA,KAAA,CAAWA,IAAI,CAAf,cAAA,EAAA,IAAA;AACA,OAAA,KAAA,CAAWA,IAAI,CAAf,KAAA,EAAA,IAAA;AACD;;AAED,SAAA,eAAA,CAAA,IAAA,EAAA,MAAA,EAAuC;AACrC,QAAMC,OAAO,GAAGC,MAAM,CAANA,MAAAA,CAAAA,CAAAA,MAAhB,IAAA;AACA,QAAMC,MAAM,GAAGD,MAAM,CAANA,MAAAA,CAAcA,MAAM,CAANA,MAAAA,CAAAA,MAAAA,GAAdA,CAAAA,MAAf,IAAA;AACA,QAAMJ,KAAK,GAAG,CAACG,OAAO,GAAA,GAAA,GAAR,GAAA,IAAwBD,IAAI,CAAJA,KAAAA,CAAxB,GAAA,IAA0CG,MAAM,GAAA,GAAA,GAA9D,IAAc,CAAd;AACA,OAAA,KAAA,CAAA,KAAA;AACD;;AAED,SAAA,eAAA,CAAA,IAAA,EAA+B;AAC7B,QAAMC,MAAM,GAAGJ,IAAI,CAAnB,MAAA;;AAEA,OAAK,IAAIK,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGD,MAAM,CAA1B,MAAA,EAAmCC,CAAnC,EAAA,EAAwC;AACtC,SAAA,KAAA,CAAWD,MAAM,CAAjB,CAAiB,CAAjB,EAAA,IAAA;;AAEA,QAAIC,CAAC,GAADA,CAAAA,GAAQD,MAAM,CAAlB,MAAA,EAA2B;AACzB,WAAA,KAAA,CAAWJ,IAAI,CAAJA,WAAAA,CAAX,CAAWA,CAAX,EAAA,IAAA;AACD;AACF;AACF","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TaggedTemplateExpression = TaggedTemplateExpression;\nexports.TemplateElement = TemplateElement;\nexports.TemplateLiteral = TemplateLiteral;\n\nfunction TaggedTemplateExpression(node) {\n  this.print(node.tag, node);\n  this.print(node.typeParameters, node);\n  this.print(node.quasi, node);\n}\n\nfunction TemplateElement(node, parent) {\n  const isFirst = parent.quasis[0] === node;\n  const isLast = parent.quasis[parent.quasis.length - 1] === node;\n  const value = (isFirst ? \"`\" : \"}\") + node.value.raw + (isLast ? \"`\" : \"${\");\n  this.token(value);\n}\n\nfunction TemplateLiteral(node) {\n  const quasis = node.quasis;\n\n  for (let i = 0; i < quasis.length; i++) {\n    this.print(quasis[i], node);\n\n    if (i + 1 < quasis.length) {\n      this.print(node.expressions[i], node);\n    }\n  }\n}"],"file":"template-literals.js"}