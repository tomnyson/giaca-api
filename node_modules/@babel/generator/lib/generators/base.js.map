{"version":3,"sources":["../../../../../../node_modules/@babel/generator/lib/generators/base.js"],"names":["Object","value","exports","node","hasDirectives","_node$directives","indent","unescapedSingleQuoteRE","unescapedDoubleQuoteRE","raw"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.File = File;\nexports.Program = Program;\nexports.BlockStatement = BlockStatement;\nexports.Directive = Directive;\nexports.DirectiveLiteral = DirectiveLiteral;\nexports.InterpreterDirective = InterpreterDirective;\nexports.Placeholder = Placeholder;\n\nfunction File(node) {\n  if (node.program) {\n    this.print(node.program.interpreter, node);\n  }\n\n  this.print(node.program, node);\n}\n\nfunction Program(node) {\n  this.printInnerComments(node, false);\n  this.printSequence(node.directives, node);\n  if (node.directives && node.directives.length) this.newline();\n  this.printSequence(node.body, node);\n}\n\nfunction BlockStatement(node) {\n  var _node$directives;\n\n  this.token(\"{\");\n  this.printInnerComments(node);\n  const hasDirectives = (_node$directives = node.directives) == null ? void 0 : _node$directives.length;\n\n  if (node.body.length || hasDirectives) {\n    this.newline();\n    this.printSequence(node.directives, node, {\n      indent: true\n    });\n    if (hasDirectives) this.newline();\n    this.printSequence(node.body, node, {\n      indent: true\n    });\n    this.removeTrailingNewline();\n    this.source(\"end\", node.loc);\n    if (!this.endsWith(10)) this.newline();\n    this.rightBrace();\n  } else {\n    this.source(\"end\", node.loc);\n    this.token(\"}\");\n  }\n}\n\nfunction Directive(node) {\n  this.print(node.value, node);\n  this.semicolon();\n}\n\nconst unescapedSingleQuoteRE = /(?:^|[^\\\\])(?:\\\\\\\\)*'/;\nconst unescapedDoubleQuoteRE = /(?:^|[^\\\\])(?:\\\\\\\\)*\"/;\n\nfunction DirectiveLiteral(node) {\n  const raw = this.getPossibleRaw(node);\n\n  if (raw != null) {\n    this.token(raw);\n    return;\n  }\n\n  const {\n    value\n  } = node;\n\n  if (!unescapedDoubleQuoteRE.test(value)) {\n    this.token(`\"${value}\"`);\n  } else if (!unescapedSingleQuoteRE.test(value)) {\n    this.token(`'${value}'`);\n  } else {\n    throw new Error(\"Malformed AST: it is not possible to print a directive containing\" + \" both unescaped single and double quotes.\");\n  }\n}\n\nfunction InterpreterDirective(node) {\n  this.token(`#!${node.value}\\n`);\n}\n\nfunction Placeholder(node) {\n  this.token(\"%%\");\n  this.print(node.name);\n  this.token(\"%%\");\n\n  if (node.expectedNode === \"Statement\") {\n    this.semicolon();\n  }\n}"],"file":"base.js"}