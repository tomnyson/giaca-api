{"version":3,"sources":["../../../../../../node_modules/@babel/generator/lib/generators/modules.js"],"names":["Object","value","exports","_t","require","isStatement","node","isClassDeclaration","ExportDeclaration","declar","specifiers","hasSpecial","first","isExportDefaultSpecifier","isExportNamespaceSpecifier","isImportDefaultSpecifier","isImportNamespaceSpecifier","_node$attributes"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ImportSpecifier = ImportSpecifier;\nexports.ImportDefaultSpecifier = ImportDefaultSpecifier;\nexports.ExportDefaultSpecifier = ExportDefaultSpecifier;\nexports.ExportSpecifier = ExportSpecifier;\nexports.ExportNamespaceSpecifier = ExportNamespaceSpecifier;\nexports.ExportAllDeclaration = ExportAllDeclaration;\nexports.ExportNamedDeclaration = ExportNamedDeclaration;\nexports.ExportDefaultDeclaration = ExportDefaultDeclaration;\nexports.ImportDeclaration = ImportDeclaration;\nexports.ImportAttribute = ImportAttribute;\nexports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  isClassDeclaration,\n  isExportDefaultSpecifier,\n  isExportNamespaceSpecifier,\n  isImportDefaultSpecifier,\n  isImportNamespaceSpecifier,\n  isStatement\n} = _t;\n\nfunction ImportSpecifier(node) {\n  if (node.importKind === \"type\" || node.importKind === \"typeof\") {\n    this.word(node.importKind);\n    this.space();\n  }\n\n  this.print(node.imported, node);\n\n  if (node.local && node.local.name !== node.imported.name) {\n    this.space();\n    this.word(\"as\");\n    this.space();\n    this.print(node.local, node);\n  }\n}\n\nfunction ImportDefaultSpecifier(node) {\n  this.print(node.local, node);\n}\n\nfunction ExportDefaultSpecifier(node) {\n  this.print(node.exported, node);\n}\n\nfunction ExportSpecifier(node) {\n  this.print(node.local, node);\n\n  if (node.exported && node.local.name !== node.exported.name) {\n    this.space();\n    this.word(\"as\");\n    this.space();\n    this.print(node.exported, node);\n  }\n}\n\nfunction ExportNamespaceSpecifier(node) {\n  this.token(\"*\");\n  this.space();\n  this.word(\"as\");\n  this.space();\n  this.print(node.exported, node);\n}\n\nfunction ExportAllDeclaration(node) {\n  this.word(\"export\");\n  this.space();\n\n  if (node.exportKind === \"type\") {\n    this.word(\"type\");\n    this.space();\n  }\n\n  this.token(\"*\");\n  this.space();\n  this.word(\"from\");\n  this.space();\n  this.print(node.source, node);\n  this.printAssertions(node);\n  this.semicolon();\n}\n\nfunction ExportNamedDeclaration(node) {\n  if (this.format.decoratorsBeforeExport && isClassDeclaration(node.declaration)) {\n    this.printJoin(node.declaration.decorators, node);\n  }\n\n  this.word(\"export\");\n  this.space();\n  ExportDeclaration.apply(this, arguments);\n}\n\nfunction ExportDefaultDeclaration(node) {\n  if (this.format.decoratorsBeforeExport && isClassDeclaration(node.declaration)) {\n    this.printJoin(node.declaration.decorators, node);\n  }\n\n  this.word(\"export\");\n  this.space();\n  this.word(\"default\");\n  this.space();\n  ExportDeclaration.apply(this, arguments);\n}\n\nfunction ExportDeclaration(node) {\n  if (node.declaration) {\n    const declar = node.declaration;\n    this.print(declar, node);\n    if (!isStatement(declar)) this.semicolon();\n  } else {\n    if (node.exportKind === \"type\") {\n      this.word(\"type\");\n      this.space();\n    }\n\n    const specifiers = node.specifiers.slice(0);\n    let hasSpecial = false;\n\n    for (;;) {\n      const first = specifiers[0];\n\n      if (isExportDefaultSpecifier(first) || isExportNamespaceSpecifier(first)) {\n        hasSpecial = true;\n        this.print(specifiers.shift(), node);\n\n        if (specifiers.length) {\n          this.token(\",\");\n          this.space();\n        }\n      } else {\n        break;\n      }\n    }\n\n    if (specifiers.length || !specifiers.length && !hasSpecial) {\n      this.token(\"{\");\n\n      if (specifiers.length) {\n        this.space();\n        this.printList(specifiers, node);\n        this.space();\n      }\n\n      this.token(\"}\");\n    }\n\n    if (node.source) {\n      this.space();\n      this.word(\"from\");\n      this.space();\n      this.print(node.source, node);\n      this.printAssertions(node);\n    }\n\n    this.semicolon();\n  }\n}\n\nfunction ImportDeclaration(node) {\n  this.word(\"import\");\n  this.space();\n\n  if (node.importKind === \"type\" || node.importKind === \"typeof\") {\n    this.word(node.importKind);\n    this.space();\n  }\n\n  const specifiers = node.specifiers.slice(0);\n\n  if (specifiers != null && specifiers.length) {\n    for (;;) {\n      const first = specifiers[0];\n\n      if (isImportDefaultSpecifier(first) || isImportNamespaceSpecifier(first)) {\n        this.print(specifiers.shift(), node);\n\n        if (specifiers.length) {\n          this.token(\",\");\n          this.space();\n        }\n      } else {\n        break;\n      }\n    }\n\n    if (specifiers.length) {\n      this.token(\"{\");\n      this.space();\n      this.printList(specifiers, node);\n      this.space();\n      this.token(\"}\");\n    }\n\n    this.space();\n    this.word(\"from\");\n    this.space();\n  }\n\n  this.print(node.source, node);\n  this.printAssertions(node);\n  {\n    var _node$attributes;\n\n    if ((_node$attributes = node.attributes) != null && _node$attributes.length) {\n      this.space();\n      this.word(\"with\");\n      this.space();\n      this.printList(node.attributes, node);\n    }\n  }\n  this.semicolon();\n}\n\nfunction ImportAttribute(node) {\n  this.print(node.key);\n  this.token(\":\");\n  this.space();\n  this.print(node.value);\n}\n\nfunction ImportNamespaceSpecifier(node) {\n  this.token(\"*\");\n  this.space();\n  this.word(\"as\");\n  this.space();\n  this.print(node.local, node);\n}"],"file":"modules.js"}