{"version":3,"sources":["../../../../../../node_modules/@babel/generator/lib/generators/flow.js"],"names":["Object","value","exports","enumerable","get","_types2","_t","require","_modules","isStatement","node","isDeclareExportDeclaration","FlowExportDeclaration","body","context","members","explicitType","enumExplicitType","enumBody","id","init","enumInitializedMember","declar","parent","_node$extends","separator","andSeparator","props","addNewlines","leading","indent","statement","iterator","orSeparator"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AnyTypeAnnotation = AnyTypeAnnotation;\nexports.ArrayTypeAnnotation = ArrayTypeAnnotation;\nexports.BooleanTypeAnnotation = BooleanTypeAnnotation;\nexports.BooleanLiteralTypeAnnotation = BooleanLiteralTypeAnnotation;\nexports.NullLiteralTypeAnnotation = NullLiteralTypeAnnotation;\nexports.DeclareClass = DeclareClass;\nexports.DeclareFunction = DeclareFunction;\nexports.InferredPredicate = InferredPredicate;\nexports.DeclaredPredicate = DeclaredPredicate;\nexports.DeclareInterface = DeclareInterface;\nexports.DeclareModule = DeclareModule;\nexports.DeclareModuleExports = DeclareModuleExports;\nexports.DeclareTypeAlias = DeclareTypeAlias;\nexports.DeclareOpaqueType = DeclareOpaqueType;\nexports.DeclareVariable = DeclareVariable;\nexports.DeclareExportDeclaration = DeclareExportDeclaration;\nexports.DeclareExportAllDeclaration = DeclareExportAllDeclaration;\nexports.EnumDeclaration = EnumDeclaration;\nexports.EnumBooleanBody = EnumBooleanBody;\nexports.EnumNumberBody = EnumNumberBody;\nexports.EnumStringBody = EnumStringBody;\nexports.EnumSymbolBody = EnumSymbolBody;\nexports.EnumDefaultedMember = EnumDefaultedMember;\nexports.EnumBooleanMember = EnumBooleanMember;\nexports.EnumNumberMember = EnumNumberMember;\nexports.EnumStringMember = EnumStringMember;\nexports.ExistsTypeAnnotation = ExistsTypeAnnotation;\nexports.FunctionTypeAnnotation = FunctionTypeAnnotation;\nexports.FunctionTypeParam = FunctionTypeParam;\nexports.GenericTypeAnnotation = exports.ClassImplements = exports.InterfaceExtends = InterfaceExtends;\nexports._interfaceish = _interfaceish;\nexports._variance = _variance;\nexports.InterfaceDeclaration = InterfaceDeclaration;\nexports.InterfaceTypeAnnotation = InterfaceTypeAnnotation;\nexports.IntersectionTypeAnnotation = IntersectionTypeAnnotation;\nexports.MixedTypeAnnotation = MixedTypeAnnotation;\nexports.EmptyTypeAnnotation = EmptyTypeAnnotation;\nexports.NullableTypeAnnotation = NullableTypeAnnotation;\nexports.NumberTypeAnnotation = NumberTypeAnnotation;\nexports.StringTypeAnnotation = StringTypeAnnotation;\nexports.ThisTypeAnnotation = ThisTypeAnnotation;\nexports.TupleTypeAnnotation = TupleTypeAnnotation;\nexports.TypeofTypeAnnotation = TypeofTypeAnnotation;\nexports.TypeAlias = TypeAlias;\nexports.TypeAnnotation = TypeAnnotation;\nexports.TypeParameterDeclaration = exports.TypeParameterInstantiation = TypeParameterInstantiation;\nexports.TypeParameter = TypeParameter;\nexports.OpaqueType = OpaqueType;\nexports.ObjectTypeAnnotation = ObjectTypeAnnotation;\nexports.ObjectTypeInternalSlot = ObjectTypeInternalSlot;\nexports.ObjectTypeCallProperty = ObjectTypeCallProperty;\nexports.ObjectTypeIndexer = ObjectTypeIndexer;\nexports.ObjectTypeProperty = ObjectTypeProperty;\nexports.ObjectTypeSpreadProperty = ObjectTypeSpreadProperty;\nexports.QualifiedTypeIdentifier = QualifiedTypeIdentifier;\nexports.SymbolTypeAnnotation = SymbolTypeAnnotation;\nexports.UnionTypeAnnotation = UnionTypeAnnotation;\nexports.TypeCastExpression = TypeCastExpression;\nexports.Variance = Variance;\nexports.VoidTypeAnnotation = VoidTypeAnnotation;\nexports.IndexedAccessType = IndexedAccessType;\nexports.OptionalIndexedAccessType = OptionalIndexedAccessType;\nObject.defineProperty(exports, \"NumberLiteralTypeAnnotation\", {\n  enumerable: true,\n  get: function () {\n    return _types2.NumericLiteral;\n  }\n});\nObject.defineProperty(exports, \"StringLiteralTypeAnnotation\", {\n  enumerable: true,\n  get: function () {\n    return _types2.StringLiteral;\n  }\n});\n\nvar _t = require(\"@babel/types\");\n\nvar _modules = require(\"./modules\");\n\nvar _types2 = require(\"./types\");\n\nconst {\n  isDeclareExportDeclaration,\n  isStatement\n} = _t;\n\nfunction AnyTypeAnnotation() {\n  this.word(\"any\");\n}\n\nfunction ArrayTypeAnnotation(node) {\n  this.print(node.elementType, node);\n  this.token(\"[\");\n  this.token(\"]\");\n}\n\nfunction BooleanTypeAnnotation() {\n  this.word(\"boolean\");\n}\n\nfunction BooleanLiteralTypeAnnotation(node) {\n  this.word(node.value ? \"true\" : \"false\");\n}\n\nfunction NullLiteralTypeAnnotation() {\n  this.word(\"null\");\n}\n\nfunction DeclareClass(node, parent) {\n  if (!isDeclareExportDeclaration(parent)) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this.word(\"class\");\n  this.space();\n\n  this._interfaceish(node);\n}\n\nfunction DeclareFunction(node, parent) {\n  if (!isDeclareExportDeclaration(parent)) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this.word(\"function\");\n  this.space();\n  this.print(node.id, node);\n  this.print(node.id.typeAnnotation.typeAnnotation, node);\n\n  if (node.predicate) {\n    this.space();\n    this.print(node.predicate, node);\n  }\n\n  this.semicolon();\n}\n\nfunction InferredPredicate() {\n  this.token(\"%\");\n  this.word(\"checks\");\n}\n\nfunction DeclaredPredicate(node) {\n  this.token(\"%\");\n  this.word(\"checks\");\n  this.token(\"(\");\n  this.print(node.value, node);\n  this.token(\")\");\n}\n\nfunction DeclareInterface(node) {\n  this.word(\"declare\");\n  this.space();\n  this.InterfaceDeclaration(node);\n}\n\nfunction DeclareModule(node) {\n  this.word(\"declare\");\n  this.space();\n  this.word(\"module\");\n  this.space();\n  this.print(node.id, node);\n  this.space();\n  this.print(node.body, node);\n}\n\nfunction DeclareModuleExports(node) {\n  this.word(\"declare\");\n  this.space();\n  this.word(\"module\");\n  this.token(\".\");\n  this.word(\"exports\");\n  this.print(node.typeAnnotation, node);\n}\n\nfunction DeclareTypeAlias(node) {\n  this.word(\"declare\");\n  this.space();\n  this.TypeAlias(node);\n}\n\nfunction DeclareOpaqueType(node, parent) {\n  if (!isDeclareExportDeclaration(parent)) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this.OpaqueType(node);\n}\n\nfunction DeclareVariable(node, parent) {\n  if (!isDeclareExportDeclaration(parent)) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this.word(\"var\");\n  this.space();\n  this.print(node.id, node);\n  this.print(node.id.typeAnnotation, node);\n  this.semicolon();\n}\n\nfunction DeclareExportDeclaration(node) {\n  this.word(\"declare\");\n  this.space();\n  this.word(\"export\");\n  this.space();\n\n  if (node.default) {\n    this.word(\"default\");\n    this.space();\n  }\n\n  FlowExportDeclaration.apply(this, arguments);\n}\n\nfunction DeclareExportAllDeclaration() {\n  this.word(\"declare\");\n  this.space();\n\n  _modules.ExportAllDeclaration.apply(this, arguments);\n}\n\nfunction EnumDeclaration(node) {\n  const {\n    id,\n    body\n  } = node;\n  this.word(\"enum\");\n  this.space();\n  this.print(id, node);\n  this.print(body, node);\n}\n\nfunction enumExplicitType(context, name, hasExplicitType) {\n  if (hasExplicitType) {\n    context.space();\n    context.word(\"of\");\n    context.space();\n    context.word(name);\n  }\n\n  context.space();\n}\n\nfunction enumBody(context, node) {\n  const {\n    members\n  } = node;\n  context.token(\"{\");\n  context.indent();\n  context.newline();\n\n  for (const member of members) {\n    context.print(member, node);\n    context.newline();\n  }\n\n  if (node.hasUnknownMembers) {\n    context.token(\"...\");\n    context.newline();\n  }\n\n  context.dedent();\n  context.token(\"}\");\n}\n\nfunction EnumBooleanBody(node) {\n  const {\n    explicitType\n  } = node;\n  enumExplicitType(this, \"boolean\", explicitType);\n  enumBody(this, node);\n}\n\nfunction EnumNumberBody(node) {\n  const {\n    explicitType\n  } = node;\n  enumExplicitType(this, \"number\", explicitType);\n  enumBody(this, node);\n}\n\nfunction EnumStringBody(node) {\n  const {\n    explicitType\n  } = node;\n  enumExplicitType(this, \"string\", explicitType);\n  enumBody(this, node);\n}\n\nfunction EnumSymbolBody(node) {\n  enumExplicitType(this, \"symbol\", true);\n  enumBody(this, node);\n}\n\nfunction EnumDefaultedMember(node) {\n  const {\n    id\n  } = node;\n  this.print(id, node);\n  this.token(\",\");\n}\n\nfunction enumInitializedMember(context, node) {\n  const {\n    id,\n    init\n  } = node;\n  context.print(id, node);\n  context.space();\n  context.token(\"=\");\n  context.space();\n  context.print(init, node);\n  context.token(\",\");\n}\n\nfunction EnumBooleanMember(node) {\n  enumInitializedMember(this, node);\n}\n\nfunction EnumNumberMember(node) {\n  enumInitializedMember(this, node);\n}\n\nfunction EnumStringMember(node) {\n  enumInitializedMember(this, node);\n}\n\nfunction FlowExportDeclaration(node) {\n  if (node.declaration) {\n    const declar = node.declaration;\n    this.print(declar, node);\n    if (!isStatement(declar)) this.semicolon();\n  } else {\n    this.token(\"{\");\n\n    if (node.specifiers.length) {\n      this.space();\n      this.printList(node.specifiers, node);\n      this.space();\n    }\n\n    this.token(\"}\");\n\n    if (node.source) {\n      this.space();\n      this.word(\"from\");\n      this.space();\n      this.print(node.source, node);\n    }\n\n    this.semicolon();\n  }\n}\n\nfunction ExistsTypeAnnotation() {\n  this.token(\"*\");\n}\n\nfunction FunctionTypeAnnotation(node, parent) {\n  this.print(node.typeParameters, node);\n  this.token(\"(\");\n\n  if (node.this) {\n    this.word(\"this\");\n    this.token(\":\");\n    this.space();\n    this.print(node.this.typeAnnotation, node);\n\n    if (node.params.length || node.rest) {\n      this.token(\",\");\n      this.space();\n    }\n  }\n\n  this.printList(node.params, node);\n\n  if (node.rest) {\n    if (node.params.length) {\n      this.token(\",\");\n      this.space();\n    }\n\n    this.token(\"...\");\n    this.print(node.rest, node);\n  }\n\n  this.token(\")\");\n\n  if (parent.type === \"ObjectTypeCallProperty\" || parent.type === \"DeclareFunction\" || parent.type === \"ObjectTypeProperty\" && parent.method) {\n    this.token(\":\");\n  } else {\n    this.space();\n    this.token(\"=>\");\n  }\n\n  this.space();\n  this.print(node.returnType, node);\n}\n\nfunction FunctionTypeParam(node) {\n  this.print(node.name, node);\n  if (node.optional) this.token(\"?\");\n\n  if (node.name) {\n    this.token(\":\");\n    this.space();\n  }\n\n  this.print(node.typeAnnotation, node);\n}\n\nfunction InterfaceExtends(node) {\n  this.print(node.id, node);\n  this.print(node.typeParameters, node);\n}\n\nfunction _interfaceish(node) {\n  var _node$extends;\n\n  this.print(node.id, node);\n  this.print(node.typeParameters, node);\n\n  if ((_node$extends = node.extends) != null && _node$extends.length) {\n    this.space();\n    this.word(\"extends\");\n    this.space();\n    this.printList(node.extends, node);\n  }\n\n  if (node.mixins && node.mixins.length) {\n    this.space();\n    this.word(\"mixins\");\n    this.space();\n    this.printList(node.mixins, node);\n  }\n\n  if (node.implements && node.implements.length) {\n    this.space();\n    this.word(\"implements\");\n    this.space();\n    this.printList(node.implements, node);\n  }\n\n  this.space();\n  this.print(node.body, node);\n}\n\nfunction _variance(node) {\n  if (node.variance) {\n    if (node.variance.kind === \"plus\") {\n      this.token(\"+\");\n    } else if (node.variance.kind === \"minus\") {\n      this.token(\"-\");\n    }\n  }\n}\n\nfunction InterfaceDeclaration(node) {\n  this.word(\"interface\");\n  this.space();\n\n  this._interfaceish(node);\n}\n\nfunction andSeparator() {\n  this.space();\n  this.token(\"&\");\n  this.space();\n}\n\nfunction InterfaceTypeAnnotation(node) {\n  this.word(\"interface\");\n\n  if (node.extends && node.extends.length) {\n    this.space();\n    this.word(\"extends\");\n    this.space();\n    this.printList(node.extends, node);\n  }\n\n  this.space();\n  this.print(node.body, node);\n}\n\nfunction IntersectionTypeAnnotation(node) {\n  this.printJoin(node.types, node, {\n    separator: andSeparator\n  });\n}\n\nfunction MixedTypeAnnotation() {\n  this.word(\"mixed\");\n}\n\nfunction EmptyTypeAnnotation() {\n  this.word(\"empty\");\n}\n\nfunction NullableTypeAnnotation(node) {\n  this.token(\"?\");\n  this.print(node.typeAnnotation, node);\n}\n\nfunction NumberTypeAnnotation() {\n  this.word(\"number\");\n}\n\nfunction StringTypeAnnotation() {\n  this.word(\"string\");\n}\n\nfunction ThisTypeAnnotation() {\n  this.word(\"this\");\n}\n\nfunction TupleTypeAnnotation(node) {\n  this.token(\"[\");\n  this.printList(node.types, node);\n  this.token(\"]\");\n}\n\nfunction TypeofTypeAnnotation(node) {\n  this.word(\"typeof\");\n  this.space();\n  this.print(node.argument, node);\n}\n\nfunction TypeAlias(node) {\n  this.word(\"type\");\n  this.space();\n  this.print(node.id, node);\n  this.print(node.typeParameters, node);\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(node.right, node);\n  this.semicolon();\n}\n\nfunction TypeAnnotation(node) {\n  this.token(\":\");\n  this.space();\n  if (node.optional) this.token(\"?\");\n  this.print(node.typeAnnotation, node);\n}\n\nfunction TypeParameterInstantiation(node) {\n  this.token(\"<\");\n  this.printList(node.params, node, {});\n  this.token(\">\");\n}\n\nfunction TypeParameter(node) {\n  this._variance(node);\n\n  this.word(node.name);\n\n  if (node.bound) {\n    this.print(node.bound, node);\n  }\n\n  if (node.default) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.default, node);\n  }\n}\n\nfunction OpaqueType(node) {\n  this.word(\"opaque\");\n  this.space();\n  this.word(\"type\");\n  this.space();\n  this.print(node.id, node);\n  this.print(node.typeParameters, node);\n\n  if (node.supertype) {\n    this.token(\":\");\n    this.space();\n    this.print(node.supertype, node);\n  }\n\n  if (node.impltype) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.impltype, node);\n  }\n\n  this.semicolon();\n}\n\nfunction ObjectTypeAnnotation(node) {\n  if (node.exact) {\n    this.token(\"{|\");\n  } else {\n    this.token(\"{\");\n  }\n\n  const props = [...node.properties, ...(node.callProperties || []), ...(node.indexers || []), ...(node.internalSlots || [])];\n\n  if (props.length) {\n    this.space();\n    this.printJoin(props, node, {\n      addNewlines(leading) {\n        if (leading && !props[0]) return 1;\n      },\n\n      indent: true,\n      statement: true,\n      iterator: () => {\n        if (props.length !== 1 || node.inexact) {\n          this.token(\",\");\n          this.space();\n        }\n      }\n    });\n    this.space();\n  }\n\n  if (node.inexact) {\n    this.indent();\n    this.token(\"...\");\n\n    if (props.length) {\n      this.newline();\n    }\n\n    this.dedent();\n  }\n\n  if (node.exact) {\n    this.token(\"|}\");\n  } else {\n    this.token(\"}\");\n  }\n}\n\nfunction ObjectTypeInternalSlot(node) {\n  if (node.static) {\n    this.word(\"static\");\n    this.space();\n  }\n\n  this.token(\"[\");\n  this.token(\"[\");\n  this.print(node.id, node);\n  this.token(\"]\");\n  this.token(\"]\");\n  if (node.optional) this.token(\"?\");\n\n  if (!node.method) {\n    this.token(\":\");\n    this.space();\n  }\n\n  this.print(node.value, node);\n}\n\nfunction ObjectTypeCallProperty(node) {\n  if (node.static) {\n    this.word(\"static\");\n    this.space();\n  }\n\n  this.print(node.value, node);\n}\n\nfunction ObjectTypeIndexer(node) {\n  if (node.static) {\n    this.word(\"static\");\n    this.space();\n  }\n\n  this._variance(node);\n\n  this.token(\"[\");\n\n  if (node.id) {\n    this.print(node.id, node);\n    this.token(\":\");\n    this.space();\n  }\n\n  this.print(node.key, node);\n  this.token(\"]\");\n  this.token(\":\");\n  this.space();\n  this.print(node.value, node);\n}\n\nfunction ObjectTypeProperty(node) {\n  if (node.proto) {\n    this.word(\"proto\");\n    this.space();\n  }\n\n  if (node.static) {\n    this.word(\"static\");\n    this.space();\n  }\n\n  if (node.kind === \"get\" || node.kind === \"set\") {\n    this.word(node.kind);\n    this.space();\n  }\n\n  this._variance(node);\n\n  this.print(node.key, node);\n  if (node.optional) this.token(\"?\");\n\n  if (!node.method) {\n    this.token(\":\");\n    this.space();\n  }\n\n  this.print(node.value, node);\n}\n\nfunction ObjectTypeSpreadProperty(node) {\n  this.token(\"...\");\n  this.print(node.argument, node);\n}\n\nfunction QualifiedTypeIdentifier(node) {\n  this.print(node.qualification, node);\n  this.token(\".\");\n  this.print(node.id, node);\n}\n\nfunction SymbolTypeAnnotation() {\n  this.word(\"symbol\");\n}\n\nfunction orSeparator() {\n  this.space();\n  this.token(\"|\");\n  this.space();\n}\n\nfunction UnionTypeAnnotation(node) {\n  this.printJoin(node.types, node, {\n    separator: orSeparator\n  });\n}\n\nfunction TypeCastExpression(node) {\n  this.token(\"(\");\n  this.print(node.expression, node);\n  this.print(node.typeAnnotation, node);\n  this.token(\")\");\n}\n\nfunction Variance(node) {\n  if (node.kind === \"plus\") {\n    this.token(\"+\");\n  } else {\n    this.token(\"-\");\n  }\n}\n\nfunction VoidTypeAnnotation() {\n  this.word(\"void\");\n}\n\nfunction IndexedAccessType(node) {\n  this.print(node.objectType, node);\n  this.token(\"[\");\n  this.print(node.indexType, node);\n  this.token(\"]\");\n}\n\nfunction OptionalIndexedAccessType(node) {\n  this.print(node.objectType, node);\n\n  if (node.optional) {\n    this.token(\"?.\");\n  }\n\n  this.token(\"[\");\n  this.print(node.indexType, node);\n  this.token(\"]\");\n}"],"file":"flow.js"}