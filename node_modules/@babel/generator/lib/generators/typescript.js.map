{"version":3,"sources":["../../../../../../node_modules/@babel/generator/lib/generators/typescript.js"],"names":["Object","value","exports","node","initializer","kind","static","isStatic","parameters","members","separator","typeParameter","tokenIfPlusMinus","tok","self","extends","body","extendz","typeAnnotation","expression","const","id","typeParameters","moduleReference","isField"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TSTypeAnnotation = TSTypeAnnotation;\nexports.TSTypeParameterDeclaration = exports.TSTypeParameterInstantiation = TSTypeParameterInstantiation;\nexports.TSTypeParameter = TSTypeParameter;\nexports.TSParameterProperty = TSParameterProperty;\nexports.TSDeclareFunction = TSDeclareFunction;\nexports.TSDeclareMethod = TSDeclareMethod;\nexports.TSQualifiedName = TSQualifiedName;\nexports.TSCallSignatureDeclaration = TSCallSignatureDeclaration;\nexports.TSConstructSignatureDeclaration = TSConstructSignatureDeclaration;\nexports.TSPropertySignature = TSPropertySignature;\nexports.tsPrintPropertyOrMethodName = tsPrintPropertyOrMethodName;\nexports.TSMethodSignature = TSMethodSignature;\nexports.TSIndexSignature = TSIndexSignature;\nexports.TSAnyKeyword = TSAnyKeyword;\nexports.TSBigIntKeyword = TSBigIntKeyword;\nexports.TSUnknownKeyword = TSUnknownKeyword;\nexports.TSNumberKeyword = TSNumberKeyword;\nexports.TSObjectKeyword = TSObjectKeyword;\nexports.TSBooleanKeyword = TSBooleanKeyword;\nexports.TSStringKeyword = TSStringKeyword;\nexports.TSSymbolKeyword = TSSymbolKeyword;\nexports.TSVoidKeyword = TSVoidKeyword;\nexports.TSUndefinedKeyword = TSUndefinedKeyword;\nexports.TSNullKeyword = TSNullKeyword;\nexports.TSNeverKeyword = TSNeverKeyword;\nexports.TSIntrinsicKeyword = TSIntrinsicKeyword;\nexports.TSThisType = TSThisType;\nexports.TSFunctionType = TSFunctionType;\nexports.TSConstructorType = TSConstructorType;\nexports.tsPrintFunctionOrConstructorType = tsPrintFunctionOrConstructorType;\nexports.TSTypeReference = TSTypeReference;\nexports.TSTypePredicate = TSTypePredicate;\nexports.TSTypeQuery = TSTypeQuery;\nexports.TSTypeLiteral = TSTypeLiteral;\nexports.tsPrintTypeLiteralOrInterfaceBody = tsPrintTypeLiteralOrInterfaceBody;\nexports.tsPrintBraced = tsPrintBraced;\nexports.TSArrayType = TSArrayType;\nexports.TSTupleType = TSTupleType;\nexports.TSOptionalType = TSOptionalType;\nexports.TSRestType = TSRestType;\nexports.TSNamedTupleMember = TSNamedTupleMember;\nexports.TSUnionType = TSUnionType;\nexports.TSIntersectionType = TSIntersectionType;\nexports.tsPrintUnionOrIntersectionType = tsPrintUnionOrIntersectionType;\nexports.TSConditionalType = TSConditionalType;\nexports.TSInferType = TSInferType;\nexports.TSParenthesizedType = TSParenthesizedType;\nexports.TSTypeOperator = TSTypeOperator;\nexports.TSIndexedAccessType = TSIndexedAccessType;\nexports.TSMappedType = TSMappedType;\nexports.TSLiteralType = TSLiteralType;\nexports.TSExpressionWithTypeArguments = TSExpressionWithTypeArguments;\nexports.TSInterfaceDeclaration = TSInterfaceDeclaration;\nexports.TSInterfaceBody = TSInterfaceBody;\nexports.TSTypeAliasDeclaration = TSTypeAliasDeclaration;\nexports.TSAsExpression = TSAsExpression;\nexports.TSTypeAssertion = TSTypeAssertion;\nexports.TSEnumDeclaration = TSEnumDeclaration;\nexports.TSEnumMember = TSEnumMember;\nexports.TSModuleDeclaration = TSModuleDeclaration;\nexports.TSModuleBlock = TSModuleBlock;\nexports.TSImportType = TSImportType;\nexports.TSImportEqualsDeclaration = TSImportEqualsDeclaration;\nexports.TSExternalModuleReference = TSExternalModuleReference;\nexports.TSNonNullExpression = TSNonNullExpression;\nexports.TSExportAssignment = TSExportAssignment;\nexports.TSNamespaceExportDeclaration = TSNamespaceExportDeclaration;\nexports.tsPrintSignatureDeclarationBase = tsPrintSignatureDeclarationBase;\nexports.tsPrintClassMemberModifiers = tsPrintClassMemberModifiers;\n\nfunction TSTypeAnnotation(node) {\n  this.token(\":\");\n  this.space();\n  if (node.optional) this.token(\"?\");\n  this.print(node.typeAnnotation, node);\n}\n\nfunction TSTypeParameterInstantiation(node) {\n  this.token(\"<\");\n  this.printList(node.params, node, {});\n  this.token(\">\");\n}\n\nfunction TSTypeParameter(node) {\n  this.word(node.name);\n\n  if (node.constraint) {\n    this.space();\n    this.word(\"extends\");\n    this.space();\n    this.print(node.constraint, node);\n  }\n\n  if (node.default) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(node.default, node);\n  }\n}\n\nfunction TSParameterProperty(node) {\n  if (node.accessibility) {\n    this.word(node.accessibility);\n    this.space();\n  }\n\n  if (node.readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n\n  this._param(node.parameter);\n}\n\nfunction TSDeclareFunction(node) {\n  if (node.declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this._functionHead(node);\n\n  this.token(\";\");\n}\n\nfunction TSDeclareMethod(node) {\n  this._classMethodHead(node);\n\n  this.token(\";\");\n}\n\nfunction TSQualifiedName(node) {\n  this.print(node.left, node);\n  this.token(\".\");\n  this.print(node.right, node);\n}\n\nfunction TSCallSignatureDeclaration(node) {\n  this.tsPrintSignatureDeclarationBase(node);\n  this.token(\";\");\n}\n\nfunction TSConstructSignatureDeclaration(node) {\n  this.word(\"new\");\n  this.space();\n  this.tsPrintSignatureDeclarationBase(node);\n  this.token(\";\");\n}\n\nfunction TSPropertySignature(node) {\n  const {\n    readonly,\n    initializer\n  } = node;\n\n  if (readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n\n  this.tsPrintPropertyOrMethodName(node);\n  this.print(node.typeAnnotation, node);\n\n  if (initializer) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(initializer, node);\n  }\n\n  this.token(\";\");\n}\n\nfunction tsPrintPropertyOrMethodName(node) {\n  if (node.computed) {\n    this.token(\"[\");\n  }\n\n  this.print(node.key, node);\n\n  if (node.computed) {\n    this.token(\"]\");\n  }\n\n  if (node.optional) {\n    this.token(\"?\");\n  }\n}\n\nfunction TSMethodSignature(node) {\n  const {\n    kind\n  } = node;\n\n  if (kind === \"set\" || kind === \"get\") {\n    this.word(kind);\n    this.space();\n  }\n\n  this.tsPrintPropertyOrMethodName(node);\n  this.tsPrintSignatureDeclarationBase(node);\n  this.token(\";\");\n}\n\nfunction TSIndexSignature(node) {\n  const {\n    readonly,\n    static: isStatic\n  } = node;\n\n  if (isStatic) {\n    this.word(\"static\");\n    this.space();\n  }\n\n  if (readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n\n  this.token(\"[\");\n\n  this._parameters(node.parameters, node);\n\n  this.token(\"]\");\n  this.print(node.typeAnnotation, node);\n  this.token(\";\");\n}\n\nfunction TSAnyKeyword() {\n  this.word(\"any\");\n}\n\nfunction TSBigIntKeyword() {\n  this.word(\"bigint\");\n}\n\nfunction TSUnknownKeyword() {\n  this.word(\"unknown\");\n}\n\nfunction TSNumberKeyword() {\n  this.word(\"number\");\n}\n\nfunction TSObjectKeyword() {\n  this.word(\"object\");\n}\n\nfunction TSBooleanKeyword() {\n  this.word(\"boolean\");\n}\n\nfunction TSStringKeyword() {\n  this.word(\"string\");\n}\n\nfunction TSSymbolKeyword() {\n  this.word(\"symbol\");\n}\n\nfunction TSVoidKeyword() {\n  this.word(\"void\");\n}\n\nfunction TSUndefinedKeyword() {\n  this.word(\"undefined\");\n}\n\nfunction TSNullKeyword() {\n  this.word(\"null\");\n}\n\nfunction TSNeverKeyword() {\n  this.word(\"never\");\n}\n\nfunction TSIntrinsicKeyword() {\n  this.word(\"intrinsic\");\n}\n\nfunction TSThisType() {\n  this.word(\"this\");\n}\n\nfunction TSFunctionType(node) {\n  this.tsPrintFunctionOrConstructorType(node);\n}\n\nfunction TSConstructorType(node) {\n  if (node.abstract) {\n    this.word(\"abstract\");\n    this.space();\n  }\n\n  this.word(\"new\");\n  this.space();\n  this.tsPrintFunctionOrConstructorType(node);\n}\n\nfunction tsPrintFunctionOrConstructorType(node) {\n  const {\n    typeParameters,\n    parameters\n  } = node;\n  this.print(typeParameters, node);\n  this.token(\"(\");\n\n  this._parameters(parameters, node);\n\n  this.token(\")\");\n  this.space();\n  this.token(\"=>\");\n  this.space();\n  this.print(node.typeAnnotation.typeAnnotation, node);\n}\n\nfunction TSTypeReference(node) {\n  this.print(node.typeName, node);\n  this.print(node.typeParameters, node);\n}\n\nfunction TSTypePredicate(node) {\n  if (node.asserts) {\n    this.word(\"asserts\");\n    this.space();\n  }\n\n  this.print(node.parameterName);\n\n  if (node.typeAnnotation) {\n    this.space();\n    this.word(\"is\");\n    this.space();\n    this.print(node.typeAnnotation.typeAnnotation);\n  }\n}\n\nfunction TSTypeQuery(node) {\n  this.word(\"typeof\");\n  this.space();\n  this.print(node.exprName);\n}\n\nfunction TSTypeLiteral(node) {\n  this.tsPrintTypeLiteralOrInterfaceBody(node.members, node);\n}\n\nfunction tsPrintTypeLiteralOrInterfaceBody(members, node) {\n  this.tsPrintBraced(members, node);\n}\n\nfunction tsPrintBraced(members, node) {\n  this.token(\"{\");\n\n  if (members.length) {\n    this.indent();\n    this.newline();\n\n    for (const member of members) {\n      this.print(member, node);\n      this.newline();\n    }\n\n    this.dedent();\n    this.rightBrace();\n  } else {\n    this.token(\"}\");\n  }\n}\n\nfunction TSArrayType(node) {\n  this.print(node.elementType, node);\n  this.token(\"[]\");\n}\n\nfunction TSTupleType(node) {\n  this.token(\"[\");\n  this.printList(node.elementTypes, node);\n  this.token(\"]\");\n}\n\nfunction TSOptionalType(node) {\n  this.print(node.typeAnnotation, node);\n  this.token(\"?\");\n}\n\nfunction TSRestType(node) {\n  this.token(\"...\");\n  this.print(node.typeAnnotation, node);\n}\n\nfunction TSNamedTupleMember(node) {\n  this.print(node.label, node);\n  if (node.optional) this.token(\"?\");\n  this.token(\":\");\n  this.space();\n  this.print(node.elementType, node);\n}\n\nfunction TSUnionType(node) {\n  this.tsPrintUnionOrIntersectionType(node, \"|\");\n}\n\nfunction TSIntersectionType(node) {\n  this.tsPrintUnionOrIntersectionType(node, \"&\");\n}\n\nfunction tsPrintUnionOrIntersectionType(node, sep) {\n  this.printJoin(node.types, node, {\n    separator() {\n      this.space();\n      this.token(sep);\n      this.space();\n    }\n\n  });\n}\n\nfunction TSConditionalType(node) {\n  this.print(node.checkType);\n  this.space();\n  this.word(\"extends\");\n  this.space();\n  this.print(node.extendsType);\n  this.space();\n  this.token(\"?\");\n  this.space();\n  this.print(node.trueType);\n  this.space();\n  this.token(\":\");\n  this.space();\n  this.print(node.falseType);\n}\n\nfunction TSInferType(node) {\n  this.token(\"infer\");\n  this.space();\n  this.print(node.typeParameter);\n}\n\nfunction TSParenthesizedType(node) {\n  this.token(\"(\");\n  this.print(node.typeAnnotation, node);\n  this.token(\")\");\n}\n\nfunction TSTypeOperator(node) {\n  this.word(node.operator);\n  this.space();\n  this.print(node.typeAnnotation, node);\n}\n\nfunction TSIndexedAccessType(node) {\n  this.print(node.objectType, node);\n  this.token(\"[\");\n  this.print(node.indexType, node);\n  this.token(\"]\");\n}\n\nfunction TSMappedType(node) {\n  const {\n    nameType,\n    optional,\n    readonly,\n    typeParameter\n  } = node;\n  this.token(\"{\");\n  this.space();\n\n  if (readonly) {\n    tokenIfPlusMinus(this, readonly);\n    this.word(\"readonly\");\n    this.space();\n  }\n\n  this.token(\"[\");\n  this.word(typeParameter.name);\n  this.space();\n  this.word(\"in\");\n  this.space();\n  this.print(typeParameter.constraint, typeParameter);\n\n  if (nameType) {\n    this.space();\n    this.word(\"as\");\n    this.space();\n    this.print(nameType, node);\n  }\n\n  this.token(\"]\");\n\n  if (optional) {\n    tokenIfPlusMinus(this, optional);\n    this.token(\"?\");\n  }\n\n  this.token(\":\");\n  this.space();\n  this.print(node.typeAnnotation, node);\n  this.space();\n  this.token(\"}\");\n}\n\nfunction tokenIfPlusMinus(self, tok) {\n  if (tok !== true) {\n    self.token(tok);\n  }\n}\n\nfunction TSLiteralType(node) {\n  this.print(node.literal, node);\n}\n\nfunction TSExpressionWithTypeArguments(node) {\n  this.print(node.expression, node);\n  this.print(node.typeParameters, node);\n}\n\nfunction TSInterfaceDeclaration(node) {\n  const {\n    declare,\n    id,\n    typeParameters,\n    extends: extendz,\n    body\n  } = node;\n\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this.word(\"interface\");\n  this.space();\n  this.print(id, node);\n  this.print(typeParameters, node);\n\n  if (extendz != null && extendz.length) {\n    this.space();\n    this.word(\"extends\");\n    this.space();\n    this.printList(extendz, node);\n  }\n\n  this.space();\n  this.print(body, node);\n}\n\nfunction TSInterfaceBody(node) {\n  this.tsPrintTypeLiteralOrInterfaceBody(node.body, node);\n}\n\nfunction TSTypeAliasDeclaration(node) {\n  const {\n    declare,\n    id,\n    typeParameters,\n    typeAnnotation\n  } = node;\n\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  this.word(\"type\");\n  this.space();\n  this.print(id, node);\n  this.print(typeParameters, node);\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(typeAnnotation, node);\n  this.token(\";\");\n}\n\nfunction TSAsExpression(node) {\n  const {\n    expression,\n    typeAnnotation\n  } = node;\n  this.print(expression, node);\n  this.space();\n  this.word(\"as\");\n  this.space();\n  this.print(typeAnnotation, node);\n}\n\nfunction TSTypeAssertion(node) {\n  const {\n    typeAnnotation,\n    expression\n  } = node;\n  this.token(\"<\");\n  this.print(typeAnnotation, node);\n  this.token(\">\");\n  this.space();\n  this.print(expression, node);\n}\n\nfunction TSEnumDeclaration(node) {\n  const {\n    declare,\n    const: isConst,\n    id,\n    members\n  } = node;\n\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  if (isConst) {\n    this.word(\"const\");\n    this.space();\n  }\n\n  this.word(\"enum\");\n  this.space();\n  this.print(id, node);\n  this.space();\n  this.tsPrintBraced(members, node);\n}\n\nfunction TSEnumMember(node) {\n  const {\n    id,\n    initializer\n  } = node;\n  this.print(id, node);\n\n  if (initializer) {\n    this.space();\n    this.token(\"=\");\n    this.space();\n    this.print(initializer, node);\n  }\n\n  this.token(\",\");\n}\n\nfunction TSModuleDeclaration(node) {\n  const {\n    declare,\n    id\n  } = node;\n\n  if (declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  if (!node.global) {\n    this.word(id.type === \"Identifier\" ? \"namespace\" : \"module\");\n    this.space();\n  }\n\n  this.print(id, node);\n\n  if (!node.body) {\n    this.token(\";\");\n    return;\n  }\n\n  let body = node.body;\n\n  while (body.type === \"TSModuleDeclaration\") {\n    this.token(\".\");\n    this.print(body.id, body);\n    body = body.body;\n  }\n\n  this.space();\n  this.print(body, node);\n}\n\nfunction TSModuleBlock(node) {\n  this.tsPrintBraced(node.body, node);\n}\n\nfunction TSImportType(node) {\n  const {\n    argument,\n    qualifier,\n    typeParameters\n  } = node;\n  this.word(\"import\");\n  this.token(\"(\");\n  this.print(argument, node);\n  this.token(\")\");\n\n  if (qualifier) {\n    this.token(\".\");\n    this.print(qualifier, node);\n  }\n\n  if (typeParameters) {\n    this.print(typeParameters, node);\n  }\n}\n\nfunction TSImportEqualsDeclaration(node) {\n  const {\n    isExport,\n    id,\n    moduleReference\n  } = node;\n\n  if (isExport) {\n    this.word(\"export\");\n    this.space();\n  }\n\n  this.word(\"import\");\n  this.space();\n  this.print(id, node);\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(moduleReference, node);\n  this.token(\";\");\n}\n\nfunction TSExternalModuleReference(node) {\n  this.token(\"require(\");\n  this.print(node.expression, node);\n  this.token(\")\");\n}\n\nfunction TSNonNullExpression(node) {\n  this.print(node.expression, node);\n  this.token(\"!\");\n}\n\nfunction TSExportAssignment(node) {\n  this.word(\"export\");\n  this.space();\n  this.token(\"=\");\n  this.space();\n  this.print(node.expression, node);\n  this.token(\";\");\n}\n\nfunction TSNamespaceExportDeclaration(node) {\n  this.word(\"export\");\n  this.space();\n  this.word(\"as\");\n  this.space();\n  this.word(\"namespace\");\n  this.space();\n  this.print(node.id, node);\n}\n\nfunction tsPrintSignatureDeclarationBase(node) {\n  const {\n    typeParameters,\n    parameters\n  } = node;\n  this.print(typeParameters, node);\n  this.token(\"(\");\n\n  this._parameters(parameters, node);\n\n  this.token(\")\");\n  this.print(node.typeAnnotation, node);\n}\n\nfunction tsPrintClassMemberModifiers(node, isField) {\n  if (isField && node.declare) {\n    this.word(\"declare\");\n    this.space();\n  }\n\n  if (node.accessibility) {\n    this.word(node.accessibility);\n    this.space();\n  }\n\n  if (node.static) {\n    this.word(\"static\");\n    this.space();\n  }\n\n  if (node.override) {\n    this.word(\"override\");\n    this.space();\n  }\n\n  if (node.abstract) {\n    this.word(\"abstract\");\n    this.space();\n  }\n\n  if (isField && node.readonly) {\n    this.word(\"readonly\");\n    this.space();\n  }\n}"],"file":"typescript.js"}