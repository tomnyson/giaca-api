{"version":3,"sources":["../../../../../../node_modules/@babel/generator/lib/node/index.js"],"names":["Object","value","exports","whitespace","require","parens","_t","isNewExpression","newObj","fn","result","func","aliases","FLIPPED_ALIAS_KEYS","add","obj","expandedParens","expandAliases","expandedWhitespaceNodes","expandedWhitespaceList","node","isCallExpression","isMemberExpression","isOrHasCallExpression","isExpressionStatement","linesInfo","find","items","i","needsWhitespace","parent"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.needsWhitespace = needsWhitespace;\nexports.needsWhitespaceBefore = needsWhitespaceBefore;\nexports.needsWhitespaceAfter = needsWhitespaceAfter;\nexports.needsParens = needsParens;\n\nvar whitespace = require(\"./whitespace\");\n\nvar parens = require(\"./parentheses\");\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  FLIPPED_ALIAS_KEYS,\n  isCallExpression,\n  isExpressionStatement,\n  isMemberExpression,\n  isNewExpression\n} = _t;\n\nfunction expandAliases(obj) {\n  const newObj = {};\n\n  function add(type, func) {\n    const fn = newObj[type];\n    newObj[type] = fn ? function (node, parent, stack) {\n      const result = fn(node, parent, stack);\n      return result == null ? func(node, parent, stack) : result;\n    } : func;\n  }\n\n  for (const type of Object.keys(obj)) {\n    const aliases = FLIPPED_ALIAS_KEYS[type];\n\n    if (aliases) {\n      for (const alias of aliases) {\n        add(alias, obj[type]);\n      }\n    } else {\n      add(type, obj[type]);\n    }\n  }\n\n  return newObj;\n}\n\nconst expandedParens = expandAliases(parens);\nconst expandedWhitespaceNodes = expandAliases(whitespace.nodes);\nconst expandedWhitespaceList = expandAliases(whitespace.list);\n\nfunction find(obj, node, parent, printStack) {\n  const fn = obj[node.type];\n  return fn ? fn(node, parent, printStack) : null;\n}\n\nfunction isOrHasCallExpression(node) {\n  if (isCallExpression(node)) {\n    return true;\n  }\n\n  return isMemberExpression(node) && isOrHasCallExpression(node.object);\n}\n\nfunction needsWhitespace(node, parent, type) {\n  if (!node) return 0;\n\n  if (isExpressionStatement(node)) {\n    node = node.expression;\n  }\n\n  let linesInfo = find(expandedWhitespaceNodes, node, parent);\n\n  if (!linesInfo) {\n    const items = find(expandedWhitespaceList, node, parent);\n\n    if (items) {\n      for (let i = 0; i < items.length; i++) {\n        linesInfo = needsWhitespace(items[i], node, type);\n        if (linesInfo) break;\n      }\n    }\n  }\n\n  if (typeof linesInfo === \"object\" && linesInfo !== null) {\n    return linesInfo[type] || 0;\n  }\n\n  return 0;\n}\n\nfunction needsWhitespaceBefore(node, parent) {\n  return needsWhitespace(node, parent, \"before\");\n}\n\nfunction needsWhitespaceAfter(node, parent) {\n  return needsWhitespace(node, parent, \"after\");\n}\n\nfunction needsParens(node, parent, printStack) {\n  if (!parent) return false;\n\n  if (isNewExpression(parent) && parent.callee === node) {\n    if (isOrHasCallExpression(node)) return true;\n  }\n\n  return find(expandedParens, node, parent, printStack);\n}"],"file":"index.js"}