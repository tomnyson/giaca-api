{"version":3,"sources":["../../../../../../node_modules/@babel/generator/lib/node/parentheses.js"],"names":["Object","value","exports","_t","require","isYieldExpression","PRECEDENCE","in","instanceof","isClassExtendsClause","isClassDeclaration","isClassExpression","parent","hasPostfixPart","isMemberExpression","isOptionalMemberExpression","isCallExpression","isOptionalCallExpression","isNewExpression","isTaggedTemplateExpression","isTSNonNullExpression","isArrayTypeAnnotation","isUnionTypeAnnotation","isIntersectionTypeAnnotation","isTypeAnnotation","isArrowFunctionExpression","printStack","isFirstInContext","expressionStatement","arrowBody","node","isBinaryExpression","operator","isUnaryLike","isAwaitExpression","isBinary","parentOp","parentPos","nodeOp","nodePos","isLogicalExpression","isNullableTypeAnnotation","isIndexedAccessType","objectType","isTSArrayType","isTSOptionalType","isTSIntersectionType","isTSUnionType","isTSRestType","isVariableDeclarator","isFor","isForStatement","isThrowStatement","isReturnStatement","isIfStatement","isWhileStatement","isForInStatement","isSwitchStatement","isExpressionStatement","isConditionalExpression","exportDefault","left","isExportDeclaration","ConditionalExpression","test","isTSTypeAssertion","isTSAsExpression","UnaryLike","callee","object","isObjectPattern","isFollowedByBracket","computed","optional","forHead","forInHead","forOfHead","isForOfStatement","i","expression","isExportDefaultDeclaration","declaration","body","init","isSequenceExpression","isConditional","isAssignmentExpression"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NullableTypeAnnotation = NullableTypeAnnotation;\nexports.FunctionTypeAnnotation = FunctionTypeAnnotation;\nexports.UpdateExpression = UpdateExpression;\nexports.ObjectExpression = ObjectExpression;\nexports.DoExpression = DoExpression;\nexports.Binary = Binary;\nexports.IntersectionTypeAnnotation = exports.UnionTypeAnnotation = UnionTypeAnnotation;\nexports.OptionalIndexedAccessType = OptionalIndexedAccessType;\nexports.TSAsExpression = TSAsExpression;\nexports.TSTypeAssertion = TSTypeAssertion;\nexports.TSIntersectionType = exports.TSUnionType = TSUnionType;\nexports.TSInferType = TSInferType;\nexports.BinaryExpression = BinaryExpression;\nexports.SequenceExpression = SequenceExpression;\nexports.AwaitExpression = exports.YieldExpression = YieldExpression;\nexports.ClassExpression = ClassExpression;\nexports.UnaryLike = UnaryLike;\nexports.FunctionExpression = FunctionExpression;\nexports.ArrowFunctionExpression = ArrowFunctionExpression;\nexports.ConditionalExpression = ConditionalExpression;\nexports.OptionalCallExpression = exports.OptionalMemberExpression = OptionalMemberExpression;\nexports.AssignmentExpression = AssignmentExpression;\nexports.LogicalExpression = LogicalExpression;\nexports.Identifier = Identifier;\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  isArrayTypeAnnotation,\n  isArrowFunctionExpression,\n  isAssignmentExpression,\n  isAwaitExpression,\n  isBinary,\n  isBinaryExpression,\n  isCallExpression,\n  isClassDeclaration,\n  isClassExpression,\n  isConditional,\n  isConditionalExpression,\n  isExportDeclaration,\n  isExportDefaultDeclaration,\n  isExpressionStatement,\n  isFor,\n  isForInStatement,\n  isForOfStatement,\n  isForStatement,\n  isIfStatement,\n  isIndexedAccessType,\n  isIntersectionTypeAnnotation,\n  isLogicalExpression,\n  isMemberExpression,\n  isNewExpression,\n  isNullableTypeAnnotation,\n  isObjectPattern,\n  isOptionalCallExpression,\n  isOptionalMemberExpression,\n  isReturnStatement,\n  isSequenceExpression,\n  isSwitchStatement,\n  isTSArrayType,\n  isTSAsExpression,\n  isTSIntersectionType,\n  isTSNonNullExpression,\n  isTSOptionalType,\n  isTSRestType,\n  isTSTypeAssertion,\n  isTSUnionType,\n  isTaggedTemplateExpression,\n  isThrowStatement,\n  isTypeAnnotation,\n  isUnaryLike,\n  isUnionTypeAnnotation,\n  isVariableDeclarator,\n  isWhileStatement,\n  isYieldExpression\n} = _t;\nconst PRECEDENCE = {\n  \"||\": 0,\n  \"??\": 0,\n  \"&&\": 1,\n  \"|\": 2,\n  \"^\": 3,\n  \"&\": 4,\n  \"==\": 5,\n  \"===\": 5,\n  \"!=\": 5,\n  \"!==\": 5,\n  \"<\": 6,\n  \">\": 6,\n  \"<=\": 6,\n  \">=\": 6,\n  in: 6,\n  instanceof: 6,\n  \">>\": 7,\n  \"<<\": 7,\n  \">>>\": 7,\n  \"+\": 8,\n  \"-\": 8,\n  \"*\": 9,\n  \"/\": 9,\n  \"%\": 9,\n  \"**\": 10\n};\n\nconst isClassExtendsClause = (node, parent) => (isClassDeclaration(parent) || isClassExpression(parent)) && parent.superClass === node;\n\nconst hasPostfixPart = (node, parent) => (isMemberExpression(parent) || isOptionalMemberExpression(parent)) && parent.object === node || (isCallExpression(parent) || isOptionalCallExpression(parent) || isNewExpression(parent)) && parent.callee === node || isTaggedTemplateExpression(parent) && parent.tag === node || isTSNonNullExpression(parent);\n\nfunction NullableTypeAnnotation(node, parent) {\n  return isArrayTypeAnnotation(parent);\n}\n\nfunction FunctionTypeAnnotation(node, parent, printStack) {\n  return isUnionTypeAnnotation(parent) || isIntersectionTypeAnnotation(parent) || isArrayTypeAnnotation(parent) || isTypeAnnotation(parent) && isArrowFunctionExpression(printStack[printStack.length - 3]);\n}\n\nfunction UpdateExpression(node, parent) {\n  return hasPostfixPart(node, parent) || isClassExtendsClause(node, parent);\n}\n\nfunction ObjectExpression(node, parent, printStack) {\n  return isFirstInContext(printStack, {\n    expressionStatement: true,\n    arrowBody: true\n  });\n}\n\nfunction DoExpression(node, parent, printStack) {\n  return !node.async && isFirstInContext(printStack, {\n    expressionStatement: true\n  });\n}\n\nfunction Binary(node, parent) {\n  if (node.operator === \"**\" && isBinaryExpression(parent, {\n    operator: \"**\"\n  })) {\n    return parent.left === node;\n  }\n\n  if (isClassExtendsClause(node, parent)) {\n    return true;\n  }\n\n  if (hasPostfixPart(node, parent) || isUnaryLike(parent) || isAwaitExpression(parent)) {\n    return true;\n  }\n\n  if (isBinary(parent)) {\n    const parentOp = parent.operator;\n    const parentPos = PRECEDENCE[parentOp];\n    const nodeOp = node.operator;\n    const nodePos = PRECEDENCE[nodeOp];\n\n    if (parentPos === nodePos && parent.right === node && !isLogicalExpression(parent) || parentPos > nodePos) {\n      return true;\n    }\n  }\n}\n\nfunction UnionTypeAnnotation(node, parent) {\n  return isArrayTypeAnnotation(parent) || isNullableTypeAnnotation(parent) || isIntersectionTypeAnnotation(parent) || isUnionTypeAnnotation(parent);\n}\n\nfunction OptionalIndexedAccessType(node, parent) {\n  return isIndexedAccessType(parent, {\n    objectType: node\n  });\n}\n\nfunction TSAsExpression() {\n  return true;\n}\n\nfunction TSTypeAssertion() {\n  return true;\n}\n\nfunction TSUnionType(node, parent) {\n  return isTSArrayType(parent) || isTSOptionalType(parent) || isTSIntersectionType(parent) || isTSUnionType(parent) || isTSRestType(parent);\n}\n\nfunction TSInferType(node, parent) {\n  return isTSArrayType(parent) || isTSOptionalType(parent);\n}\n\nfunction BinaryExpression(node, parent) {\n  return node.operator === \"in\" && (isVariableDeclarator(parent) || isFor(parent));\n}\n\nfunction SequenceExpression(node, parent) {\n  if (isForStatement(parent) || isThrowStatement(parent) || isReturnStatement(parent) || isIfStatement(parent) && parent.test === node || isWhileStatement(parent) && parent.test === node || isForInStatement(parent) && parent.right === node || isSwitchStatement(parent) && parent.discriminant === node || isExpressionStatement(parent) && parent.expression === node) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction YieldExpression(node, parent) {\n  return isBinary(parent) || isUnaryLike(parent) || hasPostfixPart(node, parent) || isAwaitExpression(parent) && isYieldExpression(node) || isConditionalExpression(parent) && node === parent.test || isClassExtendsClause(node, parent);\n}\n\nfunction ClassExpression(node, parent, printStack) {\n  return isFirstInContext(printStack, {\n    expressionStatement: true,\n    exportDefault: true\n  });\n}\n\nfunction UnaryLike(node, parent) {\n  return hasPostfixPart(node, parent) || isBinaryExpression(parent, {\n    operator: \"**\",\n    left: node\n  }) || isClassExtendsClause(node, parent);\n}\n\nfunction FunctionExpression(node, parent, printStack) {\n  return isFirstInContext(printStack, {\n    expressionStatement: true,\n    exportDefault: true\n  });\n}\n\nfunction ArrowFunctionExpression(node, parent) {\n  return isExportDeclaration(parent) || ConditionalExpression(node, parent);\n}\n\nfunction ConditionalExpression(node, parent) {\n  if (isUnaryLike(parent) || isBinary(parent) || isConditionalExpression(parent, {\n    test: node\n  }) || isAwaitExpression(parent) || isTSTypeAssertion(parent) || isTSAsExpression(parent)) {\n    return true;\n  }\n\n  return UnaryLike(node, parent);\n}\n\nfunction OptionalMemberExpression(node, parent) {\n  return isCallExpression(parent, {\n    callee: node\n  }) || isMemberExpression(parent, {\n    object: node\n  });\n}\n\nfunction AssignmentExpression(node, parent) {\n  if (isObjectPattern(node.left)) {\n    return true;\n  } else {\n    return ConditionalExpression(node, parent);\n  }\n}\n\nfunction LogicalExpression(node, parent) {\n  switch (node.operator) {\n    case \"||\":\n      if (!isLogicalExpression(parent)) return false;\n      return parent.operator === \"??\" || parent.operator === \"&&\";\n\n    case \"&&\":\n      return isLogicalExpression(parent, {\n        operator: \"??\"\n      });\n\n    case \"??\":\n      return isLogicalExpression(parent) && parent.operator !== \"??\";\n  }\n}\n\nfunction Identifier(node, parent, printStack) {\n  if (node.name === \"let\") {\n    const isFollowedByBracket = isMemberExpression(parent, {\n      object: node,\n      computed: true\n    }) || isOptionalMemberExpression(parent, {\n      object: node,\n      computed: true,\n      optional: false\n    });\n    return isFirstInContext(printStack, {\n      expressionStatement: isFollowedByBracket,\n      forHead: isFollowedByBracket,\n      forInHead: isFollowedByBracket,\n      forOfHead: true\n    });\n  }\n\n  return node.name === \"async\" && isForOfStatement(parent) && node === parent.left;\n}\n\nfunction isFirstInContext(printStack, {\n  expressionStatement = false,\n  arrowBody = false,\n  exportDefault = false,\n  forHead = false,\n  forInHead = false,\n  forOfHead = false\n}) {\n  let i = printStack.length - 1;\n  let node = printStack[i];\n  i--;\n  let parent = printStack[i];\n\n  while (i >= 0) {\n    if (expressionStatement && isExpressionStatement(parent, {\n      expression: node\n    }) || exportDefault && isExportDefaultDeclaration(parent, {\n      declaration: node\n    }) || arrowBody && isArrowFunctionExpression(parent, {\n      body: node\n    }) || forHead && isForStatement(parent, {\n      init: node\n    }) || forInHead && isForInStatement(parent, {\n      left: node\n    }) || forOfHead && isForOfStatement(parent, {\n      left: node\n    })) {\n      return true;\n    }\n\n    if (hasPostfixPart(node, parent) && !isNewExpression(parent) || isSequenceExpression(parent) && parent.expressions[0] === node || isConditional(parent, {\n      test: node\n    }) || isBinary(parent, {\n      left: node\n    }) || isAssignmentExpression(parent, {\n      left: node\n    })) {\n      node = parent;\n      i--;\n      parent = printStack[i];\n    } else {\n      return false;\n    }\n  }\n\n  return false;\n}"],"file":"parentheses.js"}