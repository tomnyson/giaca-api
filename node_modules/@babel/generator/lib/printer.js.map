{"version":3,"sources":["../../../../../node_modules/@babel/generator/lib/printer.js"],"names":["Object","value","exports","_buffer","require","n","_t","generatorFunctions","isEmptyStatement","SCIENTIFIC_NOTATION","ZERO_DECIMAL_INTEGER","NON_DECIMAL_LITERAL","PURE_ANNOTATION_RE","needsWhitespaceBefore","constructor","generate","indent","dedent","semicolon","force","rightBrace","space","lastCp","word","str","number","Number","token","lastChar","strFirst","newline","i","charBeforeNewline","j","endsWith","getLastChar","endsWithCharAndNewline","removeTrailingNewline","exactSource","source","withSource","_space","_newline","_append","queue","_maybeIndent","_maybeAddParen","parenPushNewlineState","cha","chaPost","_catchUp","pos","loc","count","_getIndent","startTerminatorless","isLabel","printed","endTerminatorless","state","print","oldConcise","node","printMethod","JSON","oldInAux","shouldPrintParens","needsParens","isProgram","isFile","_maybeAddAuxComment","_printAuxBeforeComment","comment","type","_printAuxAfterComment","getPossibleRaw","extra","printJoin","opts","nodes","newlineOpts","addNewlines","printAndIndentOnComments","printBlock","parent","_printTrailingComments","_printLeadingComments","printInnerComments","_node$innerComments","printSequence","printList","_printNewline","lines","needs","leading","Math","_getComments","_printComment","isBlockComment","printNewLines","lastCharCode","val","offset","_comment$loc","newlineRegex","indentSize","_printComments","comments","inlinePureAnnotation","printAssertions","_node$assertions","Printer","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _buffer = require(\"./buffer\");\n\nvar n = require(\"./node\");\n\nvar _t = require(\"@babel/types\");\n\nvar generatorFunctions = require(\"./generators\");\n\nconst {\n  isProgram,\n  isFile,\n  isEmptyStatement\n} = _t;\nconst SCIENTIFIC_NOTATION = /e/i;\nconst ZERO_DECIMAL_INTEGER = /\\.0+$/;\nconst NON_DECIMAL_LITERAL = /^0[box]/;\nconst PURE_ANNOTATION_RE = /^\\s*[@#]__PURE__\\s*$/;\nconst {\n  needsParens,\n  needsWhitespaceAfter,\n  needsWhitespaceBefore\n} = n;\n\nclass Printer {\n  constructor(format, map) {\n    this.inForStatementInitCounter = 0;\n    this._printStack = [];\n    this._indent = 0;\n    this._insideAux = false;\n    this._parenPushNewlineState = null;\n    this._noLineTerminator = false;\n    this._printAuxAfterOnNextUserNode = false;\n    this._printedComments = new WeakSet();\n    this._endsWithInteger = false;\n    this._endsWithWord = false;\n    this.format = format;\n    this._buf = new _buffer.default(map);\n  }\n\n  generate(ast) {\n    this.print(ast);\n\n    this._maybeAddAuxComment();\n\n    return this._buf.get();\n  }\n\n  indent() {\n    if (this.format.compact || this.format.concise) return;\n    this._indent++;\n  }\n\n  dedent() {\n    if (this.format.compact || this.format.concise) return;\n    this._indent--;\n  }\n\n  semicolon(force = false) {\n    this._maybeAddAuxComment();\n\n    this._append(\";\", !force);\n  }\n\n  rightBrace() {\n    if (this.format.minified) {\n      this._buf.removeLastSemicolon();\n    }\n\n    this.token(\"}\");\n  }\n\n  space(force = false) {\n    if (this.format.compact) return;\n\n    if (force) {\n      this._space();\n    } else if (this._buf.hasContent()) {\n      const lastCp = this.getLastChar();\n\n      if (lastCp !== 32 && lastCp !== 10) {\n        this._space();\n      }\n    }\n  }\n\n  word(str) {\n    if (this._endsWithWord || this.endsWith(47) && str.charCodeAt(0) === 47) {\n      this._space();\n    }\n\n    this._maybeAddAuxComment();\n\n    this._append(str);\n\n    this._endsWithWord = true;\n  }\n\n  number(str) {\n    this.word(str);\n    this._endsWithInteger = Number.isInteger(+str) && !NON_DECIMAL_LITERAL.test(str) && !SCIENTIFIC_NOTATION.test(str) && !ZERO_DECIMAL_INTEGER.test(str) && str.charCodeAt(str.length - 1) !== 46;\n  }\n\n  token(str) {\n    const lastChar = this.getLastChar();\n    const strFirst = str.charCodeAt(0);\n\n    if (str === \"--\" && lastChar === 33 || strFirst === 43 && lastChar === 43 || strFirst === 45 && lastChar === 45 || strFirst === 46 && this._endsWithInteger) {\n      this._space();\n    }\n\n    this._maybeAddAuxComment();\n\n    this._append(str);\n  }\n\n  newline(i = 1) {\n    if (this.format.retainLines || this.format.compact) return;\n\n    if (this.format.concise) {\n      this.space();\n      return;\n    }\n\n    const charBeforeNewline = this.endsWithCharAndNewline();\n    if (charBeforeNewline === 10) return;\n\n    if (charBeforeNewline === 123 || charBeforeNewline === 58) {\n      i--;\n    }\n\n    if (i <= 0) return;\n\n    for (let j = 0; j < i; j++) {\n      this._newline();\n    }\n  }\n\n  endsWith(char) {\n    return this.getLastChar() === char;\n  }\n\n  getLastChar() {\n    return this._buf.getLastChar();\n  }\n\n  endsWithCharAndNewline() {\n    return this._buf.endsWithCharAndNewline();\n  }\n\n  removeTrailingNewline() {\n    this._buf.removeTrailingNewline();\n  }\n\n  exactSource(loc, cb) {\n    this._catchUp(\"start\", loc);\n\n    this._buf.exactSource(loc, cb);\n  }\n\n  source(prop, loc) {\n    this._catchUp(prop, loc);\n\n    this._buf.source(prop, loc);\n  }\n\n  withSource(prop, loc, cb) {\n    this._catchUp(prop, loc);\n\n    this._buf.withSource(prop, loc, cb);\n  }\n\n  _space() {\n    this._append(\" \", true);\n  }\n\n  _newline() {\n    this._append(\"\\n\", true);\n  }\n\n  _append(str, queue = false) {\n    this._maybeAddParen(str);\n\n    this._maybeIndent(str);\n\n    if (queue) this._buf.queue(str);else this._buf.append(str);\n    this._endsWithWord = false;\n    this._endsWithInteger = false;\n  }\n\n  _maybeIndent(str) {\n    if (this._indent && this.endsWith(10) && str.charCodeAt(0) !== 10) {\n      this._buf.queue(this._getIndent());\n    }\n  }\n\n  _maybeAddParen(str) {\n    const parenPushNewlineState = this._parenPushNewlineState;\n    if (!parenPushNewlineState) return;\n    let i;\n\n    for (i = 0; i < str.length && str[i] === \" \"; i++) continue;\n\n    if (i === str.length) {\n      return;\n    }\n\n    const cha = str[i];\n\n    if (cha !== \"\\n\") {\n      if (cha !== \"/\" || i + 1 === str.length) {\n        this._parenPushNewlineState = null;\n        return;\n      }\n\n      const chaPost = str[i + 1];\n\n      if (chaPost === \"*\") {\n        if (PURE_ANNOTATION_RE.test(str.slice(i + 2, str.length - 2))) {\n          return;\n        }\n      } else if (chaPost !== \"/\") {\n        this._parenPushNewlineState = null;\n        return;\n      }\n    }\n\n    this.token(\"(\");\n    this.indent();\n    parenPushNewlineState.printed = true;\n  }\n\n  _catchUp(prop, loc) {\n    if (!this.format.retainLines) return;\n    const pos = loc ? loc[prop] : null;\n\n    if ((pos == null ? void 0 : pos.line) != null) {\n      const count = pos.line - this._buf.getCurrentLine();\n\n      for (let i = 0; i < count; i++) {\n        this._newline();\n      }\n    }\n  }\n\n  _getIndent() {\n    return this.format.indent.style.repeat(this._indent);\n  }\n\n  startTerminatorless(isLabel = false) {\n    if (isLabel) {\n      this._noLineTerminator = true;\n      return null;\n    } else {\n      return this._parenPushNewlineState = {\n        printed: false\n      };\n    }\n  }\n\n  endTerminatorless(state) {\n    this._noLineTerminator = false;\n\n    if (state != null && state.printed) {\n      this.dedent();\n      this.newline();\n      this.token(\")\");\n    }\n  }\n\n  print(node, parent) {\n    if (!node) return;\n    const oldConcise = this.format.concise;\n\n    if (node._compact) {\n      this.format.concise = true;\n    }\n\n    const printMethod = this[node.type];\n\n    if (!printMethod) {\n      throw new ReferenceError(`unknown node of type ${JSON.stringify(node.type)} with constructor ${JSON.stringify(node == null ? void 0 : node.constructor.name)}`);\n    }\n\n    this._printStack.push(node);\n\n    const oldInAux = this._insideAux;\n    this._insideAux = !node.loc;\n\n    this._maybeAddAuxComment(this._insideAux && !oldInAux);\n\n    let shouldPrintParens = needsParens(node, parent, this._printStack);\n\n    if (this.format.retainFunctionParens && node.type === \"FunctionExpression\" && node.extra && node.extra.parenthesized) {\n      shouldPrintParens = true;\n    }\n\n    if (shouldPrintParens) this.token(\"(\");\n\n    this._printLeadingComments(node);\n\n    const loc = isProgram(node) || isFile(node) ? null : node.loc;\n    this.withSource(\"start\", loc, () => {\n      printMethod.call(this, node, parent);\n    });\n\n    this._printTrailingComments(node);\n\n    if (shouldPrintParens) this.token(\")\");\n\n    this._printStack.pop();\n\n    this.format.concise = oldConcise;\n    this._insideAux = oldInAux;\n  }\n\n  _maybeAddAuxComment(enteredPositionlessNode) {\n    if (enteredPositionlessNode) this._printAuxBeforeComment();\n    if (!this._insideAux) this._printAuxAfterComment();\n  }\n\n  _printAuxBeforeComment() {\n    if (this._printAuxAfterOnNextUserNode) return;\n    this._printAuxAfterOnNextUserNode = true;\n    const comment = this.format.auxiliaryCommentBefore;\n\n    if (comment) {\n      this._printComment({\n        type: \"CommentBlock\",\n        value: comment\n      });\n    }\n  }\n\n  _printAuxAfterComment() {\n    if (!this._printAuxAfterOnNextUserNode) return;\n    this._printAuxAfterOnNextUserNode = false;\n    const comment = this.format.auxiliaryCommentAfter;\n\n    if (comment) {\n      this._printComment({\n        type: \"CommentBlock\",\n        value: comment\n      });\n    }\n  }\n\n  getPossibleRaw(node) {\n    const extra = node.extra;\n\n    if (extra && extra.raw != null && extra.rawValue != null && node.value === extra.rawValue) {\n      return extra.raw;\n    }\n  }\n\n  printJoin(nodes, parent, opts = {}) {\n    if (!(nodes != null && nodes.length)) return;\n    if (opts.indent) this.indent();\n    const newlineOpts = {\n      addNewlines: opts.addNewlines\n    };\n\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i];\n      if (!node) continue;\n      if (opts.statement) this._printNewline(true, node, parent, newlineOpts);\n      this.print(node, parent);\n\n      if (opts.iterator) {\n        opts.iterator(node, i);\n      }\n\n      if (opts.separator && i < nodes.length - 1) {\n        opts.separator.call(this);\n      }\n\n      if (opts.statement) this._printNewline(false, node, parent, newlineOpts);\n    }\n\n    if (opts.indent) this.dedent();\n  }\n\n  printAndIndentOnComments(node, parent) {\n    const indent = node.leadingComments && node.leadingComments.length > 0;\n    if (indent) this.indent();\n    this.print(node, parent);\n    if (indent) this.dedent();\n  }\n\n  printBlock(parent) {\n    const node = parent.body;\n\n    if (!isEmptyStatement(node)) {\n      this.space();\n    }\n\n    this.print(node, parent);\n  }\n\n  _printTrailingComments(node) {\n    this._printComments(this._getComments(false, node));\n  }\n\n  _printLeadingComments(node) {\n    this._printComments(this._getComments(true, node), true);\n  }\n\n  printInnerComments(node, indent = true) {\n    var _node$innerComments;\n\n    if (!((_node$innerComments = node.innerComments) != null && _node$innerComments.length)) return;\n    if (indent) this.indent();\n\n    this._printComments(node.innerComments);\n\n    if (indent) this.dedent();\n  }\n\n  printSequence(nodes, parent, opts = {}) {\n    opts.statement = true;\n    return this.printJoin(nodes, parent, opts);\n  }\n\n  printList(items, parent, opts = {}) {\n    if (opts.separator == null) {\n      opts.separator = commaSeparator;\n    }\n\n    return this.printJoin(items, parent, opts);\n  }\n\n  _printNewline(leading, node, parent, opts) {\n    if (this.format.retainLines || this.format.compact) return;\n\n    if (this.format.concise) {\n      this.space();\n      return;\n    }\n\n    let lines = 0;\n\n    if (this._buf.hasContent()) {\n      if (!leading) lines++;\n      if (opts.addNewlines) lines += opts.addNewlines(leading, node) || 0;\n      const needs = leading ? needsWhitespaceBefore : needsWhitespaceAfter;\n      if (needs(node, parent)) lines++;\n    }\n\n    this.newline(Math.min(2, lines));\n  }\n\n  _getComments(leading, node) {\n    return node && (leading ? node.leadingComments : node.trailingComments) || [];\n  }\n\n  _printComment(comment, skipNewLines) {\n    if (!this.format.shouldPrintComment(comment.value)) return;\n    if (comment.ignore) return;\n    if (this._printedComments.has(comment)) return;\n\n    this._printedComments.add(comment);\n\n    const isBlockComment = comment.type === \"CommentBlock\";\n    const printNewLines = isBlockComment && !skipNewLines && !this._noLineTerminator;\n    if (printNewLines && this._buf.hasContent()) this.newline(1);\n    const lastCharCode = this.getLastChar();\n\n    if (lastCharCode !== 91 && lastCharCode !== 123) {\n      this.space();\n    }\n\n    let val = !isBlockComment && !this._noLineTerminator ? `//${comment.value}\\n` : `/*${comment.value}*/`;\n\n    if (isBlockComment && this.format.indent.adjustMultilineComment) {\n      var _comment$loc;\n\n      const offset = (_comment$loc = comment.loc) == null ? void 0 : _comment$loc.start.column;\n\n      if (offset) {\n        const newlineRegex = new RegExp(\"\\\\n\\\\s{1,\" + offset + \"}\", \"g\");\n        val = val.replace(newlineRegex, \"\\n\");\n      }\n\n      const indentSize = Math.max(this._getIndent().length, this.format.retainLines ? 0 : this._buf.getCurrentColumn());\n      val = val.replace(/\\n(?!$)/g, `\\n${\" \".repeat(indentSize)}`);\n    }\n\n    if (this.endsWith(47)) this._space();\n    this.withSource(\"start\", comment.loc, () => {\n      this._append(val);\n    });\n    if (printNewLines) this.newline(1);\n  }\n\n  _printComments(comments, inlinePureAnnotation) {\n    if (!(comments != null && comments.length)) return;\n\n    if (inlinePureAnnotation && comments.length === 1 && PURE_ANNOTATION_RE.test(comments[0].value)) {\n      this._printComment(comments[0], this._buf.hasContent() && !this.endsWith(10));\n    } else {\n      for (const comment of comments) {\n        this._printComment(comment);\n      }\n    }\n  }\n\n  printAssertions(node) {\n    var _node$assertions;\n\n    if ((_node$assertions = node.assertions) != null && _node$assertions.length) {\n      this.space();\n      this.word(\"assert\");\n      this.space();\n      this.token(\"{\");\n      this.space();\n      this.printList(node.assertions, node);\n      this.space();\n      this.token(\"}\");\n    }\n  }\n\n}\n\nObject.assign(Printer.prototype, generatorFunctions);\n{\n  Printer.prototype.Noop = function Noop() {};\n}\nvar _default = Printer;\nexports.default = _default;\n\nfunction commaSeparator() {\n  this.token(\",\");\n  this.space();\n}"],"file":"printer.js"}