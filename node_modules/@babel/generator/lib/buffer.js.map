{"version":3,"sources":["../../../../../node_modules/@babel/generator/lib/buffer.js"],"names":["Object","value","exports","SPACES_RE","constructor","line","column","identifierName","filename","get","map","result","code","rawMappings","configurable","enumerable","set","writable","append","force","queue","str","_flush","item","_append","i","last","_mark","_this$_map","removeTrailingNewline","removeLastSemicolon","getLastChar","endsWithCharAndNewline","lastCp","secondLast","hasContent","exactSource","cb","source","prop","withSource","originalLine","originalColumn","originalFilename","originalIdentifierName","_disallowPop","_normalizePosition","pos","loc","targetObj","origLine","origColumn","origFilename","getCurrentColumn","extra","lastIndex","getCurrentLine","count"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nconst SPACES_RE = /^[ \\t]+$/;\n\nclass Buffer {\n  constructor(map) {\n    this._map = null;\n    this._buf = \"\";\n    this._last = 0;\n    this._queue = [];\n    this._position = {\n      line: 1,\n      column: 0\n    };\n    this._sourcePosition = {\n      identifierName: null,\n      line: null,\n      column: null,\n      filename: null\n    };\n    this._disallowedPop = null;\n    this._map = map;\n  }\n\n  get() {\n    this._flush();\n\n    const map = this._map;\n    const result = {\n      code: this._buf.trimRight(),\n      map: null,\n      rawMappings: map == null ? void 0 : map.getRawMappings()\n    };\n\n    if (map) {\n      Object.defineProperty(result, \"map\", {\n        configurable: true,\n        enumerable: true,\n\n        get() {\n          return this.map = map.get();\n        },\n\n        set(value) {\n          Object.defineProperty(this, \"map\", {\n            value,\n            writable: true\n          });\n        }\n\n      });\n    }\n\n    return result;\n  }\n\n  append(str) {\n    this._flush();\n\n    const {\n      line,\n      column,\n      filename,\n      identifierName,\n      force\n    } = this._sourcePosition;\n\n    this._append(str, line, column, identifierName, filename, force);\n  }\n\n  queue(str) {\n    if (str === \"\\n\") {\n      while (this._queue.length > 0 && SPACES_RE.test(this._queue[0][0])) {\n        this._queue.shift();\n      }\n    }\n\n    const {\n      line,\n      column,\n      filename,\n      identifierName,\n      force\n    } = this._sourcePosition;\n\n    this._queue.unshift([str, line, column, identifierName, filename, force]);\n  }\n\n  _flush() {\n    let item;\n\n    while (item = this._queue.pop()) {\n      this._append(...item);\n    }\n  }\n\n  _append(str, line, column, identifierName, filename, force) {\n    this._buf += str;\n    this._last = str.charCodeAt(str.length - 1);\n    let i = str.indexOf(\"\\n\");\n    let last = 0;\n\n    if (i !== 0) {\n      this._mark(line, column, identifierName, filename, force);\n    }\n\n    while (i !== -1) {\n      this._position.line++;\n      this._position.column = 0;\n      last = i + 1;\n\n      if (last < str.length) {\n        this._mark(++line, 0, identifierName, filename, force);\n      }\n\n      i = str.indexOf(\"\\n\", last);\n    }\n\n    this._position.column += str.length - last;\n  }\n\n  _mark(line, column, identifierName, filename, force) {\n    var _this$_map;\n\n    (_this$_map = this._map) == null ? void 0 : _this$_map.mark(this._position.line, this._position.column, line, column, identifierName, filename, force);\n  }\n\n  removeTrailingNewline() {\n    if (this._queue.length > 0 && this._queue[0][0] === \"\\n\") {\n      this._queue.shift();\n    }\n  }\n\n  removeLastSemicolon() {\n    if (this._queue.length > 0 && this._queue[0][0] === \";\") {\n      this._queue.shift();\n    }\n  }\n\n  getLastChar() {\n    let last;\n\n    if (this._queue.length > 0) {\n      const str = this._queue[0][0];\n      last = str.charCodeAt(0);\n    } else {\n      last = this._last;\n    }\n\n    return last;\n  }\n\n  endsWithCharAndNewline() {\n    const queue = this._queue;\n\n    if (queue.length > 0) {\n      const last = queue[0][0];\n      const lastCp = last.charCodeAt(0);\n      if (lastCp !== 10) return;\n\n      if (queue.length > 1) {\n        const secondLast = queue[1][0];\n        return secondLast.charCodeAt(0);\n      } else {\n        return this._last;\n      }\n    }\n  }\n\n  hasContent() {\n    return this._queue.length > 0 || !!this._last;\n  }\n\n  exactSource(loc, cb) {\n    this.source(\"start\", loc, true);\n    cb();\n    this.source(\"end\", loc);\n\n    this._disallowPop(\"start\", loc);\n  }\n\n  source(prop, loc, force) {\n    if (prop && !loc) return;\n\n    this._normalizePosition(prop, loc, this._sourcePosition, force);\n  }\n\n  withSource(prop, loc, cb) {\n    if (!this._map) return cb();\n    const originalLine = this._sourcePosition.line;\n    const originalColumn = this._sourcePosition.column;\n    const originalFilename = this._sourcePosition.filename;\n    const originalIdentifierName = this._sourcePosition.identifierName;\n    this.source(prop, loc);\n    cb();\n\n    if ((!this._sourcePosition.force || this._sourcePosition.line !== originalLine || this._sourcePosition.column !== originalColumn || this._sourcePosition.filename !== originalFilename) && (!this._disallowedPop || this._disallowedPop.line !== originalLine || this._disallowedPop.column !== originalColumn || this._disallowedPop.filename !== originalFilename)) {\n      this._sourcePosition.line = originalLine;\n      this._sourcePosition.column = originalColumn;\n      this._sourcePosition.filename = originalFilename;\n      this._sourcePosition.identifierName = originalIdentifierName;\n      this._sourcePosition.force = false;\n      this._disallowedPop = null;\n    }\n  }\n\n  _disallowPop(prop, loc) {\n    if (prop && !loc) return;\n    this._disallowedPop = this._normalizePosition(prop, loc);\n  }\n\n  _normalizePosition(prop, loc, targetObj, force) {\n    const pos = loc ? loc[prop] : null;\n\n    if (targetObj === undefined) {\n      targetObj = {\n        identifierName: null,\n        line: null,\n        column: null,\n        filename: null,\n        force: false\n      };\n    }\n\n    const origLine = targetObj.line;\n    const origColumn = targetObj.column;\n    const origFilename = targetObj.filename;\n    targetObj.identifierName = prop === \"start\" && (loc == null ? void 0 : loc.identifierName) || null;\n    targetObj.line = pos == null ? void 0 : pos.line;\n    targetObj.column = pos == null ? void 0 : pos.column;\n    targetObj.filename = loc == null ? void 0 : loc.filename;\n\n    if (force || targetObj.line !== origLine || targetObj.column !== origColumn || targetObj.filename !== origFilename) {\n      targetObj.force = force;\n    }\n\n    return targetObj;\n  }\n\n  getCurrentColumn() {\n    const extra = this._queue.reduce((acc, item) => item[0] + acc, \"\");\n\n    const lastIndex = extra.lastIndexOf(\"\\n\");\n    return lastIndex === -1 ? this._position.column + extra.length : extra.length - 1 - lastIndex;\n  }\n\n  getCurrentLine() {\n    const extra = this._queue.reduce((acc, item) => item[0] + acc, \"\");\n\n    let count = 0;\n\n    for (let i = 0; i < extra.length; i++) {\n      if (extra[i] === \"\\n\") count++;\n    }\n\n    return this._position.line + count;\n  }\n\n}\n\nexports.default = Buffer;"],"file":"buffer.js"}