{"version":3,"sources":["../../../../../node_modules/@babel/helper-create-class-features-plugin/lib/fields.js"],"names":["Object","value","exports","_core","require","_helperReplaceSupers","_helperMemberExpressionToFunctions","_helperOptimiseCallExpression","_helperAnnotateAsPure","ts","privateNamesMap","prop","name","update","id","static","method","initNodes","setId","isAccessor","getId","init","state","ast","privateNameVisitor","Class","body","path","visiblePrivateNames","redeclared","nestedVisitor","privateNameVisitorFactory","PrivateName","noDocumentAll","parentPath","property","node","_scope","scope","privateInVisitor","BinaryExpression","right","operator","left","unshadow","isStatic","privateNameHandlerSpec","memoise","object","member","memo","receiver","get","innerBinding","helperName","isMethod","classRef","file","console","boundGet","set","destructureSet","helper","call","optionalCall","privateNameHandlerLoose","BASE","REF","PROP","simpleSet","handler","privateFieldsAsProperties","ref","privateName","initAdded","methodId","buildPrivateAccessorInitialization","buildPrivateInstanceMethodInitalization","computed","key","async","isGetter","params","isSetter","declId","getterDeclared","setterDeclared","thisContextVisitor","ThisExpression","MetaProperty","meta","innerReferencesVisitor","ReferencedIdentifier","needsClassRef","innerBindingRef","replacer","methodPath","refToPreserve","getObjectRef","isStaticBlock","_state$classRef","staticNodes","instanceNodes","pureStaticNodes","getSuperRef","_injectSuperRef","injectSuperRef","props","isInstance","isPrivate","isPublic","isField","replaced","replaceThisContext","buildPrivateFieldInitLoose","buildPrivateStaticFieldInitSpec","buildPublicFieldInitLoose","buildPublicFieldInitSpec","buildPrivateInstanceFieldInitSpec","buildPrivateMethodInitLoose","buildPrivateMethodDeclaration","buildPrivateInstanceMethodInitSpec","buildPrivateStaticMethodInitLoose","wrapClass"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildPrivateNamesMap = buildPrivateNamesMap;\nexports.buildPrivateNamesNodes = buildPrivateNamesNodes;\nexports.transformPrivateNamesUsage = transformPrivateNamesUsage;\nexports.buildFieldsInitNodes = buildFieldsInitNodes;\n\nvar _core = require(\"@babel/core\");\n\nvar _helperReplaceSupers = require(\"@babel/helper-replace-supers\");\n\nvar _helperMemberExpressionToFunctions = require(\"@babel/helper-member-expression-to-functions\");\n\nvar _helperOptimiseCallExpression = require(\"@babel/helper-optimise-call-expression\");\n\nvar _helperAnnotateAsPure = require(\"@babel/helper-annotate-as-pure\");\n\nvar ts = require(\"./typescript\");\n\nfunction buildPrivateNamesMap(props) {\n  const privateNamesMap = new Map();\n\n  for (const prop of props) {\n    if (prop.isPrivate()) {\n      const {\n        name\n      } = prop.node.key.id;\n      const update = privateNamesMap.has(name) ? privateNamesMap.get(name) : {\n        id: prop.scope.generateUidIdentifier(name),\n        static: prop.node.static,\n        method: !prop.isProperty()\n      };\n\n      if (prop.isClassPrivateMethod()) {\n        if (prop.node.kind === \"get\") {\n          update.getId = prop.scope.generateUidIdentifier(`get_${name}`);\n        } else if (prop.node.kind === \"set\") {\n          update.setId = prop.scope.generateUidIdentifier(`set_${name}`);\n        } else if (prop.node.kind === \"method\") {\n          update.methodId = prop.scope.generateUidIdentifier(name);\n        }\n      }\n\n      privateNamesMap.set(name, update);\n    }\n  }\n\n  return privateNamesMap;\n}\n\nfunction buildPrivateNamesNodes(privateNamesMap, privateFieldsAsProperties, state) {\n  const initNodes = [];\n\n  for (const [name, value] of privateNamesMap) {\n    const {\n      static: isStatic,\n      method: isMethod,\n      getId,\n      setId\n    } = value;\n    const isAccessor = getId || setId;\n\n    const id = _core.types.cloneNode(value.id);\n\n    let init;\n\n    if (privateFieldsAsProperties) {\n      init = _core.types.callExpression(state.addHelper(\"classPrivateFieldLooseKey\"), [_core.types.stringLiteral(name)]);\n    } else if (!isStatic) {\n      init = _core.types.newExpression(_core.types.identifier(!isMethod || isAccessor ? \"WeakMap\" : \"WeakSet\"), []);\n    }\n\n    if (init) {\n      (0, _helperAnnotateAsPure.default)(init);\n      initNodes.push(_core.template.statement.ast`var ${id} = ${init}`);\n    }\n  }\n\n  return initNodes;\n}\n\nfunction privateNameVisitorFactory(visitor) {\n  const privateNameVisitor = Object.assign({}, visitor, {\n    Class(path) {\n      const {\n        privateNamesMap\n      } = this;\n      const body = path.get(\"body.body\");\n      const visiblePrivateNames = new Map(privateNamesMap);\n      const redeclared = [];\n\n      for (const prop of body) {\n        if (!prop.isPrivate()) continue;\n        const {\n          name\n        } = prop.node.key.id;\n        visiblePrivateNames.delete(name);\n        redeclared.push(name);\n      }\n\n      if (!redeclared.length) {\n        return;\n      }\n\n      path.get(\"body\").traverse(nestedVisitor, Object.assign({}, this, {\n        redeclared\n      }));\n      path.traverse(privateNameVisitor, Object.assign({}, this, {\n        privateNamesMap: visiblePrivateNames\n      }));\n      path.skipKey(\"body\");\n    }\n\n  });\n\n  const nestedVisitor = _core.traverse.visitors.merge([Object.assign({}, visitor), _helperReplaceSupers.environmentVisitor]);\n\n  return privateNameVisitor;\n}\n\nconst privateNameVisitor = privateNameVisitorFactory({\n  PrivateName(path, {\n    noDocumentAll\n  }) {\n    const {\n      privateNamesMap,\n      redeclared\n    } = this;\n    const {\n      node,\n      parentPath\n    } = path;\n\n    if (!parentPath.isMemberExpression({\n      property: node\n    }) && !parentPath.isOptionalMemberExpression({\n      property: node\n    })) {\n      return;\n    }\n\n    const {\n      name\n    } = node.id;\n    if (!privateNamesMap.has(name)) return;\n    if (redeclared && redeclared.includes(name)) return;\n    this.handle(parentPath, noDocumentAll);\n  }\n\n});\n\nfunction unshadow(name, scope, innerBinding) {\n  while ((_scope = scope) != null && _scope.hasBinding(name) && !scope.bindingIdentifierEquals(name, innerBinding)) {\n    var _scope;\n\n    scope.rename(name);\n    scope = scope.parent;\n  }\n}\n\nconst privateInVisitor = privateNameVisitorFactory({\n  BinaryExpression(path) {\n    const {\n      operator,\n      left,\n      right\n    } = path.node;\n    if (operator !== \"in\") return;\n    if (!_core.types.isPrivateName(left)) return;\n    const {\n      privateFieldsAsProperties,\n      privateNamesMap,\n      redeclared\n    } = this;\n    const {\n      name\n    } = left.id;\n    if (!privateNamesMap.has(name)) return;\n    if (redeclared && redeclared.includes(name)) return;\n    unshadow(this.classRef.name, path.scope, this.innerBinding);\n\n    if (privateFieldsAsProperties) {\n      const {\n        id\n      } = privateNamesMap.get(name);\n      path.replaceWith(_core.template.expression.ast`\n        Object.prototype.hasOwnProperty.call(${right}, ${_core.types.cloneNode(id)})\n      `);\n      return;\n    }\n\n    const {\n      id,\n      static: isStatic\n    } = privateNamesMap.get(name);\n\n    if (isStatic) {\n      path.replaceWith(_core.template.expression.ast`${right} === ${this.classRef}`);\n      return;\n    }\n\n    path.replaceWith(_core.template.expression.ast`${_core.types.cloneNode(id)}.has(${right})`);\n  }\n\n});\nconst privateNameHandlerSpec = {\n  memoise(member, count) {\n    const {\n      scope\n    } = member;\n    const {\n      object\n    } = member.node;\n    const memo = scope.maybeGenerateMemoised(object);\n\n    if (!memo) {\n      return;\n    }\n\n    this.memoiser.set(object, memo, count);\n  },\n\n  receiver(member) {\n    const {\n      object\n    } = member.node;\n\n    if (this.memoiser.has(object)) {\n      return _core.types.cloneNode(this.memoiser.get(object));\n    }\n\n    return _core.types.cloneNode(object);\n  },\n\n  get(member) {\n    const {\n      classRef,\n      privateNamesMap,\n      file,\n      innerBinding\n    } = this;\n    const {\n      name\n    } = member.node.property.id;\n    const {\n      id,\n      static: isStatic,\n      method: isMethod,\n      methodId,\n      getId,\n      setId\n    } = privateNamesMap.get(name);\n    const isAccessor = getId || setId;\n\n    if (isStatic) {\n      const helperName = isMethod && !isAccessor ? \"classStaticPrivateMethodGet\" : \"classStaticPrivateFieldSpecGet\";\n      unshadow(classRef.name, member.scope, innerBinding);\n      return _core.types.callExpression(file.addHelper(helperName), [this.receiver(member), _core.types.cloneNode(classRef), _core.types.cloneNode(id)]);\n    }\n\n    if (isMethod) {\n      if (isAccessor) {\n        if (!getId && setId) {\n          if (file.availableHelper(\"writeOnlyError\")) {\n            return _core.types.sequenceExpression([this.receiver(member), _core.types.callExpression(file.addHelper(\"writeOnlyError\"), [_core.types.stringLiteral(`#${name}`)])]);\n          }\n\n          console.warn(`@babel/helpers is outdated, update it to silence this warning.`);\n        }\n\n        return _core.types.callExpression(file.addHelper(\"classPrivateFieldGet\"), [this.receiver(member), _core.types.cloneNode(id)]);\n      }\n\n      return _core.types.callExpression(file.addHelper(\"classPrivateMethodGet\"), [this.receiver(member), _core.types.cloneNode(id), _core.types.cloneNode(methodId)]);\n    }\n\n    return _core.types.callExpression(file.addHelper(\"classPrivateFieldGet\"), [this.receiver(member), _core.types.cloneNode(id)]);\n  },\n\n  boundGet(member) {\n    this.memoise(member, 1);\n    return _core.types.callExpression(_core.types.memberExpression(this.get(member), _core.types.identifier(\"bind\")), [this.receiver(member)]);\n  },\n\n  set(member, value) {\n    const {\n      classRef,\n      privateNamesMap,\n      file\n    } = this;\n    const {\n      name\n    } = member.node.property.id;\n    const {\n      id,\n      static: isStatic,\n      method: isMethod,\n      setId,\n      getId\n    } = privateNamesMap.get(name);\n    const isAccessor = getId || setId;\n\n    if (isStatic) {\n      const helperName = isMethod && !isAccessor ? \"classStaticPrivateMethodSet\" : \"classStaticPrivateFieldSpecSet\";\n      return _core.types.callExpression(file.addHelper(helperName), [this.receiver(member), _core.types.cloneNode(classRef), _core.types.cloneNode(id), value]);\n    }\n\n    if (isMethod) {\n      if (setId) {\n        return _core.types.callExpression(file.addHelper(\"classPrivateFieldSet\"), [this.receiver(member), _core.types.cloneNode(id), value]);\n      }\n\n      return _core.types.sequenceExpression([this.receiver(member), value, _core.types.callExpression(file.addHelper(\"readOnlyError\"), [_core.types.stringLiteral(`#${name}`)])]);\n    }\n\n    return _core.types.callExpression(file.addHelper(\"classPrivateFieldSet\"), [this.receiver(member), _core.types.cloneNode(id), value]);\n  },\n\n  destructureSet(member) {\n    const {\n      classRef,\n      privateNamesMap,\n      file\n    } = this;\n    const {\n      name\n    } = member.node.property.id;\n    const {\n      id,\n      static: isStatic\n    } = privateNamesMap.get(name);\n\n    if (isStatic) {\n      try {\n        var helper = file.addHelper(\"classStaticPrivateFieldDestructureSet\");\n      } catch (_unused) {\n        throw new Error(\"Babel can not transpile `[C.#p] = [0]` with @babel/helpers < 7.13.10, \\n\" + \"please update @babel/helpers to the latest version.\");\n      }\n\n      return _core.types.memberExpression(_core.types.callExpression(helper, [this.receiver(member), _core.types.cloneNode(classRef), _core.types.cloneNode(id)]), _core.types.identifier(\"value\"));\n    }\n\n    return _core.types.memberExpression(_core.types.callExpression(file.addHelper(\"classPrivateFieldDestructureSet\"), [this.receiver(member), _core.types.cloneNode(id)]), _core.types.identifier(\"value\"));\n  },\n\n  call(member, args) {\n    this.memoise(member, 1);\n    return (0, _helperOptimiseCallExpression.default)(this.get(member), this.receiver(member), args, false);\n  },\n\n  optionalCall(member, args) {\n    this.memoise(member, 1);\n    return (0, _helperOptimiseCallExpression.default)(this.get(member), this.receiver(member), args, true);\n  }\n\n};\nconst privateNameHandlerLoose = {\n  get(member) {\n    const {\n      privateNamesMap,\n      file\n    } = this;\n    const {\n      object\n    } = member.node;\n    const {\n      name\n    } = member.node.property.id;\n    return _core.template.expression`BASE(REF, PROP)[PROP]`({\n      BASE: file.addHelper(\"classPrivateFieldLooseBase\"),\n      REF: _core.types.cloneNode(object),\n      PROP: _core.types.cloneNode(privateNamesMap.get(name).id)\n    });\n  },\n\n  set() {\n    throw new Error(\"private name handler with loose = true don't need set()\");\n  },\n\n  boundGet(member) {\n    return _core.types.callExpression(_core.types.memberExpression(this.get(member), _core.types.identifier(\"bind\")), [_core.types.cloneNode(member.node.object)]);\n  },\n\n  simpleSet(member) {\n    return this.get(member);\n  },\n\n  destructureSet(member) {\n    return this.get(member);\n  },\n\n  call(member, args) {\n    return _core.types.callExpression(this.get(member), args);\n  },\n\n  optionalCall(member, args) {\n    return _core.types.optionalCallExpression(this.get(member), args, true);\n  }\n\n};\n\nfunction transformPrivateNamesUsage(ref, path, privateNamesMap, {\n  privateFieldsAsProperties,\n  noDocumentAll,\n  innerBinding\n}, state) {\n  if (!privateNamesMap.size) return;\n  const body = path.get(\"body\");\n  const handler = privateFieldsAsProperties ? privateNameHandlerLoose : privateNameHandlerSpec;\n  (0, _helperMemberExpressionToFunctions.default)(body, privateNameVisitor, Object.assign({\n    privateNamesMap,\n    classRef: ref,\n    file: state\n  }, handler, {\n    noDocumentAll,\n    innerBinding\n  }));\n  body.traverse(privateInVisitor, {\n    privateNamesMap,\n    classRef: ref,\n    file: state,\n    privateFieldsAsProperties,\n    innerBinding\n  });\n}\n\nfunction buildPrivateFieldInitLoose(ref, prop, privateNamesMap) {\n  const {\n    id\n  } = privateNamesMap.get(prop.node.key.id.name);\n  const value = prop.node.value || prop.scope.buildUndefinedNode();\n  return _core.template.statement.ast`\n    Object.defineProperty(${ref}, ${_core.types.cloneNode(id)}, {\n      // configurable is false by default\n      // enumerable is false by default\n      writable: true,\n      value: ${value}\n    });\n  `;\n}\n\nfunction buildPrivateInstanceFieldInitSpec(ref, prop, privateNamesMap, state) {\n  const {\n    id\n  } = privateNamesMap.get(prop.node.key.id.name);\n  const value = prop.node.value || prop.scope.buildUndefinedNode();\n  {\n    if (!state.availableHelper(\"classPrivateFieldInitSpec\")) {\n      return _core.template.statement.ast`${_core.types.cloneNode(id)}.set(${ref}, {\n        // configurable is always false for private elements\n        // enumerable is always false for private elements\n        writable: true,\n        value: ${value},\n      })`;\n    }\n  }\n  const helper = state.addHelper(\"classPrivateFieldInitSpec\");\n  return _core.template.statement.ast`${helper}(\n    ${_core.types.thisExpression()},\n    ${_core.types.cloneNode(id)},\n    {\n      writable: true,\n      value: ${value}\n    },\n  )`;\n}\n\nfunction buildPrivateStaticFieldInitSpec(prop, privateNamesMap) {\n  const privateName = privateNamesMap.get(prop.node.key.id.name);\n  const {\n    id,\n    getId,\n    setId,\n    initAdded\n  } = privateName;\n  const isAccessor = getId || setId;\n  if (!prop.isProperty() && (initAdded || !isAccessor)) return;\n\n  if (isAccessor) {\n    privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, {\n      initAdded: true\n    }));\n    return _core.template.statement.ast`\n      var ${_core.types.cloneNode(id)} = {\n        // configurable is false by default\n        // enumerable is false by default\n        // writable is false by default\n        get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},\n        set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}\n      }\n    `;\n  }\n\n  const value = prop.node.value || prop.scope.buildUndefinedNode();\n  return _core.template.statement.ast`\n    var ${_core.types.cloneNode(id)} = {\n      // configurable is false by default\n      // enumerable is false by default\n      writable: true,\n      value: ${value}\n    };\n  `;\n}\n\nfunction buildPrivateMethodInitLoose(ref, prop, privateNamesMap) {\n  const privateName = privateNamesMap.get(prop.node.key.id.name);\n  const {\n    methodId,\n    id,\n    getId,\n    setId,\n    initAdded\n  } = privateName;\n  if (initAdded) return;\n\n  if (methodId) {\n    return _core.template.statement.ast`\n        Object.defineProperty(${ref}, ${id}, {\n          // configurable is false by default\n          // enumerable is false by default\n          // writable is false by default\n          value: ${methodId.name}\n        });\n      `;\n  }\n\n  const isAccessor = getId || setId;\n\n  if (isAccessor) {\n    privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, {\n      initAdded: true\n    }));\n    return _core.template.statement.ast`\n      Object.defineProperty(${ref}, ${id}, {\n        // configurable is false by default\n        // enumerable is false by default\n        // writable is false by default\n        get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},\n        set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}\n      });\n    `;\n  }\n}\n\nfunction buildPrivateInstanceMethodInitSpec(ref, prop, privateNamesMap, state) {\n  const privateName = privateNamesMap.get(prop.node.key.id.name);\n  const {\n    getId,\n    setId,\n    initAdded\n  } = privateName;\n  if (initAdded) return;\n  const isAccessor = getId || setId;\n\n  if (isAccessor) {\n    return buildPrivateAccessorInitialization(ref, prop, privateNamesMap, state);\n  }\n\n  return buildPrivateInstanceMethodInitalization(ref, prop, privateNamesMap, state);\n}\n\nfunction buildPrivateAccessorInitialization(ref, prop, privateNamesMap, state) {\n  const privateName = privateNamesMap.get(prop.node.key.id.name);\n  const {\n    id,\n    getId,\n    setId\n  } = privateName;\n  privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, {\n    initAdded: true\n  }));\n  {\n    if (!state.availableHelper(\"classPrivateFieldInitSpec\")) {\n      return _core.template.statement.ast`\n      ${id}.set(${ref}, {\n        get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},\n        set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}\n      });\n    `;\n    }\n  }\n  const helper = state.addHelper(\"classPrivateFieldInitSpec\");\n  return _core.template.statement.ast`${helper}(\n    ${_core.types.thisExpression()},\n    ${_core.types.cloneNode(id)},\n    {\n      get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},\n      set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}\n    },\n  )`;\n}\n\nfunction buildPrivateInstanceMethodInitalization(ref, prop, privateNamesMap, state) {\n  const privateName = privateNamesMap.get(prop.node.key.id.name);\n  const {\n    id\n  } = privateName;\n  {\n    if (!state.availableHelper(\"classPrivateMethodInitSpec\")) {\n      return _core.template.statement.ast`${id}.add(${ref})`;\n    }\n  }\n  const helper = state.addHelper(\"classPrivateMethodInitSpec\");\n  return _core.template.statement.ast`${helper}(\n    ${_core.types.thisExpression()},\n    ${_core.types.cloneNode(id)}\n  )`;\n}\n\nfunction buildPublicFieldInitLoose(ref, prop) {\n  const {\n    key,\n    computed\n  } = prop.node;\n  const value = prop.node.value || prop.scope.buildUndefinedNode();\n  return _core.types.expressionStatement(_core.types.assignmentExpression(\"=\", _core.types.memberExpression(ref, key, computed || _core.types.isLiteral(key)), value));\n}\n\nfunction buildPublicFieldInitSpec(ref, prop, state) {\n  const {\n    key,\n    computed\n  } = prop.node;\n  const value = prop.node.value || prop.scope.buildUndefinedNode();\n  return _core.types.expressionStatement(_core.types.callExpression(state.addHelper(\"defineProperty\"), [ref, computed || _core.types.isLiteral(key) ? key : _core.types.stringLiteral(key.name), value]));\n}\n\nfunction buildPrivateStaticMethodInitLoose(ref, prop, state, privateNamesMap) {\n  const privateName = privateNamesMap.get(prop.node.key.id.name);\n  const {\n    id,\n    methodId,\n    getId,\n    setId,\n    initAdded\n  } = privateName;\n  if (initAdded) return;\n  const isAccessor = getId || setId;\n\n  if (isAccessor) {\n    privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, {\n      initAdded: true\n    }));\n    return _core.template.statement.ast`\n      Object.defineProperty(${ref}, ${id}, {\n        // configurable is false by default\n        // enumerable is false by default\n        // writable is false by default\n        get: ${getId ? getId.name : prop.scope.buildUndefinedNode()},\n        set: ${setId ? setId.name : prop.scope.buildUndefinedNode()}\n      })\n    `;\n  }\n\n  return _core.template.statement.ast`\n    Object.defineProperty(${ref}, ${id}, {\n      // configurable is false by default\n      // enumerable is false by default\n      // writable is false by default\n      value: ${methodId.name}\n    });\n  `;\n}\n\nfunction buildPrivateMethodDeclaration(prop, privateNamesMap, privateFieldsAsProperties = false) {\n  const privateName = privateNamesMap.get(prop.node.key.id.name);\n  const {\n    id,\n    methodId,\n    getId,\n    setId,\n    getterDeclared,\n    setterDeclared,\n    static: isStatic\n  } = privateName;\n  const {\n    params,\n    body,\n    generator,\n    async\n  } = prop.node;\n  const isGetter = getId && !getterDeclared && params.length === 0;\n  const isSetter = setId && !setterDeclared && params.length > 0;\n  let declId = methodId;\n\n  if (isGetter) {\n    privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, {\n      getterDeclared: true\n    }));\n    declId = getId;\n  } else if (isSetter) {\n    privateNamesMap.set(prop.node.key.id.name, Object.assign({}, privateName, {\n      setterDeclared: true\n    }));\n    declId = setId;\n  } else if (isStatic && !privateFieldsAsProperties) {\n    declId = id;\n  }\n\n  return _core.types.functionDeclaration(_core.types.cloneNode(declId), params, body, generator, async);\n}\n\nconst thisContextVisitor = _core.traverse.visitors.merge([{\n  ThisExpression(path, state) {\n    state.needsClassRef = true;\n    path.replaceWith(_core.types.cloneNode(state.classRef));\n  },\n\n  MetaProperty(path) {\n    const meta = path.get(\"meta\");\n    const property = path.get(\"property\");\n    const {\n      scope\n    } = path;\n\n    if (meta.isIdentifier({\n      name: \"new\"\n    }) && property.isIdentifier({\n      name: \"target\"\n    })) {\n      path.replaceWith(scope.buildUndefinedNode());\n    }\n  }\n\n}, _helperReplaceSupers.environmentVisitor]);\n\nconst innerReferencesVisitor = {\n  ReferencedIdentifier(path, state) {\n    if (path.scope.bindingIdentifierEquals(path.node.name, state.innerBinding)) {\n      state.needsClassRef = true;\n      path.node.name = state.classRef.name;\n    }\n  }\n\n};\n\nfunction replaceThisContext(path, ref, getSuperRef, file, isStaticBlock, constantSuper, innerBindingRef) {\n  var _state$classRef;\n\n  const state = {\n    classRef: ref,\n    needsClassRef: false,\n    innerBinding: innerBindingRef\n  };\n  const replacer = new _helperReplaceSupers.default({\n    methodPath: path,\n    constantSuper,\n    file,\n    refToPreserve: ref,\n    getSuperRef,\n\n    getObjectRef() {\n      state.needsClassRef = true;\n      return isStaticBlock || path.node.static ? ref : _core.types.memberExpression(ref, _core.types.identifier(\"prototype\"));\n    }\n\n  });\n  replacer.replace();\n\n  if (isStaticBlock || path.isProperty()) {\n    path.traverse(thisContextVisitor, state);\n  }\n\n  if ((_state$classRef = state.classRef) != null && _state$classRef.name && state.classRef.name !== (innerBindingRef == null ? void 0 : innerBindingRef.name)) {\n    path.traverse(innerReferencesVisitor, state);\n  }\n\n  return state.needsClassRef;\n}\n\nfunction buildFieldsInitNodes(ref, superRef, props, privateNamesMap, state, setPublicClassFields, privateFieldsAsProperties, constantSuper, innerBindingRef) {\n  let needsClassRef = false;\n  let injectSuperRef;\n  const staticNodes = [];\n  const instanceNodes = [];\n  const pureStaticNodes = [];\n  const getSuperRef = _core.types.isIdentifier(superRef) ? () => superRef : () => {\n    var _injectSuperRef;\n\n    (_injectSuperRef = injectSuperRef) != null ? _injectSuperRef : injectSuperRef = props[0].scope.generateUidIdentifierBasedOnNode(superRef);\n    return injectSuperRef;\n  };\n\n  for (const prop of props) {\n    prop.isClassProperty() && ts.assertFieldTransformed(prop);\n    const isStatic = prop.node.static;\n    const isInstance = !isStatic;\n    const isPrivate = prop.isPrivate();\n    const isPublic = !isPrivate;\n    const isField = prop.isProperty();\n    const isMethod = !isField;\n    const isStaticBlock = prop.isStaticBlock == null ? void 0 : prop.isStaticBlock();\n\n    if (isStatic || isMethod && isPrivate || isStaticBlock) {\n      const replaced = replaceThisContext(prop, ref, getSuperRef, state, isStaticBlock, constantSuper, innerBindingRef);\n      needsClassRef = needsClassRef || replaced;\n    }\n\n    switch (true) {\n      case isStaticBlock:\n        staticNodes.push(_core.template.statement.ast`(() => ${_core.types.blockStatement(prop.node.body)})()`);\n        break;\n\n      case isStatic && isPrivate && isField && privateFieldsAsProperties:\n        needsClassRef = true;\n        staticNodes.push(buildPrivateFieldInitLoose(_core.types.cloneNode(ref), prop, privateNamesMap));\n        break;\n\n      case isStatic && isPrivate && isField && !privateFieldsAsProperties:\n        needsClassRef = true;\n        staticNodes.push(buildPrivateStaticFieldInitSpec(prop, privateNamesMap));\n        break;\n\n      case isStatic && isPublic && isField && setPublicClassFields:\n        needsClassRef = true;\n        staticNodes.push(buildPublicFieldInitLoose(_core.types.cloneNode(ref), prop));\n        break;\n\n      case isStatic && isPublic && isField && !setPublicClassFields:\n        needsClassRef = true;\n        staticNodes.push(buildPublicFieldInitSpec(_core.types.cloneNode(ref), prop, state));\n        break;\n\n      case isInstance && isPrivate && isField && privateFieldsAsProperties:\n        instanceNodes.push(buildPrivateFieldInitLoose(_core.types.thisExpression(), prop, privateNamesMap));\n        break;\n\n      case isInstance && isPrivate && isField && !privateFieldsAsProperties:\n        instanceNodes.push(buildPrivateInstanceFieldInitSpec(_core.types.thisExpression(), prop, privateNamesMap, state));\n        break;\n\n      case isInstance && isPrivate && isMethod && privateFieldsAsProperties:\n        instanceNodes.unshift(buildPrivateMethodInitLoose(_core.types.thisExpression(), prop, privateNamesMap));\n        pureStaticNodes.push(buildPrivateMethodDeclaration(prop, privateNamesMap, privateFieldsAsProperties));\n        break;\n\n      case isInstance && isPrivate && isMethod && !privateFieldsAsProperties:\n        instanceNodes.unshift(buildPrivateInstanceMethodInitSpec(_core.types.thisExpression(), prop, privateNamesMap, state));\n        pureStaticNodes.push(buildPrivateMethodDeclaration(prop, privateNamesMap, privateFieldsAsProperties));\n        break;\n\n      case isStatic && isPrivate && isMethod && !privateFieldsAsProperties:\n        needsClassRef = true;\n        staticNodes.unshift(buildPrivateStaticFieldInitSpec(prop, privateNamesMap));\n        pureStaticNodes.push(buildPrivateMethodDeclaration(prop, privateNamesMap, privateFieldsAsProperties));\n        break;\n\n      case isStatic && isPrivate && isMethod && privateFieldsAsProperties:\n        needsClassRef = true;\n        staticNodes.unshift(buildPrivateStaticMethodInitLoose(_core.types.cloneNode(ref), prop, state, privateNamesMap));\n        pureStaticNodes.push(buildPrivateMethodDeclaration(prop, privateNamesMap, privateFieldsAsProperties));\n        break;\n\n      case isInstance && isPublic && isField && setPublicClassFields:\n        instanceNodes.push(buildPublicFieldInitLoose(_core.types.thisExpression(), prop));\n        break;\n\n      case isInstance && isPublic && isField && !setPublicClassFields:\n        instanceNodes.push(buildPublicFieldInitSpec(_core.types.thisExpression(), prop, state));\n        break;\n\n      default:\n        throw new Error(\"Unreachable.\");\n    }\n  }\n\n  return {\n    staticNodes: staticNodes.filter(Boolean),\n    instanceNodes: instanceNodes.filter(Boolean),\n    pureStaticNodes: pureStaticNodes.filter(Boolean),\n\n    wrapClass(path) {\n      for (const prop of props) {\n        prop.remove();\n      }\n\n      if (injectSuperRef) {\n        path.scope.push({\n          id: _core.types.cloneNode(injectSuperRef)\n        });\n        path.set(\"superClass\", _core.types.assignmentExpression(\"=\", injectSuperRef, path.node.superClass));\n      }\n\n      if (!needsClassRef) return path;\n\n      if (path.isClassExpression()) {\n        path.scope.push({\n          id: ref\n        });\n        path.replaceWith(_core.types.assignmentExpression(\"=\", _core.types.cloneNode(ref), path.node));\n      } else if (!path.node.id) {\n        path.node.id = ref;\n      }\n\n      return path;\n    }\n\n  };\n}"],"file":"fields.js"}