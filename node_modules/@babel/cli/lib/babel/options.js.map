{"version":3,"sources":["../../../../../../node_modules/@babel/cli/lib/babel/options.js"],"names":["Object","value","exports","data","require","_fs","_commander","_core","_glob","errors","filenames","files","globbed","Array","filename","console","opts","babelOptions","presets","plugins","rootMode","configFile","envName","sourceType","ignore","only","retainLines","compact","minified","auxiliaryCommentBefore","auxiliaryCommentAfter","sourceMaps","sourceFileName","sourceRoot","babelrc","highlightCode","comments","moduleRoot","moduleIds","moduleId","cliOptions","extensions","keepFileExtension","outFileExtension","watch","skipInitialBuild","outFile","outDir","relative","copyFiles","copyIgnored","includeDotfiles","verbose","quiet","deleteDirOnStart","sourceMapTarget","val","values","previousValue"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = parseArgv;\n\nfunction _fs() {\n  const data = require(\"fs\");\n\n  _fs = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _commander() {\n  const data = require(\"commander\");\n\n  _commander = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _core() {\n  const data = require(\"@babel/core\");\n\n  _core = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _glob() {\n  const data = require(\"glob\");\n\n  _glob = function () {\n    return data;\n  };\n\n  return data;\n}\n\n_commander().option(\"-f, --filename [filename]\", \"The filename to use when reading from stdin. This will be used in source-maps, errors etc.\");\n\n_commander().option(\"--presets [list]\", \"A comma-separated list of preset names.\", collect);\n\n_commander().option(\"--plugins [list]\", \"A comma-separated list of plugin names.\", collect);\n\n_commander().option(\"--config-file [path]\", \"Path to a .babelrc file to use.\");\n\n_commander().option(\"--env-name [name]\", \"The name of the 'env' to use when loading configs and plugins. \" + \"Defaults to the value of BABEL_ENV, or else NODE_ENV, or else 'development'.\");\n\n_commander().option(\"--root-mode [mode]\", \"The project-root resolution mode. \" + \"One of 'root' (the default), 'upward', or 'upward-optional'.\");\n\n_commander().option(\"--source-type [script|module]\", \"\");\n\n_commander().option(\"--no-babelrc\", \"Whether or not to look up .babelrc and .babelignore files.\");\n\n_commander().option(\"--ignore [list]\", \"List of glob paths to **not** compile.\", collect);\n\n_commander().option(\"--only [list]\", \"List of glob paths to **only** compile.\", collect);\n\n_commander().option(\"--no-highlight-code\", \"Enable or disable ANSI syntax highlighting of code frames. (on by default)\");\n\n_commander().option(\"--no-comments\", \"Write comments to generated output. (true by default)\");\n\n_commander().option(\"--retain-lines\", \"Retain line numbers. This will result in really ugly code.\");\n\n_commander().option(\"--compact [true|false|auto]\", \"Do not include superfluous whitespace characters and line terminators.\", booleanify);\n\n_commander().option(\"--minified\", \"Save as many bytes when printing. (false by default)\");\n\n_commander().option(\"--auxiliary-comment-before [string]\", \"Print a comment before any injected non-user code.\");\n\n_commander().option(\"--auxiliary-comment-after [string]\", \"Print a comment after any injected non-user code.\");\n\n_commander().option(\"-s, --source-maps [true|false|inline|both]\", \"\", booleanify);\n\n_commander().option(\"--source-map-target [string]\", \"Set `file` on returned source map.\");\n\n_commander().option(\"--source-file-name [string]\", \"Set `sources[0]` on returned source map.\");\n\n_commander().option(\"--source-root [filename]\", \"The root from which all sources are relative.\");\n\n{\n  _commander().option(\"--module-root [filename]\", \"Optional prefix for the AMD module formatter that will be prepended to the filename on module definitions.\");\n\n  _commander().option(\"-M, --module-ids\", \"Insert an explicit id for modules.\");\n\n  _commander().option(\"--module-id [string]\", \"Specify a custom name for module ids.\");\n}\n\n_commander().option(\"-x, --extensions [extensions]\", \"List of extensions to compile when a directory has been the input. [\" + _core().DEFAULT_EXTENSIONS.join() + \"]\", collect);\n\n_commander().option(\"--keep-file-extension\", \"Preserve the file extensions of the input files.\");\n\n_commander().option(\"-w, --watch\", \"Recompile files on changes.\");\n\n_commander().option(\"--skip-initial-build\", \"Do not compile files before watching.\");\n\n_commander().option(\"-o, --out-file [out]\", \"Compile all input files into a single file.\");\n\n_commander().option(\"-d, --out-dir [out]\", \"Compile an input directory of modules into an output directory.\");\n\n_commander().option(\"--relative\", \"Compile into an output directory relative to input directory or file. Requires --out-dir [out]\");\n\n_commander().option(\"-D, --copy-files\", \"When compiling a directory copy over non-compilable files.\");\n\n_commander().option(\"--include-dotfiles\", \"Include dotfiles when compiling and copying non-compilable files.\");\n\n_commander().option(\"--no-copy-ignored\", \"Exclude ignored files when copying non-compilable files.\");\n\n_commander().option(\"--verbose\", \"Log everything. This option conflicts with --quiet\");\n\n_commander().option(\"--quiet\", \"Don't log anything. This option conflicts with --verbose\");\n\n_commander().option(\"--delete-dir-on-start\", \"Delete the out directory before compilation.\");\n\n_commander().option(\"--out-file-extension [string]\", \"Use a specific extension for the output files\");\n\n_commander().version(\"7.15.4\" + \" (@babel/core \" + _core().version + \")\");\n\n_commander().usage(\"[options] <files ...>\");\n\n_commander().action(() => {});\n\nfunction parseArgv(args) {\n  _commander().parse(args);\n\n  const errors = [];\n\n  let filenames = _commander().args.reduce(function (globbed, input) {\n    let files = _glob().sync(input);\n\n    if (!files.length) files = [input];\n    globbed.push(...files);\n    return globbed;\n  }, []);\n\n  filenames = Array.from(new Set(filenames));\n  filenames.forEach(function (filename) {\n    if (!_fs().existsSync(filename)) {\n      errors.push(filename + \" does not exist\");\n    }\n  });\n\n  if (_commander().outDir && !filenames.length) {\n    errors.push(\"--out-dir requires filenames\");\n  }\n\n  if (_commander().outFile && _commander().outDir) {\n    errors.push(\"--out-file and --out-dir cannot be used together\");\n  }\n\n  if (_commander().relative && !_commander().outDir) {\n    errors.push(\"--relative requires --out-dir usage\");\n  }\n\n  if (_commander().watch) {\n    if (!_commander().outFile && !_commander().outDir) {\n      errors.push(\"--watch requires --out-file or --out-dir\");\n    }\n\n    if (!filenames.length) {\n      errors.push(\"--watch requires filenames\");\n    }\n  }\n\n  if (_commander().skipInitialBuild && !_commander().watch) {\n    errors.push(\"--skip-initial-build requires --watch\");\n  }\n\n  if (_commander().deleteDirOnStart && !_commander().outDir) {\n    errors.push(\"--delete-dir-on-start requires --out-dir\");\n  }\n\n  if (_commander().verbose && _commander().quiet) {\n    errors.push(\"--verbose and --quiet cannot be used together\");\n  }\n\n  if (!_commander().outDir && filenames.length === 0 && typeof _commander().filename !== \"string\" && _commander().babelrc !== false) {\n    errors.push(\"stdin compilation requires either -f/--filename [filename] or --no-babelrc\");\n  }\n\n  if (_commander().keepFileExtension && _commander().outFileExtension) {\n    errors.push(\"--out-file-extension cannot be used with --keep-file-extension\");\n  }\n\n  if (errors.length) {\n    console.error(\"babel:\");\n    errors.forEach(function (e) {\n      console.error(\"  \" + e);\n    });\n    return null;\n  }\n\n  const opts = _commander().opts();\n\n  const babelOptions = {\n    presets: opts.presets,\n    plugins: opts.plugins,\n    rootMode: opts.rootMode,\n    configFile: opts.configFile,\n    envName: opts.envName,\n    sourceType: opts.sourceType,\n    ignore: opts.ignore,\n    only: opts.only,\n    retainLines: opts.retainLines,\n    compact: opts.compact,\n    minified: opts.minified,\n    auxiliaryCommentBefore: opts.auxiliaryCommentBefore,\n    auxiliaryCommentAfter: opts.auxiliaryCommentAfter,\n    sourceMaps: opts.sourceMaps,\n    sourceFileName: opts.sourceFileName,\n    sourceRoot: opts.sourceRoot,\n    babelrc: opts.babelrc === true ? undefined : opts.babelrc,\n    highlightCode: opts.highlightCode === true ? undefined : opts.highlightCode,\n    comments: opts.comments === true ? undefined : opts.comments\n  };\n  {\n    Object.assign(babelOptions, {\n      moduleRoot: opts.moduleRoot,\n      moduleIds: opts.moduleIds,\n      moduleId: opts.moduleId\n    });\n  }\n\n  for (const key of Object.keys(babelOptions)) {\n    if (babelOptions[key] === undefined) {\n      delete babelOptions[key];\n    }\n  }\n\n  return {\n    babelOptions,\n    cliOptions: {\n      filename: opts.filename,\n      filenames,\n      extensions: opts.extensions,\n      keepFileExtension: opts.keepFileExtension,\n      outFileExtension: opts.outFileExtension,\n      watch: opts.watch,\n      skipInitialBuild: opts.skipInitialBuild,\n      outFile: opts.outFile,\n      outDir: opts.outDir,\n      relative: opts.relative,\n      copyFiles: opts.copyFiles,\n      copyIgnored: opts.copyFiles && opts.copyIgnored,\n      includeDotfiles: opts.includeDotfiles,\n      verbose: opts.verbose,\n      quiet: opts.quiet,\n      deleteDirOnStart: opts.deleteDirOnStart,\n      sourceMapTarget: opts.sourceMapTarget\n    }\n  };\n}\n\nfunction booleanify(val) {\n  if (val === \"true\" || val == 1) {\n    return true;\n  }\n\n  if (val === \"false\" || val == 0 || !val) {\n    return false;\n  }\n\n  return val;\n}\n\nfunction collect(value, previousValue) {\n  if (typeof value !== \"string\") return previousValue;\n  const values = value.split(\",\");\n\n  if (previousValue) {\n    previousValue.push(...values);\n    return previousValue;\n  }\n\n  return values;\n}"],"file":"options.js"}