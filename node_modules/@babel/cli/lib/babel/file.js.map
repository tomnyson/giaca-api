{"version":3,"sources":["../../../../../../node_modules/@babel/cli/lib/babel/file.js"],"names":["Object","value","exports","data","require","_convertSourceMap","_sourceMap","_slash","_path","_fs","util","info","gen","reject","resolve","Promise","self","args","fn","asyncGeneratorStep","_next","_ref","_asyncToGenerator","babelOptions","map","file","cliOptions","sourceRoot","code","offset","result","consumer","sources","mapping","generated","line","column","generatedColumn","source","original","originalColumn","content","buildResult","v","w","process","recursive","mapLoc","JSON","chunk","_stdin","readStdin","res","sourceFileName","output","_walk","_filenames","filenames","stat","dirname","results","_ref2","sourceFilename","sourceMaps","console","_files","walk","chokidar","disableGlobbing","persistent","ignoreInitial","awaitWriteFinish","stabilityThreshold","pollInterval","type","err","files","stdin"],"mappings":"AAAA;;AAEAA,MAAM,CAANA,cAAAA,CAAAA,OAAAA,EAAAA,YAAAA,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7CD;AAGAE,OAAO,CAAPA,OAAAA,GAAAA,QAAAA;;AAEA,SAAA,iBAAA,GAA6B;AAC3B,QAAMC,IAAI,GAAGC,OAAO,CAApB,oBAAoB,CAApB;;AAEAC,EAAAA,iBAAiB,GAAG,YAAY;AAC9B,WAAA,IAAA;AADFA,GAAAA;;AAIA,SAAA,IAAA;AACD;;AAED,SAAA,UAAA,GAAsB;AACpB,QAAMF,IAAI,GAAGC,OAAO,CAApB,YAAoB,CAApB;;AAEAE,EAAAA,UAAU,GAAG,YAAY;AACvB,WAAA,IAAA;AADFA,GAAAA;;AAIA,SAAA,IAAA;AACD;;AAED,SAAA,MAAA,GAAkB;AAChB,QAAMH,IAAI,GAAGC,OAAO,CAApB,OAAoB,CAApB;;AAEAG,EAAAA,MAAM,GAAG,YAAY;AACnB,WAAA,IAAA;AADFA,GAAAA;;AAIA,SAAA,IAAA;AACD;;AAED,SAAA,KAAA,GAAiB;AACf,QAAMJ,IAAI,GAAGC,OAAO,CAApB,MAAoB,CAApB;;AAEAI,EAAAA,KAAK,GAAG,YAAY;AAClB,WAAA,IAAA;AADFA,GAAAA;;AAIA,SAAA,IAAA;AACD;;AAED,SAAA,GAAA,GAAe;AACb,QAAML,IAAI,GAAGC,OAAO,CAApB,IAAoB,CAApB;;AAEAK,EAAAA,GAAG,GAAG,YAAY;AAChB,WAAA,IAAA;AADFA,GAAAA;;AAIA,SAAA,IAAA;AACD;;AAED,IAAIC,IAAI,GAAGN,OAAO,CAAlB,QAAkB,CAAlB;;AAEA,SAAA,kBAAA,CAAA,GAAA,EAAA,OAAA,EAAA,MAAA,EAAA,KAAA,EAAA,MAAA,EAAA,GAAA,EAAA,GAAA,EAA2E;AACzE,MAAI;AACF,QAAIO,IAAI,GAAGC,GAAG,CAAHA,GAAG,CAAHA,CAAX,GAAWA,CAAX;AACA,QAAIX,KAAK,GAAGU,IAAI,CAAhB,KAAA;AAFF,GAAA,CAGE,OAAA,KAAA,EAAc;AACdE,IAAAA,MAAM,CAANA,KAAM,CAANA;AACA;AACD;;AAED,MAAIF,IAAI,CAAR,IAAA,EAAe;AACbG,IAAAA,OAAO,CAAPA,KAAO,CAAPA;AADF,GAAA,MAEO;AACLC,IAAAA,OAAO,CAAPA,OAAAA,CAAAA,KAAAA,EAAAA,IAAAA,CAAAA,KAAAA,EAAAA,MAAAA;AACD;AACF;;AAED,SAAA,iBAAA,CAAA,EAAA,EAA+B;AAC7B,SAAO,YAAY;AACjB,QAAIC,IAAI,GAAR,IAAA;AAAA,QACIC,IAAI,GADR,SAAA;AAEA,WAAO,IAAA,OAAA,CAAY,UAAA,OAAA,EAAA,MAAA,EAA2B;AAC5C,UAAIL,GAAG,GAAGM,EAAE,CAAFA,KAAAA,CAAAA,IAAAA,EAAV,IAAUA,CAAV;;AAEA,eAAA,KAAA,CAAA,KAAA,EAAsB;AACpBC,QAAAA,kBAAkB,CAAA,GAAA,EAAA,OAAA,EAAA,MAAA,EAAA,KAAA,EAAA,MAAA,EAAA,MAAA,EAAlBA,KAAkB,CAAlBA;AACD;;AAED,eAAA,MAAA,CAAA,GAAA,EAAqB;AACnBA,QAAAA,kBAAkB,CAAA,GAAA,EAAA,OAAA,EAAA,MAAA,EAAA,KAAA,EAAA,MAAA,EAAA,OAAA,EAAlBA,GAAkB,CAAlBA;AACD;;AAEDC,MAAAA,KAAK,CAALA,SAAK,CAALA;AAXF,KAAO,CAAP;AAHF,GAAA;AAiBD;;AAED,SAAA,QAAA,CAAA,EAAA,EAAsB;AACpB,SAAOC,IAAI,CAAJA,KAAAA,CAAAA,IAAAA,EAAP,SAAOA,CAAP;AACD;;AAED,SAAA,IAAA,GAAgB;AACdA,EAAAA,IAAI,GAAGC,iBAAiB,CAAC,WAAW;AAAA,IAAA,UAAA;AAElCC,IAAAA;AAFkC,GAAX,EAGtB;AACD,aAAA,WAAA,CAAA,WAAA,EAAkC;AAChC,YAAMC,GAAG,GAAG,KAAKlB,UAAU,GAAf,kBAAA,EAAsC;AAChDmB,QAAAA,IAAI,EAAEC,UAAU,CAAVA,eAAAA,IAA8BlB,KAAK,GAALA,QAAAA,CAAiBkB,UAAU,CAAVA,OAAAA,IAA/CA,EAA8BlB,CAA9BkB,IAD0C,QAAA;AAEhDC,QAAAA,UAAU,EAAEJ,YAAY,CAACI;AAFuB,OAAtC,CAAZ;AAIA,UAAIC,IAAI,GAAR,EAAA;AACA,UAAIC,MAAM,GAAV,CAAA;;AAEA,WAAK,MAAL,MAAA,IAAA,WAAA,EAAkC;AAChC,YAAI,CAAJ,MAAA,EAAa;AACbD,QAAAA,IAAI,IAAIE,MAAM,CAANA,IAAAA,GAARF,IAAAA;;AAEA,YAAIE,MAAM,CAAV,GAAA,EAAgB;AACd,gBAAMC,QAAQ,GAAG,KAAKzB,UAAU,GAAf,iBAAA,EAAqCwB,MAAM,CAA5D,GAAiB,CAAjB;AACA,gBAAME,OAAO,GAAG,IAAhB,GAAgB,EAAhB;AACAD,UAAAA,QAAQ,CAARA,WAAAA,CAAqB,UAAA,OAAA,EAAmB;AACtC,gBAAIE,OAAO,CAAPA,MAAAA,IAAJ,IAAA,EAA4BD,OAAO,CAAPA,GAAAA,CAAYC,OAAO,CAAnBD,MAAAA;AAC5BR,YAAAA,GAAG,CAAHA,UAAAA,CAAe;AACbU,cAAAA,SAAS,EAAE;AACTC,gBAAAA,IAAI,EAAEF,OAAO,CAAPA,aAAAA,GADG,MAAA;AAETG,gBAAAA,MAAM,EAAEH,OAAO,CAACI;AAFP,eADE;AAKbC,cAAAA,MAAM,EAAEL,OAAO,CALF,MAAA;AAMbM,cAAAA,QAAQ,EAAEN,OAAO,CAAPA,MAAAA,IAAAA,IAAAA,GAAAA,IAAAA,GAAgC;AACxCE,gBAAAA,IAAI,EAAEF,OAAO,CAD2B,YAAA;AAExCG,gBAAAA,MAAM,EAAEH,OAAO,CAACO;AAFwB;AAN7B,aAAfhB;AAFFO,WAAAA;AAcAC,UAAAA,OAAO,CAAPA,OAAAA,CAAgBM,MAAM,IAAI;AACxB,kBAAMG,OAAO,GAAGV,QAAQ,CAARA,gBAAAA,CAAAA,MAAAA,EAAhB,IAAgBA,CAAhB;;AAEA,gBAAIU,OAAO,KAAX,IAAA,EAAsB;AACpBjB,cAAAA,GAAG,CAAHA,gBAAAA,CAAAA,MAAAA,EAAAA,OAAAA;AACD;AALHQ,WAAAA;AAOAH,UAAAA,MAAM,GAAGD,IAAI,CAAJA,KAAAA,CAAAA,IAAAA,EAAAA,MAAAA,GAATC,CAAAA;AACD;AACF;;AAED,UAAIN,YAAY,CAAZA,UAAAA,KAAAA,QAAAA,IAAwC,CAACG,UAAU,CAAX,OAAA,IAAuBH,YAAY,CAA/E,UAAA,EAA4F;AAC1FK,QAAAA,IAAI,IAAI,OAAOvB,iBAAiB,GAAjBA,UAAAA,CAAAA,GAAAA,EAAfuB,SAAevB,EAAfuB;AACD;;AAED,aAAO;AACLJ,QAAAA,GAAG,EADE,GAAA;AAELI,QAAAA,IAAI,EAAEA;AAFD,OAAP;AAID;;AAED,aAAA,MAAA,CAAA,WAAA,EAA6B;AAC3B,YAAME,MAAM,GAAGY,WAAW,CAA1B,WAA0B,CAA1B;;AAEA,UAAIhB,UAAU,CAAd,OAAA,EAAwB;AACtB,SAAC,CAAC,CAAA,CAAA,EAAA,CAAA,MAAWiB,CAAC,GAAGA,CAAC,CAADA,KAAAA,CAAJA,GAAIA,CAAJA,EAAkBC,CAAC,GAAGA,CAAC,CAADA,KAAAA,CAAtBD,GAAsBC,CAAtBD,EAAoC,CAACA,CAAC,CAAF,CAAE,CAAF,GAAQ,CAACC,CAAC,CAAV,CAAU,CAAV,IAAiBD,CAAC,CAADA,CAAC,CAADA,IAAQC,CAAC,CAATD,CAAS,CAATA,IAAgB,CAACA,CAAC,CAAF,CAAE,CAAF,IAAS,CAACC,CAAC,CAA5F,CAA4F,CAA3F,CAAD,EAAkGC,OAAO,CAAPA,QAAAA,CAAlG,IAAA,EAAA,OAAA,IAAoIpC,GAAG,GAAvI,SAAA,GAAsJL,OAAO,CAAPA,UAAO,CAAPA,CAAvJ,IAAA,EAAiLI,KAAK,GAALA,OAAAA,CAAgBkB,UAAU,CAA3M,OAAiLlB,CAAjL,EAAsN;AACpNsC,UAAAA,SAAS,EAAE;AADyM,SAAtN;;AAIA,YAAIvB,YAAY,CAAZA,UAAAA,IAA2BA,YAAY,CAAZA,UAAAA,KAA/B,QAAA,EAAqE;AACnE,gBAAMwB,MAAM,GAAGrB,UAAU,CAAVA,OAAAA,GAAf,MAAA;AACAI,UAAAA,MAAM,CAANA,IAAAA,GAAcpB,IAAI,CAAJA,mBAAAA,CAAyBoB,MAAM,CAA/BpB,IAAAA,EAAdoB,MAAcpB,CAAdoB;;AAEArB,UAAAA,GAAG,GAAHA,aAAAA,CAAAA,MAAAA,EAA4BuC,IAAI,CAAJA,SAAAA,CAAelB,MAAM,CAAjDrB,GAA4BuC,CAA5BvC;AACD;;AAEDA,QAAAA,GAAG,GAAHA,aAAAA,CAAoBiB,UAAU,CAA9BjB,OAAAA,EAAwCqB,MAAM,CAA9CrB,IAAAA;AAZF,OAAA,MAaO;AACLoC,QAAAA,OAAO,CAAPA,MAAAA,CAAAA,KAAAA,CAAqBf,MAAM,CAANA,IAAAA,GAArBe,IAAAA;AACD;AACF;;AAED,aAAA,SAAA,GAAqB;AACnB,aAAO,IAAA,OAAA,CAAY,CAAA,OAAA,EAAA,MAAA,KAAqB;AACtC,YAAIjB,IAAI,GAAR,EAAA;AACAiB,QAAAA,OAAO,CAAPA,KAAAA,CAAAA,WAAAA,CAAAA,MAAAA;AACAA,QAAAA,OAAO,CAAPA,KAAAA,CAAAA,EAAAA,CAAAA,UAAAA,EAA6B,YAAY;AACvC,gBAAMI,KAAK,GAAGJ,OAAO,CAAPA,KAAAA,CAAd,IAAcA,EAAd;AACA,cAAII,KAAK,KAAT,IAAA,EAAoBrB,IAAI,IAAJA,KAAAA;AAFtBiB,SAAAA;AAIAA,QAAAA,OAAO,CAAPA,KAAAA,CAAAA,EAAAA,CAAAA,KAAAA,EAAwB,YAAY;AAClC/B,UAAAA,OAAO,CAAPA,IAAO,CAAPA;AADF+B,SAAAA;AAGAA,QAAAA,OAAO,CAAPA,KAAAA,CAAAA,EAAAA,CAAAA,OAAAA,EAAAA,MAAAA;AAVF,OAAO,CAAP;AAYD;;AAED,aAAA,KAAA,GAAiB;AACf,aAAOK,MAAM,CAANA,KAAAA,CAAAA,IAAAA,EAAP,SAAOA,CAAP;AACD;;AAED,aAAA,MAAA,GAAkB;AAChBA,MAAAA,MAAM,GAAG5B,iBAAiB,CAAC,aAAa;AACtC,cAAMM,IAAI,GAAG,MAAMuB,SAAnB,EAAA;AACA,cAAMC,GAAG,GAAG,MAAM,IAAI,CAAJ,SAAA,CAAe1B,UAAU,CAAzB,QAAA,EAAA,IAAA,EAA0C,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,YAAA,EAAgC;AAC1F2B,UAAAA,cAAc,EAAE;AAD0E,SAAhC,CAA1C,CAAlB;AAGAC,QAAAA,MAAM,CAAC,CAAPA,GAAO,CAAD,CAANA;AALFJ,OAA0B,CAA1BA;AAOA,aAAOA,MAAM,CAANA,KAAAA,CAAAA,IAAAA,EAAP,SAAOA,CAAP;AACD;;AAED,aAAA,IAAA,CAAA,GAAA,EAAmB;AACjB,aAAOK,KAAK,CAALA,KAAAA,CAAAA,IAAAA,EAAP,SAAOA,CAAP;AACD;;AAED,aAAA,KAAA,GAAiB;AACfA,MAAAA,KAAK,GAAGjC,iBAAiB,CAAC,WAAA,SAAA,EAAsB;AAC9C,cAAMkC,UAAU,GAAhB,EAAA;AACAC,QAAAA,SAAS,CAATA,OAAAA,CAAkB,UAAA,QAAA,EAAoB;AACpC,cAAI,CAAChD,GAAG,GAAHA,UAAAA,CAAL,QAAKA,CAAL,EAAiC;;AAEjC,gBAAMiD,IAAI,GAAGjD,GAAG,GAAHA,QAAAA,CAAb,QAAaA,CAAb;;AAEA,cAAIiD,IAAI,CAAR,WAAIA,EAAJ,EAAwB;AACtB,kBAAMC,OAAO,GAAb,QAAA;AACAjD,YAAAA,IAAI,CAAJA,oBAAAA,CAAAA,QAAAA,EAAoCgB,UAAU,CAA9ChB,eAAAA,EAAgEgB,UAAU,CAA1EhB,UAAAA,EAAAA,OAAAA,CAA+F,UAAA,QAAA,EAAoB;AACjH8C,cAAAA,UAAU,CAAVA,IAAAA,CAAgBhD,KAAK,GAALA,IAAAA,CAAAA,OAAAA,EAAhBgD,QAAgBhD,CAAhBgD;AADF9C,aAAAA;AAFF,WAAA,MAKO;AACL8C,YAAAA,UAAU,CAAVA,IAAAA,CAAAA,QAAAA;AACD;AAZHC,SAAAA;AAcA,cAAMG,OAAO,GAAG,MAAM,OAAO,CAAP,GAAA,CAAY,UAAU,CAAV,GAAA,CAAe,YAAY;AAC3D,cAAIC,KAAK,GAAGvC,iBAAiB,CAAC,WAAA,QAAA,EAAqB;AACjD,gBAAIwC,cAAc,GAAlB,QAAA;;AAEA,gBAAIpC,UAAU,CAAd,OAAA,EAAwB;AACtBoC,cAAAA,cAAc,GAAGtD,KAAK,GAALA,QAAAA,CAAiBA,KAAK,GAALA,OAAAA,CAAgBkB,UAAU,CAA3ClB,OAAiBA,CAAjBA,EAAjBsD,cAAiBtD,CAAjBsD;AACD;;AAEDA,YAAAA,cAAc,GAAGvD,MAAM,GAAvBuD,cAAuB,CAAvBA;;AAEA,gBAAI;AACF,qBAAO,MAAM,IAAI,CAAJ,OAAA,CAAA,QAAA,EAAuB,MAAM,CAAN,MAAA,CAAA,EAAA,EAAA,YAAA,EAAgC;AAClET,gBAAAA,cAAc,EADoD,cAAA;AAElEU,gBAAAA,UAAU,EAAExC,YAAY,CAAZA,UAAAA,KAAAA,QAAAA,GAAAA,IAAAA,GAA8CA,YAAY,CAACwC;AAFL,eAAhC,CAAvB,CAAb;AADF,aAAA,CAKE,OAAA,GAAA,EAAY;AACZ,kBAAI,CAACrC,UAAU,CAAf,KAAA,EAAuB;AACrB,sBAAA,GAAA;AACD;;AAEDsC,cAAAA,OAAO,CAAPA,KAAAA,CAAAA,GAAAA;AACA,qBAAA,IAAA;AACD;AArBH,WAA6B,CAA7B;;AAwBA,iBAAO,UAAA,GAAA,EAAe;AACpB,mBAAOH,KAAK,CAALA,KAAAA,CAAAA,IAAAA,EAAP,SAAOA,CAAP;AADF,WAAA;AAzBF,SAAiD,EAAf,CAAZ,CAAtB;AA6BAP,QAAAA,MAAM,CAANA,OAAM,CAANA;AA7CFC,OAAyB,CAAzBA;AA+CA,aAAOA,KAAK,CAALA,KAAAA,CAAAA,IAAAA,EAAP,SAAOA,CAAP;AACD;;AAED,aAAA,KAAA,CAAA,GAAA,EAAoB;AAClB,aAAOU,MAAM,CAANA,KAAAA,CAAAA,IAAAA,EAAP,SAAOA,CAAP;AACD;;AAED,aAAA,MAAA,GAAkB;AAChBA,MAAAA,MAAM,GAAG3C,iBAAiB,CAAC,WAAA,SAAA,EAAsB;AAC/C,YAAI,CAACI,UAAU,CAAf,gBAAA,EAAkC;AAChC,gBAAMwC,IAAI,CAAV,SAAU,CAAV;AACD;;AAED,YAAIxC,UAAU,CAAd,KAAA,EAAsB;AACpB,gBAAMyC,QAAQ,GAAGzD,IAAI,CAArB,eAAiBA,EAAjB;AACAyD,UAAAA,QAAQ,CAARA,KAAAA,CAAAA,SAAAA,EAA0B;AACxBC,YAAAA,eAAe,EADS,IAAA;AAExBC,YAAAA,UAAU,EAFc,IAAA;AAGxBC,YAAAA,aAAa,EAHW,IAAA;AAIxBC,YAAAA,gBAAgB,EAAE;AAChBC,cAAAA,kBAAkB,EADF,EAAA;AAEhBC,cAAAA,YAAY,EAAE;AAFE;AAJM,WAA1BN,EAAAA,EAAAA,CAAAA,KAAAA,EAQa,UAAA,IAAA,EAAA,QAAA,EAA0B;AACrC,gBAAI,CAACzD,IAAI,CAAJA,qBAAAA,CAAAA,QAAAA,EAAqCgB,UAAU,CAAhD,UAAChB,CAAD,IAAgE,CAAC+C,SAAS,CAATA,QAAAA,CAArE,QAAqEA,CAArE,EAAmG;AACjG;AACD;;AAED,gBAAIiB,IAAI,KAAJA,KAAAA,IAAkBA,IAAI,KAA1B,QAAA,EAAyC;AACvC,kBAAIhD,UAAU,CAAd,OAAA,EAAwB;AACtBsC,gBAAAA,OAAO,CAAPA,GAAAA,CAAYU,IAAI,GAAJA,GAAAA,GAAZV,QAAAA;AACD;;AAEDE,cAAAA,IAAI,CAAJA,SAAI,CAAJA,CAAAA,KAAAA,CAAsBS,GAAG,IAAI;AAC3BX,gBAAAA,OAAO,CAAPA,KAAAA,CAAAA,GAAAA;AADFE,eAAAA;AAGD;AArBHC,WAAAA;AAuBD;AA9BHF,OAA0B,CAA1BA;AAgCA,aAAOA,MAAM,CAANA,KAAAA,CAAAA,IAAAA,EAAP,SAAOA,CAAP;AACD;;AAED,QAAIvC,UAAU,CAAVA,SAAAA,CAAJ,MAAA,EAAiC;AAC/B,YAAMkD,KAAK,CAAClD,UAAU,CAAtB,SAAW,CAAX;AADF,KAAA,MAEO;AACL,YAAMmD,KAAN,EAAA;AACD;AA5MHxD,GAAwB,CAAxBA;AA8MA,SAAOA,IAAI,CAAJA,KAAAA,CAAAA,IAAAA,EAAP,SAAOA,CAAP;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nfunction _convertSourceMap() {\n  const data = require(\"convert-source-map\");\n\n  _convertSourceMap = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _sourceMap() {\n  const data = require(\"source-map\");\n\n  _sourceMap = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _slash() {\n  const data = require(\"slash\");\n\n  _slash = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _path() {\n  const data = require(\"path\");\n\n  _path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _fs() {\n  const data = require(\"fs\");\n\n  _fs = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar util = require(\"./util\");\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nfunction _default(_x) {\n  return _ref.apply(this, arguments);\n}\n\nfunction _ref() {\n  _ref = _asyncToGenerator(function* ({\n    cliOptions,\n    babelOptions\n  }) {\n    function buildResult(fileResults) {\n      const map = new (_sourceMap().SourceMapGenerator)({\n        file: cliOptions.sourceMapTarget || _path().basename(cliOptions.outFile || \"\") || \"stdout\",\n        sourceRoot: babelOptions.sourceRoot\n      });\n      let code = \"\";\n      let offset = 0;\n\n      for (const result of fileResults) {\n        if (!result) continue;\n        code += result.code + \"\\n\";\n\n        if (result.map) {\n          const consumer = new (_sourceMap().SourceMapConsumer)(result.map);\n          const sources = new Set();\n          consumer.eachMapping(function (mapping) {\n            if (mapping.source != null) sources.add(mapping.source);\n            map.addMapping({\n              generated: {\n                line: mapping.generatedLine + offset,\n                column: mapping.generatedColumn\n              },\n              source: mapping.source,\n              original: mapping.source == null ? null : {\n                line: mapping.originalLine,\n                column: mapping.originalColumn\n              }\n            });\n          });\n          sources.forEach(source => {\n            const content = consumer.sourceContentFor(source, true);\n\n            if (content !== null) {\n              map.setSourceContent(source, content);\n            }\n          });\n          offset = code.split(\"\\n\").length - 1;\n        }\n      }\n\n      if (babelOptions.sourceMaps === \"inline\" || !cliOptions.outFile && babelOptions.sourceMaps) {\n        code += \"\\n\" + _convertSourceMap().fromObject(map).toComment();\n      }\n\n      return {\n        map: map,\n        code: code\n      };\n    }\n\n    function output(fileResults) {\n      const result = buildResult(fileResults);\n\n      if (cliOptions.outFile) {\n        (((v, w) => (v = v.split(\".\"), w = w.split(\".\"), +v[0] > +w[0] || v[0] == w[0] && +v[1] >= +w[1]))(process.versions.node, \"10.12\") ? _fs().mkdirSync : require(\"make-dir\").sync)(_path().dirname(cliOptions.outFile), {\n          recursive: true\n        });\n\n        if (babelOptions.sourceMaps && babelOptions.sourceMaps !== \"inline\") {\n          const mapLoc = cliOptions.outFile + \".map\";\n          result.code = util.addSourceMappingUrl(result.code, mapLoc);\n\n          _fs().writeFileSync(mapLoc, JSON.stringify(result.map));\n        }\n\n        _fs().writeFileSync(cliOptions.outFile, result.code);\n      } else {\n        process.stdout.write(result.code + \"\\n\");\n      }\n    }\n\n    function readStdin() {\n      return new Promise((resolve, reject) => {\n        let code = \"\";\n        process.stdin.setEncoding(\"utf8\");\n        process.stdin.on(\"readable\", function () {\n          const chunk = process.stdin.read();\n          if (chunk !== null) code += chunk;\n        });\n        process.stdin.on(\"end\", function () {\n          resolve(code);\n        });\n        process.stdin.on(\"error\", reject);\n      });\n    }\n\n    function stdin() {\n      return _stdin.apply(this, arguments);\n    }\n\n    function _stdin() {\n      _stdin = _asyncToGenerator(function* () {\n        const code = yield readStdin();\n        const res = yield util.transform(cliOptions.filename, code, Object.assign({}, babelOptions, {\n          sourceFileName: \"stdin\"\n        }));\n        output([res]);\n      });\n      return _stdin.apply(this, arguments);\n    }\n\n    function walk(_x2) {\n      return _walk.apply(this, arguments);\n    }\n\n    function _walk() {\n      _walk = _asyncToGenerator(function* (filenames) {\n        const _filenames = [];\n        filenames.forEach(function (filename) {\n          if (!_fs().existsSync(filename)) return;\n\n          const stat = _fs().statSync(filename);\n\n          if (stat.isDirectory()) {\n            const dirname = filename;\n            util.readdirForCompilable(filename, cliOptions.includeDotfiles, cliOptions.extensions).forEach(function (filename) {\n              _filenames.push(_path().join(dirname, filename));\n            });\n          } else {\n            _filenames.push(filename);\n          }\n        });\n        const results = yield Promise.all(_filenames.map(function () {\n          var _ref2 = _asyncToGenerator(function* (filename) {\n            let sourceFilename = filename;\n\n            if (cliOptions.outFile) {\n              sourceFilename = _path().relative(_path().dirname(cliOptions.outFile), sourceFilename);\n            }\n\n            sourceFilename = _slash()(sourceFilename);\n\n            try {\n              return yield util.compile(filename, Object.assign({}, babelOptions, {\n                sourceFileName: sourceFilename,\n                sourceMaps: babelOptions.sourceMaps === \"inline\" ? true : babelOptions.sourceMaps\n              }));\n            } catch (err) {\n              if (!cliOptions.watch) {\n                throw err;\n              }\n\n              console.error(err);\n              return null;\n            }\n          });\n\n          return function (_x4) {\n            return _ref2.apply(this, arguments);\n          };\n        }()));\n        output(results);\n      });\n      return _walk.apply(this, arguments);\n    }\n\n    function files(_x3) {\n      return _files.apply(this, arguments);\n    }\n\n    function _files() {\n      _files = _asyncToGenerator(function* (filenames) {\n        if (!cliOptions.skipInitialBuild) {\n          yield walk(filenames);\n        }\n\n        if (cliOptions.watch) {\n          const chokidar = util.requireChokidar();\n          chokidar.watch(filenames, {\n            disableGlobbing: true,\n            persistent: true,\n            ignoreInitial: true,\n            awaitWriteFinish: {\n              stabilityThreshold: 50,\n              pollInterval: 10\n            }\n          }).on(\"all\", function (type, filename) {\n            if (!util.isCompilableExtension(filename, cliOptions.extensions) && !filenames.includes(filename)) {\n              return;\n            }\n\n            if (type === \"add\" || type === \"change\") {\n              if (cliOptions.verbose) {\n                console.log(type + \" \" + filename);\n              }\n\n              walk(filenames).catch(err => {\n                console.error(err);\n              });\n            }\n          });\n        }\n      });\n      return _files.apply(this, arguments);\n    }\n\n    if (cliOptions.filenames.length) {\n      yield files(cliOptions.filenames);\n    } else {\n      yield stdin();\n    }\n  });\n  return _ref.apply(this, arguments);\n}"],"file":"file.js"}