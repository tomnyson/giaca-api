{"version":3,"sources":["../../../../../../../node_modules/@babel/helper-define-polyfill-provider/node_modules/debug/src/common.js"],"names":["createDebug","require","Object","key","env","hash","i","namespace","Math","enableOverride","debug","self","curr","Number","ms","prevTime","args","index","match","formatter","val","logFn","enumerable","configurable","get","namespacesCache","enabledCache","set","v","newDebug","split","len","namespaces","name","regexp","console","module"],"mappings":"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","sourcesContent":["/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\nfunction setup(env) {\n  createDebug.debug = createDebug;\n  createDebug.default = createDebug;\n  createDebug.coerce = coerce;\n  createDebug.disable = disable;\n  createDebug.enable = enable;\n  createDebug.enabled = enabled;\n  createDebug.humanize = require('ms');\n  createDebug.destroy = destroy;\n  Object.keys(env).forEach(key => {\n    createDebug[key] = env[key];\n  });\n  /**\n  * The currently active debug mode names, and names to skip.\n  */\n\n  createDebug.names = [];\n  createDebug.skips = [];\n  /**\n  * Map of special \"%n\" handling functions, for the debug \"format\" argument.\n  *\n  * Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n  */\n\n  createDebug.formatters = {};\n  /**\n  * Selects a color for a debug namespace\n  * @param {String} namespace The namespace string for the for the debug instance to be colored\n  * @return {Number|String} An ANSI color code for the given namespace\n  * @api private\n  */\n\n  function selectColor(namespace) {\n    let hash = 0;\n\n    for (let i = 0; i < namespace.length; i++) {\n      hash = (hash << 5) - hash + namespace.charCodeAt(i);\n      hash |= 0; // Convert to 32bit integer\n    }\n\n    return createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n  }\n\n  createDebug.selectColor = selectColor;\n  /**\n  * Create a debugger with the given `namespace`.\n  *\n  * @param {String} namespace\n  * @return {Function}\n  * @api public\n  */\n\n  function createDebug(namespace) {\n    let prevTime;\n    let enableOverride = null;\n    let namespacesCache;\n    let enabledCache;\n\n    function debug(...args) {\n      // Disabled?\n      if (!debug.enabled) {\n        return;\n      }\n\n      const self = debug; // Set `diff` timestamp\n\n      const curr = Number(new Date());\n      const ms = curr - (prevTime || curr);\n      self.diff = ms;\n      self.prev = prevTime;\n      self.curr = curr;\n      prevTime = curr;\n      args[0] = createDebug.coerce(args[0]);\n\n      if (typeof args[0] !== 'string') {\n        // Anything else let's inspect with %O\n        args.unshift('%O');\n      } // Apply any `formatters` transformations\n\n\n      let index = 0;\n      args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n        // If we encounter an escaped % then don't increase the array index\n        if (match === '%%') {\n          return '%';\n        }\n\n        index++;\n        const formatter = createDebug.formatters[format];\n\n        if (typeof formatter === 'function') {\n          const val = args[index];\n          match = formatter.call(self, val); // Now we need to remove `args[index]` since it's inlined in the `format`\n\n          args.splice(index, 1);\n          index--;\n        }\n\n        return match;\n      }); // Apply env-specific formatting (colors, etc.)\n\n      createDebug.formatArgs.call(self, args);\n      const logFn = self.log || createDebug.log;\n      logFn.apply(self, args);\n    }\n\n    debug.namespace = namespace;\n    debug.useColors = createDebug.useColors();\n    debug.color = createDebug.selectColor(namespace);\n    debug.extend = extend;\n    debug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n    Object.defineProperty(debug, 'enabled', {\n      enumerable: true,\n      configurable: false,\n      get: () => {\n        if (enableOverride !== null) {\n          return enableOverride;\n        }\n\n        if (namespacesCache !== createDebug.namespaces) {\n          namespacesCache = createDebug.namespaces;\n          enabledCache = createDebug.enabled(namespace);\n        }\n\n        return enabledCache;\n      },\n      set: v => {\n        enableOverride = v;\n      }\n    }); // Env-specific initialization logic for debug instances\n\n    if (typeof createDebug.init === 'function') {\n      createDebug.init(debug);\n    }\n\n    return debug;\n  }\n\n  function extend(namespace, delimiter) {\n    const newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n    newDebug.log = this.log;\n    return newDebug;\n  }\n  /**\n  * Enables a debug mode by namespaces. This can include modes\n  * separated by a colon and wildcards.\n  *\n  * @param {String} namespaces\n  * @api public\n  */\n\n\n  function enable(namespaces) {\n    createDebug.save(namespaces);\n    createDebug.namespaces = namespaces;\n    createDebug.names = [];\n    createDebug.skips = [];\n    let i;\n    const split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n    const len = split.length;\n\n    for (i = 0; i < len; i++) {\n      if (!split[i]) {\n        // ignore empty strings\n        continue;\n      }\n\n      namespaces = split[i].replace(/\\*/g, '.*?');\n\n      if (namespaces[0] === '-') {\n        createDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n      } else {\n        createDebug.names.push(new RegExp('^' + namespaces + '$'));\n      }\n    }\n  }\n  /**\n  * Disable debug output.\n  *\n  * @return {String} namespaces\n  * @api public\n  */\n\n\n  function disable() {\n    const namespaces = [...createDebug.names.map(toNamespace), ...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)].join(',');\n    createDebug.enable('');\n    return namespaces;\n  }\n  /**\n  * Returns true if the given mode name is enabled, false otherwise.\n  *\n  * @param {String} name\n  * @return {Boolean}\n  * @api public\n  */\n\n\n  function enabled(name) {\n    if (name[name.length - 1] === '*') {\n      return true;\n    }\n\n    let i;\n    let len;\n\n    for (i = 0, len = createDebug.skips.length; i < len; i++) {\n      if (createDebug.skips[i].test(name)) {\n        return false;\n      }\n    }\n\n    for (i = 0, len = createDebug.names.length; i < len; i++) {\n      if (createDebug.names[i].test(name)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n  /**\n  * Convert regexp to namespace\n  *\n  * @param {RegExp} regxep\n  * @return {String} namespace\n  * @api private\n  */\n\n\n  function toNamespace(regexp) {\n    return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\\.\\*\\?$/, '*');\n  }\n  /**\n  * Coerce `val`.\n  *\n  * @param {Mixed} val\n  * @return {Mixed}\n  * @api private\n  */\n\n\n  function coerce(val) {\n    if (val instanceof Error) {\n      return val.stack || val.message;\n    }\n\n    return val;\n  }\n  /**\n  * XXX DO NOT USE. This is a temporary stub function.\n  * XXX It WILL be removed in the next major release.\n  */\n\n\n  function destroy() {\n    console.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n  }\n\n  createDebug.enable(createDebug.load());\n  return createDebug;\n}\n\nmodule.exports = setup;"],"file":"common.js"}