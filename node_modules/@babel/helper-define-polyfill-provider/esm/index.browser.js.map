{"version":3,"sources":["../../../../../node_modules/@babel/helper-define-polyfill-provider/esm/index.browser.js"],"names":["types","template","babel","result","a","v","b","Object","path","deopt","computed","scope","node","name","isIdentifier","parent","sym","resolveKey","value","obj","id","resolveId","placement","getType","t$1","expression","isRequire","prog","p","injectGlobalImport","cache","isScript","ast","injectNamedImport","hint","hoist","source","injectDefaultImport","t","constructor","storeAnonymous","key","imports","getVal","programPath","storeNamed","_injectImport","lastImport","_ensure","collection","map","_normalizeKey","sourceType","url","presetEnvSilentDebugHeader","JSON","prettifyTargets","pattern","unused","original","String","duplicates","Array","filter","regexp","patternToRegExp","matched","current","include","unusedInclude","exclude","unusedExclude","intersection","buildUnusedError","buldDuplicatesError","missingDependencies","caller","babelApi","log","inject","all","usage","callProvider","kind","ReferencedIdentifier","MemberExpression","object","binding","resolveSource","property","ObjectPattern","parentPath","grand","prop","BinaryExpression","entry","ImportDeclaration","getImportSource","Program","bodyPath","getRequireSource","absoluteImports","PossibleGlobalObjects","static","instance","global","globalP","meta","has$1","desc","staticP","instanceP","getTargets","_getTargets","targets","providerOptions","method","methodName","options","shouldInjectPolyfill","targetsOption","targetsObj","browsers","configPath","debug","resolveOptions","getUtils","createUtilsGetter","moduleName","resolve","depsCache","api","polyfillsNames","factory","console","provider","filterPolyfills","shouldInject","isRequired","compatData","includes","excludes","debugLog","polyfillsSupport","assertDependency","version","dep","found","mapGetOr","has","validateIncludeExclude","utils","declare","traverse","applyMissingDependenciesDefaults","instantiateProvider","createVisitor","visitor","stringifyTargetsMultiline","pre","polyfills","providers","missingDeps","post","logMissing","laterLogMissing","filteredTargets","getInclusionReasons","formattedTargets","val","getDefault"],"mappings":"AAAA,SAAA,OAAA,QAAA,4BAAA;AACA,OAAA,WAAA,IAAA,eAAA,EAAA,mBAAA,EAAA,UAAA,QAAA,mCAAA;AACA,OAAO,KAAP,KAAA,MAAA,aAAA;AACA,MAAM;AACJA,EAAAA,KAAK,EADD,GAAA;AAEJC,EAAAA;AAFI,IAGFC,KAAK,CAALA,OAAAA,IAHJ,KAAA;;AAKA,SAAA,YAAA,CAAA,CAAA,EAAA,CAAA,EAA4B;AAC1B,QAAMC,MAAM,GAAG,IAAf,GAAe,EAAf;AACAC,EAAAA,CAAC,CAADA,OAAAA,CAAUC,CAAC,IAAIC,CAAC,CAADA,GAAAA,CAAAA,CAAAA,KAAYH,MAAM,CAANA,GAAAA,CAA3BC,CAA2BD,CAA3BC;AACA,SAAA,MAAA;AACD;;AAED,SAAA,KAAA,CAAA,MAAA,EAAA,GAAA,EAA4B;AAC1B,SAAOG,MAAM,CAANA,SAAAA,CAAAA,cAAAA,CAAAA,IAAAA,CAAAA,MAAAA,EAAP,GAAOA,CAAP;AACD;;AAED,SAAA,OAAA,CAAA,MAAA,EAAyB;AACvB,SAAOA,MAAM,CAANA,SAAAA,CAAAA,QAAAA,CAAAA,IAAAA,CAAAA,MAAAA,EAAAA,KAAAA,CAAAA,CAAAA,EAAgD,CAAvD,CAAOA,CAAP;AACD;;AAED,SAAA,SAAA,CAAA,IAAA,EAAyB;AACvB,MAAIC,IAAI,CAAJA,YAAAA,MAAuB,CAAC,IAAI,CAAJ,KAAA,CAAA,UAAA,CAAsBA,IAAI,CAAJA,IAAAA,CAAtB,IAAA;AAC5B;AADA,MAA4B,CAA5B,EAEO;AACL,WAAOA,IAAI,CAAJA,IAAAA,CAAP,IAAA;AACD;;AAED,QAAM;AACJC,IAAAA;AADI,MAEFD,IAAI,CAFR,QAEIA,EAFJ;;AAIA,MAAIC,KAAK,IAAIA,KAAK,CAAlB,YAAaA,EAAb,EAAmC;AACjC,WAAOA,KAAK,CAALA,IAAAA,CAAP,IAAA;AACD;AACF;;AAED,SAAA,UAAA,CAAA,IAAA,EAA0BC,QAAQ,GAAlC,KAAA,EAA4C;AAC1C,QAAM;AAAA,IAAA,IAAA;AAAA,IAAA,MAAA;AAGJC,IAAAA;AAHI,MAAN,IAAA;AAKA,MAAIH,IAAI,CAAR,eAAIA,EAAJ,EAA4B,OAAOI,IAAI,CAAX,KAAA;AAC5B,QAAM;AACJC,IAAAA;AADI,MAAN,IAAA;AAGA,QAAMC,YAAY,GAAGN,IAAI,CAAzB,YAAqBA,EAArB;AACA,MAAIM,YAAY,IAAI,EAAEJ,QAAQ,IAAIK,MAAM,CAAxC,QAAoB,CAApB,EAAoD,OAAA,IAAA;;AAEpD,MAAI,QAAQ,IAAIP,IAAI,CAAhB,kBAAYA,EAAZ,IAAyC,IAAI,CAAJ,GAAA,CAAA,QAAA,EAAA,YAAA,CAAgC;AAC3EK,IAAAA,IAAI,EAAE;AADqE,GAAhC,CAAzC,IAEE,CAAC,KAAK,CAAL,UAAA,CAAA,QAAA;AACP;AAHA,MAEO,CAFP,EAIO;AACL,UAAMG,GAAG,GAAGC,UAAU,CAACT,IAAI,CAAJA,GAAAA,CAAD,UAACA,CAAD,EAAuBA,IAAI,CAAJA,IAAAA,CAA7C,QAAsB,CAAtB;AACA,QAAA,GAAA,EAAS,OAAO,YAAP,GAAA;AACV;;AAED,MAAI,CAAA,YAAA,IAAiB,KAAK,CAAL,UAAA,CAAA,IAAA;AACrB;AADA,MAAqB,CAArB,EAEO;AACL,UAAM;AACJU,MAAAA;AADI,QAEFV,IAAI,CAFR,QAEIA,EAFJ;AAGA,QAAI,OAAA,KAAA,KAAJ,QAAA,EAA+B,OAAA,KAAA;AAChC;AACF;;AAED,SAAA,aAAA,CAAA,GAAA,EAA4B;AAC1B,MAAIW,GAAG,CAAHA,kBAAAA,MAA4B,GAAG,CAAH,GAAA,CAAA,UAAA,EAAA,YAAA,CAAiC;AAC/DN,IAAAA,IAAI,EAAE;AADyD,GAAjC,CAAhC,EAEI;AACF,UAAMO,EAAE,GAAGC,SAAS,CAACF,GAAG,CAAHA,GAAAA,CAArB,QAAqBA,CAAD,CAApB;;AAEA,QAAA,EAAA,EAAQ;AACN,aAAO;AAAA,QAAA,EAAA;AAELG,QAAAA,SAAS,EAAE;AAFN,OAAP;AAID;;AAED,WAAO;AACLF,MAAAA,EAAE,EADG,IAAA;AAELE,MAAAA,SAAS,EAAE;AAFN,KAAP;AAID;;AAED,QAAMF,EAAE,GAAGC,SAAS,CAApB,GAAoB,CAApB;;AAEA,MAAA,EAAA,EAAQ;AACN,WAAO;AAAA,MAAA,EAAA;AAELC,MAAAA,SAAS,EAAE;AAFN,KAAP;AAID;;AAED,QAAM;AACJJ,IAAAA;AADI,MAEFC,GAAG,CAFP,QAEIA,EAFJ;;AAIA,MAAID,KAAK,KAAT,SAAA,EAAyB;AACvB,WAAO;AACLE,MAAAA,EAAE,EAAEG,OAAO,CADN,KACM,CADN;AAELD,MAAAA,SAAS,EAAE;AAFN,KAAP;AADF,GAAA,MAKO,IAAIH,GAAG,CAAP,eAAIA,EAAJ,EAA2B;AAChC,WAAO;AACLC,MAAAA,EAAE,EADG,QAAA;AAELE,MAAAA,SAAS,EAAE;AAFN,KAAP;AADK,GAAA,MAKA,IAAIH,GAAG,CAAP,UAAIA,EAAJ,EAAsB;AAC3B,WAAO;AACLC,MAAAA,EAAE,EADG,UAAA;AAELE,MAAAA,SAAS,EAAE;AAFN,KAAP;AAID;;AAED,SAAO;AACLF,IAAAA,EAAE,EADG,IAAA;AAELE,IAAAA,SAAS,EAAE;AAFN,GAAP;AAID;;AAED,SAAA,eAAA,CAAyB;AACvBV,EAAAA;AADuB,CAAzB,EAEG;AACD,MAAIA,IAAI,CAAJA,UAAAA,CAAAA,MAAAA,KAAJ,CAAA,EAAkC,OAAOA,IAAI,CAAJA,MAAAA,CAAP,KAAA;AACnC;;AAED,SAAA,gBAAA,CAA0B;AACxBA,EAAAA;AADwB,CAA1B,EAEG;AACD,MAAI,CAACY,GAAG,CAAHA,qBAAAA,CAAL,IAAKA,CAAL,EAAsC;AACtC,QAAM;AACJC,IAAAA;AADI,MAAN,IAAA;AAGA,QAAMC,SAAS,GAAGF,GAAG,CAAHA,gBAAAA,CAAAA,UAAAA,KAAoCA,GAAG,CAAHA,YAAAA,CAAiBC,UAAU,CAA/DD,MAAoCA,CAApCA,IAA2EC,UAAU,CAAVA,MAAAA,CAAAA,IAAAA,KAA3ED,SAAAA,IAAmHC,UAAU,CAAVA,SAAAA,CAAAA,MAAAA,KAAnHD,CAAAA,IAAwJA,GAAG,CAAHA,eAAAA,CAAoBC,UAAU,CAAVA,SAAAA,CAA9L,CAA8LA,CAApBD,CAA1K;AACA,MAAA,SAAA,EAAe,OAAOC,UAAU,CAAVA,SAAAA,CAAAA,CAAAA,EAAP,KAAA;AAChB;;AAED,SAAA,KAAA,CAAA,IAAA,EAAqB;AACnBb,EAAAA,IAAI,CAAJA,WAAAA,GAAAA,CAAAA;AACA,SAAA,IAAA;AACD;;AAED,SAAA,iBAAA,CAAA,KAAA,EAAkC;AAChC,SAAOJ,IAAI,IAAI;AACb,UAAMmB,IAAI,GAAGnB,IAAI,CAAJA,UAAAA,CAAgBoB,CAAC,IAAIA,CAAC,CAAnC,SAAkCA,EAArBpB,CAAb;AACA,WAAO;AACLqB,MAAAA,kBAAkB,CAAA,GAAA,EAAM;AACtBC,QAAAA,KAAK,CAALA,cAAAA,CAAAA,IAAAA,EAAAA,GAAAA,EAAgC,CAAA,QAAA,EAAA,MAAA,KAAsB;AACpD,iBAAOC,QAAQ,GAAG9B,QAAQ,CAARA,SAAAA,CAAmB+B,GAAI,WAA1B,MAAA,GAAA,GAAgDR,GAAG,CAAHA,iBAAAA,CAAAA,EAAAA,EAA/D,MAA+DA,CAA/D;AADFM,SAAAA;AAFG,OAAA;;AAOLG,MAAAA,iBAAiB,CAAA,GAAA,EAAA,IAAA,EAAYC,IAAI,GAAhB,IAAA,EAAyB;AACxC,eAAO,KAAK,CAAL,UAAA,CAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAkC,CAAA,QAAA,EAAA,MAAA,EAAA,IAAA,KAA4B;AACnE,gBAAMd,EAAE,GAAGO,IAAI,CAAJA,KAAAA,CAAAA,qBAAAA,CAAX,IAAWA,CAAX;AACA,iBAAO;AACLf,YAAAA,IAAI,EAAEmB,QAAQ,GAAGI,KAAK,CAAClC,QAAQ,CAARA,SAAAA,CAAmB+B,GAAI;AAC1D,wBAAwBZ,EAAG,cAAagB,MAAO,KAAIvB,IAAK;AAD9B,iBAAQ,CAAR,GAELW,GAAG,CAAHA,iBAAAA,CAAsB,CAACA,GAAG,CAAHA,eAAAA,CAAAA,EAAAA,EAAvBA,IAAuBA,CAAD,CAAtBA,EAHJ,MAGIA,CAHJ;AAILX,YAAAA,IAAI,EAAEO,EAAE,CAACP;AAJJ,WAAP;AAFF,SAAO,CAAP;AARG,OAAA;;AAmBLwB,MAAAA,mBAAmB,CAAA,GAAA,EAAMH,IAAI,GAAV,GAAA,EAAkB;AACnC,eAAO,KAAK,CAAL,UAAA,CAAA,IAAA,EAAA,GAAA,EAAA,SAAA,EAAuC,CAAA,QAAA,EAAA,MAAA,KAAsB;AAClE,gBAAMd,EAAE,GAAGO,IAAI,CAAJA,KAAAA,CAAAA,qBAAAA,CAAX,IAAWA,CAAX;AACA,iBAAO;AACLf,YAAAA,IAAI,EAAEmB,QAAQ,GAAGI,KAAK,CAAClC,QAAQ,CAARA,SAAAA,CAAmB+B,GAAI,OAAMZ,EAAG,cAAzC,MAAA,GAAQ,CAAR,GAAmEI,GAAG,CAAHA,iBAAAA,CAAsB,CAACA,GAAG,CAAHA,sBAAAA,CAAvBA,EAAuBA,CAAD,CAAtBA,EAD5E,MAC4EA,CAD5E;AAELX,YAAAA,IAAI,EAAEO,EAAE,CAACP;AAFJ,WAAP;AAFF,SAAO,CAAP;AAOD;;AA3BI,KAAP;AAFF,GAAA;AAiCD;;AAED,MAAM;AACJb,EAAAA,KAAK,EAAEsC;AADH,IAEFpC,KAAK,CAALA,OAAAA,IAFJ,KAAA;;AAIA,MAAA,YAAA,CAAmB;AACjBqC,EAAAA,WAAW,CAAA,QAAA,EAAW;AACpB,SAAA,QAAA,GAAgB,IAAhB,OAAgB,EAAhB;AACA,SAAA,iBAAA,GAAyB,IAAzB,OAAyB,EAAzB;AACA,SAAA,YAAA,GAAoB,IAApB,OAAoB,EAApB;AACA,SAAA,SAAA,GAAA,QAAA;AACD;;AAEDC,EAAAA,cAAc,CAAA,WAAA,EAAA,GAAA,EAAmB;AAAnB,EAAA,MAAA,EACN;AACN,UAAMC,GAAG,GAAG,KAAA,aAAA,CAAA,WAAA,EAAZ,GAAY,CAAZ;;AAEA,UAAMC,OAAO,GAAG,KAAA,OAAA,CAAa,KAAb,iBAAA,EAAA,WAAA,EAAhB,GAAgB,CAAhB;;AAEA,QAAIA,OAAO,CAAPA,GAAAA,CAAJ,GAAIA,CAAJ,EAAsB;AACtB,UAAM9B,IAAI,GAAG+B,MAAM,CAACC,WAAW,CAAXA,IAAAA,CAAAA,UAAAA,KAAD,QAAA,EAA2CN,CAAC,CAADA,aAAAA,CAAgB,KAAA,SAAA,CAA9E,GAA8E,CAAhBA,CAA3C,CAAnB;AACAI,IAAAA,OAAO,CAAPA,GAAAA,CAAAA,GAAAA;;AAEA,SAAA,aAAA,CAAA,WAAA,EAAA,IAAA;AACD;;AAEDG,EAAAA,UAAU,CAAA,WAAA,EAAA,GAAA,EAAA,IAAA,EAAA,MAAA,EAAiC;AACzC,UAAMJ,GAAG,GAAG,KAAA,aAAA,CAAA,WAAA,EAAA,GAAA,EAAZ,IAAY,CAAZ;;AAEA,UAAMC,OAAO,GAAG,KAAA,OAAA,CAAa,KAAb,QAAA,EAAA,WAAA,EAAhB,GAAgB,CAAhB;;AAEA,QAAI,CAACA,OAAO,CAAPA,GAAAA,CAAL,GAAKA,CAAL,EAAuB;AACrB,YAAM;AAAA,QAAA,IAAA;AAEJ7B,QAAAA,IAAI,EAAEO;AAFF,UAGFuB,MAAM,CAACC,WAAW,CAAXA,IAAAA,CAAAA,UAAAA,KAAD,QAAA,EAA2CN,CAAC,CAADA,aAAAA,CAAgB,KAAA,SAAA,CAA3D,GAA2D,CAAhBA,CAA3C,EAAiFA,CAAC,CAADA,UAAAA,CAH3F,IAG2FA,CAAjF,CAHV;AAIAI,MAAAA,OAAO,CAAPA,GAAAA,CAAAA,GAAAA,EAAAA,EAAAA;;AAEA,WAAA,aAAA,CAAA,WAAA,EAAA,IAAA;AACD;;AAED,WAAOJ,CAAC,CAADA,UAAAA,CAAaI,OAAO,CAAPA,GAAAA,CAApB,GAAoBA,CAAbJ,CAAP;AACD;;AAEDQ,EAAAA,aAAa,CAAA,WAAA,EAAA,IAAA,EAAoB;AAC/B,QAAIC,UAAU,GAAG,KAAA,YAAA,CAAA,GAAA,CAAjB,WAAiB,CAAjB;;AAEA,QAAIA,UAAU,IAAIA,UAAU,CAAxBA,IAAAA,IAAiC;AACrC;AACAA,IAAAA,UAAU,CAAVA,MAAAA,KAAsBH,WAAW,CAF7BG,IAAAA,IAEsCA,UAAU,CAAVA,SAAAA,KAAyBH,WAAW,CAAXA,IAAAA,CAFnE,IAAA,EAE0F;AACxFG,MAAAA,UAAU,GAAGA,UAAU,CAAVA,WAAAA,CAAbA,IAAaA,CAAbA;AAHF,KAAA,MAIO;AACLA,MAAAA,UAAU,GAAGH,WAAW,CAAXA,gBAAAA,CAAAA,MAAAA,EAAbG,IAAaH,CAAbG;AACD;;AAEDA,IAAAA,UAAU,GAAGA,UAAU,CAACA,UAAU,CAAVA,MAAAA,GAAxBA,CAAuB,CAAvBA;;AAEA,SAAA,YAAA,CAAA,GAAA,CAAA,WAAA,EAAA,UAAA;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEG;;AAEDC,EAAAA,OAAO,CAAA,GAAA,EAAA,WAAA,EAAA,UAAA,EAA+B;AACpC,QAAIC,UAAU,GAAGC,GAAG,CAAHA,GAAAA,CAAjB,WAAiBA,CAAjB;;AAEA,QAAI,CAAJ,UAAA,EAAiB;AACfD,MAAAA,UAAU,GAAG,IAAbA,UAAa,EAAbA;AACAC,MAAAA,GAAG,CAAHA,GAAAA,CAAAA,WAAAA,EAAAA,UAAAA;AACD;;AAED,WAAA,UAAA;AACD;;AAEDC,EAAAA,aAAa,CAAA,WAAA,EAAA,GAAA,EAAmBtC,IAAI,GAAvB,EAAA,EAA8B;AACzC,UAAM;AACJuC,MAAAA;AADI,QAEFR,WAAW,CAH0B,IACzC,CADyC,CAGnB;AACtB;AACA;;AAEA,WAAQ,GAAE/B,IAAI,IAAIuC,UAAW,KAAIC,GAAI,KAArC,IAAA,EAAA;AACD;;AA/FgB;;AAmGnB,MAAMC,0BAA0B,GAAhC,+EAAA;;AAEA,SAAA,yBAAA,CAAA,OAAA,EAA4C;AAC1C,SAAOC,IAAI,CAAJA,SAAAA,CAAeC,eAAe,CAA9BD,OAA8B,CAA9BA,EAAAA,IAAAA,EAAP,CAAOA,CAAP;AACD;;AAED,SAAA,eAAA,CAAA,OAAA,EAAkC;AAChC,MAAIE,OAAO,YAAX,MAAA,EAA+B,OAAA,OAAA;;AAE/B,MAAI;AACF,WAAO,IAAA,MAAA,CAAY,IAAnB,OAAA,GAAO,CAAP;AADF,GAAA,CAEE,MAAM;AACN,WAAA,IAAA;AACD;AACF;;AAED,SAAA,gBAAA,CAAA,KAAA,EAAA,MAAA,EAAyC;AACvC,MAAI,CAACC,MAAM,CAAX,MAAA,EAAoB,OAAA,EAAA;AACpB,SAAQ,sBAAD,KAAA,yCAAC,GAAsEA,MAAM,CAANA,GAAAA,CAAWC,QAAQ,IAAK,OAAMC,MAAM,CAApCF,QAAoC,CAApCA,IAAAA,EAAAA,IAAAA,CAA9E,EAA8EA,CAA9E;AACD;;AAED,SAAA,mBAAA,CAAA,UAAA,EAAyC;AACvC,MAAI,CAACG,UAAU,CAAf,IAAA,EAAsB,OAAA,EAAA;AACtB,SAAO,sFAAA,GAAyFC,KAAK,CAALA,IAAAA,CAAAA,UAAAA,EAAuBjD,IAAI,IAAK,OAAhCiD,IAAAA,IAAAA,EAAAA,IAAAA,CAAhG,EAAgGA,CAAhG;AACD;;AAED,SAAA,sBAAA,CAAA,QAAA,EAAA,SAAA,EAAA,eAAA,EAAA,eAAA,EAAuF;AACrF,MAAA,OAAA;;AAEA,QAAMC,MAAM,GAAGN,OAAO,IAAI;AACxB,UAAMO,MAAM,GAAGC,eAAe,CAA9B,OAA8B,CAA9B;AACA,QAAI,CAAJ,MAAA,EAAa,OAAA,KAAA;AACb,QAAIC,OAAO,GAAX,KAAA;;AAEA,SAAK,MAAL,QAAA,IAAA,SAAA,EAAkC;AAChC,UAAIF,MAAM,CAANA,IAAAA,CAAJ,QAAIA,CAAJ,EAA2B;AACzBE,QAAAA,OAAO,GAAPA,IAAAA;AACAC,QAAAA,OAAO,CAAPA,GAAAA,CAAAA,QAAAA;AACD;AACF;;AAED,WAAO,CAAP,OAAA;AAfmF,GAGrF,CAHqF,CAgBlF;;;AAGH,QAAMC,OAAO,GAAGD,OAAO,GAAG,IAA1B,GAA0B,EAA1B;AACA,QAAME,aAAa,GAAGP,KAAK,CAALA,IAAAA,CAAAA,eAAAA,EAAAA,MAAAA,CApB+D,MAoB/DA,CAAtB,CApBqF,CAoBnB;;AAElE,QAAMQ,OAAO,GAAGH,OAAO,GAAG,IAA1B,GAA0B,EAA1B;AACA,QAAMI,aAAa,GAAGT,KAAK,CAALA,IAAAA,CAAAA,eAAAA,EAAAA,MAAAA,CAAtB,MAAsBA,CAAtB;AACA,QAAMD,UAAU,GAAGW,YAAY,CAAA,OAAA,EAA/B,OAA+B,CAA/B;;AAEA,MAAIX,UAAU,CAAVA,IAAAA,GAAAA,CAAAA,IAAuBQ,aAAa,CAAbA,MAAAA,GAAvBR,CAAAA,IAAmDU,aAAa,CAAbA,MAAAA,GAAvD,CAAA,EAAiF;AAC/E,UAAM,IAAA,KAAA,CAAW,+BAAD,QAAA,uBAAC,GAAgEE,gBAAgB,CAAA,SAAA,EAAjF,aAAiF,CAAhF,GAA6GA,gBAAgB,CAAA,SAAA,EAA9H,aAA8H,CAA7H,GAA0JC,mBAAmB,CAA9L,UAA8L,CAAxL,CAAN;AACD;;AAED,SAAO;AAAA,IAAA,OAAA;AAELJ,IAAAA;AAFK,GAAP;AAID;;AAED,SAAA,gCAAA,CAAA,OAAA,EAAA,QAAA,EAA6D;AAC3D,QAAM;AACJK,IAAAA,mBAAmB,GAAG;AADlB,MAAN,OAAA;AAGA,MAAIA,mBAAmB,KAAvB,KAAA,EAAmC,OAAA,KAAA;AACnC,QAAMC,MAAM,GAAGC,QAAQ,CAARA,MAAAA,CAAgBD,MAAM,IAAIA,MAAM,EAA/C,IAAeC,CAAf;AACA,QAAM;AACJC,IAAAA,GAAG,GADC,UAAA;AAEJC,IAAAA,MAAM,GAAGH,MAAM,KAANA,qBAAAA,GAAAA,OAAAA,GAFL,QAAA;AAGJI,IAAAA,GAAG,GAAG;AAHF,MAAN,mBAAA;AAKA,SAAO;AAAA,IAAA,GAAA;AAAA,IAAA,MAAA;AAGLA,IAAAA;AAHK,GAAP;AAKD;;AAED,IAAIC,KAAK,GAAGC,YAAY,IAAI;AAC1B,WAAA,QAAA,CAAA,MAAA,EAAA,GAAA,EAAA,SAAA,EAAA,IAAA,EAAgD;AAC9C,WAAOA,YAAY,CAAC;AAClBC,MAAAA,IAAI,EADc,UAAA;AAAA,MAAA,MAAA;AAAA,MAAA,GAAA;AAIlB7D,MAAAA;AAJkB,KAAD,EAAnB,IAAmB,CAAnB;AAMD;;AAED,SAAO;AACL;AACA8D,IAAAA,oBAAoB,CAAA,IAAA,EAAO;AACzB,YAAM;AACJxE,QAAAA,IAAI,EAAE;AACJC,UAAAA;AADI,SADF;AAIJF,QAAAA;AAJI,UAAN,IAAA;AAMA,UAAIA,KAAK,CAALA,oBAAAA,CAAJ,IAAIA,CAAJ,EAAsC;AACtCuE,MAAAA,YAAY,CAAC;AACXC,QAAAA,IAAI,EADO,QAAA;AAEXtE,QAAAA;AAFW,OAAD,EAAZqE,IAAY,CAAZA;AAVG,KAAA;;AAgBLG,IAAAA,gBAAgB,CAAA,IAAA,EAAO;AACrB,YAAM5C,GAAG,GAAGxB,UAAU,CAACT,IAAI,CAAJA,GAAAA,CAAD,UAACA,CAAD,EAAuBA,IAAI,CAAJA,IAAAA,CAA7C,QAAsB,CAAtB;AACA,UAAI,CAAA,GAAA,IAAQiC,GAAG,KAAf,WAAA,EAAiC;AACjC,YAAM6C,MAAM,GAAG9E,IAAI,CAAJA,GAAAA,CAAf,QAAeA,CAAf;AACA,YAAM+E,OAAO,GAAGD,MAAM,CAANA,KAAAA,CAAAA,UAAAA,CAAwBA,MAAM,CAANA,IAAAA,CAAxC,IAAgBA,CAAhB;AACA,UAAIC,OAAO,IAAIA,OAAO,CAAPA,IAAAA,CAAf,0BAAeA,EAAf,EAA0D;AAC1D,YAAMnD,MAAM,GAAGoD,aAAa,CAA5B,MAA4B,CAA5B;AACA,aAAOC,QAAQ,CAACrD,MAAM,CAAP,EAAA,EAAA,GAAA,EAAiBA,MAAM,CAAvB,SAAA,EAAf,IAAe,CAAf;AAvBG,KAAA;;AA0BLsD,IAAAA,aAAa,CAAA,IAAA,EAAO;AAClB,YAAM;AAAA,QAAA,UAAA;AAEJ3E,QAAAA;AAFI,UAAN,IAAA;AAIA,UALkB,GAKlB,CALkB,CAKT;;AAET,UAAI4E,UAAU,CAAd,oBAAIA,EAAJ,EAAuC;AACrCxE,QAAAA,GAAG,GAAGwE,UAAU,CAAVA,GAAAA,CAD+B,MAC/BA,CAANxE,CADqC,CACP;AADhC,OAAA,MAEO,IAAIwE,UAAU,CAAd,sBAAIA,EAAJ,EAAyC;AAC9CxE,QAAAA,GAAG,GAAGwE,UAAU,CAAVA,GAAAA,CADwC,OACxCA,CAANxE,CAD8C,CACf;AAC/B;AAFK,OAAA,MAGA,IAAIwE,UAAU,CAAd,UAAIA,EAAJ,EAA6B;AAClC,cAAMC,KAAK,GAAGD,UAAU,CAAxB,UAAA;;AAEA,YAAIC,KAAK,CAALA,gBAAAA,MAA4BA,KAAK,CAArC,eAAgCA,EAAhC,EAAyD;AACvD,cAAIA,KAAK,CAALA,IAAAA,CAAAA,MAAAA,KAAJ,MAAA,EAAkC;AAChCzE,YAAAA,GAAG,GAAGyE,KAAK,CAALA,GAAAA,CAAAA,WAAAA,EAAuBpF,IAAI,CAAjCW,GAAMyE,CAANzE;AACD;AACF;AACF;;AAED,UAAIC,EAAE,GAAN,IAAA;AACA,UAAIE,SAAS,GAAb,IAAA;AACA,UAAA,GAAA,EAAS,CAAC;AAAA,QAAA,EAAA;AAERA,QAAAA;AAFQ,UAGNkE,aAAa,CAHR,GAGQ,CAHR;;AAKT,WAAK,MAAL,IAAA,IAAmBhF,IAAI,CAAJA,GAAAA,CAAnB,YAAmBA,CAAnB,EAA2C;AACzC,YAAIqF,IAAI,CAAR,gBAAIA,EAAJ,EAA6B;AAC3B,gBAAMpD,GAAG,GAAGxB,UAAU,CAAC4E,IAAI,CAAJA,GAAAA,CAAvB,KAAuBA,CAAD,CAAtB;AACA,cAAA,GAAA,EAASJ,QAAQ,CAAA,EAAA,EAAA,GAAA,EAAA,SAAA,EAARA,IAAQ,CAARA;AACV;AACF;AA5DE,KAAA;;AA+DLK,IAAAA,gBAAgB,CAAA,IAAA,EAAO;AACrB,UAAItF,IAAI,CAAJA,IAAAA,CAAAA,QAAAA,KAAJ,IAAA,EAAiC;AACjC,YAAM4B,MAAM,GAAGoD,aAAa,CAAChF,IAAI,CAAJA,GAAAA,CAA7B,OAA6BA,CAAD,CAA5B;AACA,YAAMiC,GAAG,GAAGxB,UAAU,CAACT,IAAI,CAAJA,GAAAA,CAAD,MAACA,CAAD,EAAtB,IAAsB,CAAtB;AACA,UAAI,CAAJ,GAAA,EAAU;AACV0E,MAAAA,YAAY,CAAC;AACXC,QAAAA,IAAI,EADO,IAAA;AAEXG,QAAAA,MAAM,EAAElD,MAAM,CAFH,EAAA;AAAA,QAAA,GAAA;AAIXd,QAAAA,SAAS,EAAEc,MAAM,CAACd;AAJP,OAAD,EAAZ4D,IAAY,CAAZA;AAMD;;AA1EI,GAAP;AAVF,CAAA;;AAyFA,IAAIa,KAAK,GAAGb,YAAY,KAAK;AAC3Bc,EAAAA,iBAAiB,CAAA,IAAA,EAAO;AACtB,UAAM5D,MAAM,GAAG6D,eAAe,CAA9B,IAA8B,CAA9B;AACA,QAAI,CAAJ,MAAA,EAAa;AACbf,IAAAA,YAAY,CAAC;AACXC,MAAAA,IAAI,EADO,QAAA;AAEX/C,MAAAA;AAFW,KAAD,EAAZ8C,IAAY,CAAZA;AAJyB,GAAA;;AAU3BgB,EAAAA,OAAO,CAAA,IAAA,EAAO;AACZ1F,IAAAA,IAAI,CAAJA,GAAAA,CAAAA,MAAAA,EAAAA,OAAAA,CAAyB2F,QAAQ,IAAI;AACnC,YAAM/D,MAAM,GAAGgE,gBAAgB,CAA/B,QAA+B,CAA/B;AACA,UAAI,CAAJ,MAAA,EAAa;AACblB,MAAAA,YAAY,CAAC;AACXC,QAAAA,IAAI,EADO,QAAA;AAEX/C,QAAAA;AAFW,OAAD,EAAZ8C,QAAY,CAAZA;AAHF1E,KAAAA;AAQD;;AAnB0B,CAAL,CAAxB;;AAuBA,SAAA,OAAA,CAAA,OAAA,EAAA,UAAA,EAAA,eAAA,EAAuD;AACrD,MAAI6F,eAAe,KAAnB,KAAA,EAA+B,OAAA,UAAA;AAC/B,QAAM,IAAN,KAAM,CAAN,yEAAM,CAAN;EACA;;;AAGF,SAAA,GAAA,CAAA,OAAA,EAAA,IAAA,EAA4B;AAC1B,SAAA,IAAA;EACA;;;AAGF,SAAA,UAAA,CAAA,WAAA,EAAiC,C,EAAG;;;AAGpC,SAAA,eAAA,CAAA,WAAA,EAAsC,CAAE;;AAExC,MAAMC,qBAAqB,GAAG,IAAA,GAAA,CAAQ,CAAA,QAAA,EAAA,YAAA,EAAA,MAAA,EAAtC,QAAsC,CAAR,CAA9B;;AAEA,SAAA,kBAAA,CAAA,SAAA,EAAuC;AACrC,QAAM;AACJC,IAAAA,MAAM,EADF,OAAA;AAEJC,IAAAA,QAAQ,EAFJ,SAAA;AAGJC,IAAAA,MAAM,EAAEC;AAHJ,MAAN,SAAA;AAKA,SAAOC,IAAI,IAAI;AACb,QAAIA,IAAI,CAAJA,IAAAA,KAAAA,QAAAA,IAAAA,OAAAA,IAAqCC,KAAK,CAAA,OAAA,EAAUD,IAAI,CAA5D,IAA8C,CAA9C,EAAoE;AAClE,aAAO;AACLxB,QAAAA,IAAI,EADC,QAAA;AAEL0B,QAAAA,IAAI,EAAEH,OAAO,CAACC,IAAI,CAFb,IAEQ,CAFR;AAGL9F,QAAAA,IAAI,EAAE8F,IAAI,CAAC9F;AAHN,OAAP;AAKD;;AAED,QAAI8F,IAAI,CAAJA,IAAAA,KAAAA,UAAAA,IAA4BA,IAAI,CAAJA,IAAAA,KAAhC,IAAA,EAAoD;AAClD,YAAM;AAAA,QAAA,SAAA;AAAA,QAAA,MAAA;AAGJlE,QAAAA;AAHI,UAAN,IAAA;;AAMA,UAAI6C,MAAM,IAAIhE,SAAS,KAAvB,QAAA,EAAsC;AACpC,YAAIoF,OAAO,IAAIJ,qBAAqB,CAArBA,GAAAA,CAAXI,MAAWJ,CAAXI,IAAgDE,KAAK,CAAA,OAAA,EAAzD,GAAyD,CAAzD,EAAyE;AACvE,iBAAO;AACLzB,YAAAA,IAAI,EADC,QAAA;AAEL0B,YAAAA,IAAI,EAAEH,OAAO,CAFR,GAEQ,CAFR;AAGL7F,YAAAA,IAAI,EAAE4B;AAHD,WAAP;AAKD;;AAED,YAAIqE,OAAO,IAAIF,KAAK,CAAA,OAAA,EAAhBE,MAAgB,CAAhBA,IAAqCF,KAAK,CAACE,OAAO,CAAR,MAAQ,CAAR,EAA9C,GAA8C,CAA9C,EAAsE;AACpE,iBAAO;AACL3B,YAAAA,IAAI,EADC,QAAA;AAEL0B,YAAAA,IAAI,EAAEC,OAAO,CAAPA,MAAO,CAAPA,CAFD,GAECA,CAFD;AAGLjG,YAAAA,IAAI,EAAG,GAAEyE,MAAO,IAAG7C,GAAI;AAHlB,WAAP;AAKD;AACF;;AAED,UAAIsE,SAAS,IAAIH,KAAK,CAAA,SAAA,EAAtB,GAAsB,CAAtB,EAAwC;AACtC,eAAO;AACLzB,UAAAA,IAAI,EADC,UAAA;AAEL0B,UAAAA,IAAI,EAAEE,SAAS,CAFV,GAEU,CAFV;AAGLlG,UAAAA,IAAI,EAAG,GAAE4B,GAAI;AAHR,SAAP;AAKD;AACF;AAzCH,GAAA;AA2CD;;AAED,MAAMuE,UAAU,GAAGC,WAAW,CAAXA,OAAAA,IAAnB,WAAA;;AAEA,SAAA,cAAA,CAAA,OAAA,EAAA,QAAA,EAA2C;AACzC,QAAM;AAAA,IAAA,MAAA;AAEJC,IAAAA,OAAO,EAFH,aAAA;AAAA,IAAA,wBAAA;AAAA,IAAA,UAAA;AAAA,IAAA,KAAA;AAAA,IAAA,oBAAA;AAAA,IAAA,eAAA;AAQJ,OAAGC;AARC,MAAN,OAAA;AAUA,MAAA,UAAA;AACA,MAAIC,MAAM,KAAV,cAAA,EAA+BC,UAAU,GAAzC,aAA+BA,CAA/B,KAA+D,IAAID,MAAM,KAAV,cAAA,EAA+BC,UAAU,GAAzC,aAA+BA,CAA/B,KAA+D,IAAID,MAAM,KAAV,YAAA,EAA6BC,UAAU,GAAvC,WAA6BA,CAA7B,KAA2D,IAAI,OAAA,MAAA,KAAJ,QAAA,EAAgC;AACvN,UAAM,IAAA,KAAA,CAAN,0BAAM,CAAN;AADuL,GAAA,MAElL;AACL,UAAM,IAAA,KAAA,CAAU,uDAAA,GAA2D,8BAA6B9D,IAAI,CAAJA,SAAAA,CAAxG,MAAwGA,CAAxG,GAAM,CAAN;AACD;;AAED,MAAI,OAAA,oBAAA,KAAJ,UAAA,EAAgD;AAC9C,QAAI+D,OAAO,CAAPA,OAAAA,IAAmBA,OAAO,CAA9B,OAAA,EAAwC;AACtC,YAAM,IAAA,KAAA,CAAN,wDAAgB,GAAhB,kCAAM,CAAN;AACD;AAHH,GAAA,MAIO,IAAIC,oBAAoB,IAAxB,IAAA,EAAkC;AACvC,UAAM,IAAA,KAAA,CAAU,wDAAA,GAA4D,cAAahE,IAAI,CAAJA,SAAAA,CAAzF,oBAAyFA,CAAzF,GAAM,CAAN;AACD;;AAED,MAAI8C,eAAe,IAAfA,IAAAA,IAA2B,OAAA,eAAA,KAA3BA,SAAAA,IAAmE,OAAA,eAAA,KAAvE,QAAA,EAA4G;AAC1G,UAAM,IAAA,KAAA,CAAU,4DAAA,GAAgE,cAAa9C,IAAI,CAAJA,SAAAA,CAA7F,eAA6FA,CAA7F,GAAM,CAAN;AACD;;AAED,MAAA,OAAA;;AAEA,OAAK;AACL;AACAiE,EAAAA,aAAa,IAAbA,UAAAA,IAFA,wBAAA,EAEyD;AACvD,UAAMC,UAAU,GAAG,OAAA,aAAA,KAAA,QAAA,IAAqC3D,KAAK,CAALA,OAAAA,CAArC,aAAqCA,CAArC,GAAoE;AACrF4D,MAAAA,QAAQ,EAAEF;AAD2E,KAApE,GAAnB,aAAA;AAGAN,IAAAA,OAAO,GAAGF,UAAU,CAAA,UAAA,EAAa;AAAA,MAAA,wBAAA;AAE/BW,MAAAA;AAF+B,KAAb,CAApBT;AANF,GAAA,MAUO;AACLA,IAAAA,OAAO,GAAGrC,QAAQ,CAAlBqC,OAAUrC,EAAVqC;AACD;;AAED,SAAO;AAAA,IAAA,MAAA;AAAA,IAAA,UAAA;AAAA,IAAA,OAAA;AAILb,IAAAA,eAAe,EAAEA,eAAe,IAJ3B,KAAA;AAAA,IAAA,oBAAA;AAMLuB,IAAAA,KAAK,EAAE,CAAC,CANH,KAAA;AAOLT,IAAAA,eAAe,EAAEA;AAPZ,GAAP;AASD;;AAED,SAAA,mBAAA,CAAA,OAAA,EAAA,OAAA,EAAA,mBAAA,EAAA,OAAA,EAAA,QAAA,EAAA,QAAA,EAAiG;AAC/F,QAAM;AAAA,IAAA,MAAA;AAAA,IAAA,UAAA;AAAA,IAAA,OAAA;AAAA,IAAA,KAAA;AAAA,IAAA,oBAAA;AAAA,IAAA,eAAA;AAOJd,IAAAA;AAPI,MAQFwB,cAAc,CAAA,OAAA,EARlB,QAQkB,CARlB;AASA,QAAMC,QAAQ,GAAGC,iBAAiB,CAAC,IAAA,YAAA,CAAiBC,UAAU,IAAIC,OAAO,CAAA,OAAA,EAAA,UAAA,EAVsB,eAUtB,CAAtC,CAAD,CAAlC,CAV+F,CAUoB;;AAEnH,MAAA,OAAA,EAAA,OAAA;AACA,MAAA,gBAAA;AACA,MAAA,cAAA;AACA,MAAA,eAAA;AACA,QAAMC,SAAS,GAAG,IAAlB,GAAkB,EAAlB;AACA,QAAMC,GAAG,GAAG;AACVjI,IAAAA,KAAK,EADK,QAAA;AAAA,IAAA,QAAA;AAGVkH,IAAAA,MAAM,EAAEE,OAAO,CAHL,MAAA;AAAA,IAAA,OAAA;AAAA,IAAA,kBAAA;;AAOVC,IAAAA,oBAAoB,CAAA,IAAA,EAAO;AACzB,UAAIa,cAAc,KAAlB,SAAA,EAAkC;AAChC,cAAM,IAAA,KAAA,CAAW,yBAAwBC,OAAO,CAAhC,IAAhB,aAAiB,GAAjB,+DAAM,CAAN;AACD;;AAED,UAAI,CAACD,cAAc,CAAdA,GAAAA,CAAL,IAAKA,CAAL,EAA+B;AAC7BE,QAAAA,OAAO,CAAPA,IAAAA,CAAc,yBAAwBC,QAAQ,CAAjC,IAAA,aAAC,GAAsD,qBAApED,IAAAA,IAAAA;AACD;;AAED,UAAIE,eAAe,IAAI,CAACA,eAAe,CAAvC,IAAuC,CAAvC,EAA+C,OAAA,KAAA;AAC/C,UAAIC,YAAY,GAAGC,UAAU,CAAA,IAAA,EAAA,OAAA,EAAgB;AAC3CC,QAAAA,UAAU,EADiC,gBAAA;AAE3CC,QAAAA,QAAQ,EAFmC,OAAA;AAG3CC,QAAAA,QAAQ,EAAEvE;AAHiC,OAAhB,CAA7B;;AAMA,UAAA,oBAAA,EAA0B;AACxBmE,QAAAA,YAAY,GAAGlB,oBAAoB,CAAA,IAAA,EAAnCkB,YAAmC,CAAnCA;;AAEA,YAAI,OAAA,YAAA,KAAJ,SAAA,EAAuC;AACrC,gBAAM,IAAN,KAAM,CAAN,8CAAM,CAAN;AACD;AACF;;AAED,aAAA,YAAA;AA/BQ,KAAA;;AAkCVb,IAAAA,KAAK,CAAA,IAAA,EAAO;AACVkB,MAAAA,QAAQ,GAARA,KAAAA,GAAAA,IAAAA;AACA,UAAI,CAAA,KAAA,IAAU,CAAd,IAAA,EAAqB;AACrB,UAAIA,QAAQ,GAARA,SAAAA,CAAAA,GAAAA,CAAyBP,QAAQ,CAArC,IAAIO,CAAJ,EAA6C;AAC7CA,MAAAA,QAAQ,GAARA,SAAAA,CAAAA,GAAAA,CAAAA,IAAAA,EAA+BC,gBAAgB,IAAhBA,IAAAA,IAA4BA,gBAAgB,CAA3ED,IAA2E,CAA3EA;AAtCQ,KAAA;;AAyCVE,IAAAA,gBAAgB,CAAA,IAAA,EAAOC,OAAO,GAAd,GAAA,EAAsB;AACpC,UAAItE,mBAAmB,KAAvB,KAAA,EAAmC;;AAEnC,UAAA,eAAA,EAAqB;AACnB;AACA;AACA;AACA;AACD;;AAED,YAAMuE,GAAG,GAAGD,OAAO,KAAPA,GAAAA,GAAAA,IAAAA,GAA0B,GAAEpI,IAAK,KAA7C,OAAA,EAAA;AACA,YAAMsI,KAAK,GAAGxE,mBAAmB,CAAnBA,GAAAA,GAAAA,KAAAA,GAAkCyE,QAAQ,CAAA,SAAA,EAAa,GAAEvI,IAAK,OAApB,OAAA,EAAA,EAAqC,MAAMwI,GAAnG,EAAwD,CAAxD;;AAEA,UAAI,CAAJ,KAAA,EAAY;AACVP,QAAAA,QAAQ,GAARA,WAAAA,CAAAA,GAAAA,CAAAA,GAAAA;AACD;AACF;;AAzDS,GAAZ;AA4DA,QAAMP,QAAQ,GAAGF,OAAO,CAAA,GAAA,EAAA,eAAA,EAAxB,OAAwB,CAAxB;;AAEA,MAAI,OAAOE,QAAQ,CAAf,UAAe,CAAf,KAAJ,UAAA,EAAgD;AAC9C,UAAM,IAAA,KAAA,CAAW,QAAOA,QAAQ,CAARA,IAAAA,IAAiBF,OAAO,CAAhC,IAAA,qBAAC,GAA6D,gBAA9E,MAAA,uBAAM,CAAN;AACD;;AAED,MAAIvE,KAAK,CAALA,OAAAA,CAAcyE,QAAQ,CAA1B,SAAIzE,CAAJ,EAAuC;AACrCsE,IAAAA,cAAc,GAAG,IAAA,GAAA,CAAQG,QAAQ,CAAjCH,SAAiB,CAAjBA;AACAI,IAAAA,eAAe,GAAGD,QAAQ,CAA1BC,eAAAA;AAFF,GAAA,MAGO,IAAID,QAAQ,CAAZ,SAAA,EAAwB;AAC7BH,IAAAA,cAAc,GAAG,IAAA,GAAA,CAAQ7H,MAAM,CAANA,IAAAA,CAAYgI,QAAQ,CAA7CH,SAAyB7H,CAAR,CAAjB6H;AACAW,IAAAA,gBAAgB,GAAGR,QAAQ,CAA3BQ,SAAAA;AACAP,IAAAA,eAAe,GAAGD,QAAQ,CAA1BC,eAAAA;AAHK,GAAA,MAIA;AACLJ,IAAAA,cAAc,GAAG,IAAjBA,GAAiB,EAAjBA;AACD;;AAED,GAAC;AAAA,IAAA,OAAA;AAEC9D,IAAAA;AAFD,MAGGgF,sBAAsB,CAACf,QAAQ,CAARA,IAAAA,IAAiBF,OAAO,CAAzB,IAAA,EAAA,cAAA,EAAgDlB,eAAe,CAAfA,OAAAA,IAAhD,EAAA,EAA+EA,eAAe,CAAfA,OAAAA,IAHzG,EAG0B,CAH1B;AAIA,SAAO;AAAA,IAAA,KAAA;AAAA,IAAA,MAAA;AAAA,IAAA,OAAA;AAAA,IAAA,QAAA;;AAMLjC,IAAAA,YAAY,CAAA,OAAA,EAAA,IAAA,EAAgB;AAC1B,YAAMqE,KAAK,GAAGzB,QAAQ,CADI,IACJ,CAAtB,CAD0B,CACI;;AAE9BS,MAAAA,QAAQ,CAARA,UAAQ,CAARA,CAAAA,OAAAA,EAAAA,KAAAA,EAAAA,IAAAA;AACD;;AAVI,GAAP;AAaD;;AAED,SAAA,sBAAA,CAAA,OAAA,EAAyC;AACvC,SAAOiB,OAAO,CAAC,CAAA,QAAA,EAAA,OAAA,EAAA,OAAA,KAAgC;AAC7C3E,IAAAA,QAAQ,CAARA,aAAAA,CAAAA,CAAAA;AACA,UAAM;AACJ4E,MAAAA;AADI,QAAN,QAAA;AAGA,QAAA,QAAA;AACA,UAAM9E,mBAAmB,GAAG+E,gCAAgC,CAAA,OAAA,EAA5D,QAA4D,CAA5D;AACA,UAAM;AAAA,MAAA,KAAA;AAAA,MAAA,MAAA;AAAA,MAAA,OAAA;AAAA,MAAA,QAAA;AAKJxE,MAAAA;AALI,QAMFyE,mBAAmB,CAAA,OAAA,EAAA,OAAA,EAAA,mBAAA,EAAA,OAAA,EAAiD,MAAjD,QAAA,EANvB,QAMuB,CANvB;AAOA,UAAMC,aAAa,GAAGxC,MAAM,KAANA,cAAAA,GAAAA,KAAAA,GAAtB,KAAA;AACA,UAAMyC,OAAO,GAAGtB,QAAQ,CAARA,OAAAA,GAAmBkB,QAAQ,CAARA,QAAAA,CAAAA,KAAAA,CAAwB,CAACG,aAAa,CAAd,YAAc,CAAd,EAA8BrB,QAAQ,CAAjFA,OAA2C,CAAxBkB,CAAnBlB,GAA8FqB,aAAa,CAA3H,YAA2H,CAA3H;;AAEA,QAAIhC,KAAK,IAAIA,KAAK,KAAlB,0BAAA,EAAmD;AACjDU,MAAAA,OAAO,CAAPA,GAAAA,CAAa,GAAEC,QAAQ,CAAvBD,IAAAA,oBAAAA;AACAA,MAAAA,OAAO,CAAPA,GAAAA,CAAa,oBAAmBwB,yBAAyB,CAAzDxB,OAAyD,CAAzDA,EAAAA;AACAA,MAAAA,OAAO,CAAPA,GAAAA,CAAa,4BAAbA,MAAAA,YAAAA;AACD;;AAED,WAAO;AACLzH,MAAAA,IAAI,EADC,kBAAA;AAAA,MAAA,OAAA;;AAILkJ,MAAAA,GAAG,GAAG;AACJjB,QAAAA,QAAQ,GAAG;AACTkB,UAAAA,SAAS,EAAE,IADF,GACE,EADF;AAETb,UAAAA,KAAK,EAFI,KAAA;AAGTc,UAAAA,SAAS,EAAE,IAHF,GAGE,EAHF;AAITC,UAAAA,WAAW,EAAE,IAAA,GAAA;AAJJ,SAAXpB,CADI,CAMD;;AAEHP,QAAAA,QAAQ,CAARA,GAAAA,EAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA;AAZG,OAAA;;AAeL4B,MAAAA,IAAI,GAAG;AACL;AACA5B,QAAAA,QAAQ,CAARA,IAAAA,EAAAA,KAAAA,CAAAA,IAAAA,EAAAA,SAAAA;;AAEA,YAAI5D,mBAAmB,KAAvB,KAAA,EAAmC;AACjC,cAAIA,mBAAmB,CAAnBA,GAAAA,KAAJ,UAAA,EAA4C;AAC1CyF,YAAAA,UAAU,CAACtB,QAAQ,CAAnBsB,WAAU,CAAVA;AADF,WAAA,MAEO;AACLC,YAAAA,eAAe,CAACvB,QAAQ,CAAxBuB,WAAe,CAAfA;AACD;AACF;;AAED,YAAI,CAAJ,KAAA,EAAY;AACZ,YAAI,KAAJ,QAAA,EAAmB/B,OAAO,CAAPA,GAAAA,CAAa,MAAK,KAAlBA,QAAAA,GAAAA;;AAEnB,YAAIQ,QAAQ,CAARA,SAAAA,CAAAA,IAAAA,KAAJ,CAAA,EAAmC;AACjCR,UAAAA,OAAO,CAAPA,GAAAA,CAAYlB,MAAM,KAANA,cAAAA,GAA4B0B,QAAQ,CAARA,KAAAA,GAAkB,8BAA6BP,QAAQ,CAAvDO,IAAAA,qCAAAA,GAAqG,2BAA0BP,QAAQ,CAAnKnB,IAAAA,+BAAAA,GAA2M,uCAAsCmB,QAAQ,CAArQD,IAAAA,qCAAAA;AACA;AACD;;AAED,YAAIlB,MAAM,KAAV,cAAA,EAA+B;AAC7BkB,UAAAA,OAAO,CAAPA,GAAAA,CAAa,OAAMC,QAAQ,CAAf,IAAZD,yCAAa,GAAbA,0BAAAA;AADF,SAAA,MAEO;AACLA,UAAAA,OAAO,CAAPA,GAAAA,CAAa,OAAMC,QAAQ,CAA3BD,IAAAA,0CAAAA;AACD;;AAED,aAAK,MAAM,CAAA,IAAA,EAAX,OAAW,CAAX,IAA8BQ,QAAQ,CAAtC,SAAA,EAAkD;AAChD,cAAA,OAAA,EAAa;AACX,kBAAMwB,eAAe,GAAGC,mBAAmB,CAAA,IAAA,EAAA,OAAA,EAA3C,OAA2C,CAA3C;AACA,kBAAMC,gBAAgB,GAAGjH,IAAI,CAAJA,SAAAA,CAAAA,eAAAA,EAAAA,OAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EAAAA,OAAAA,CAAAA,MAAAA,EAAAA,KAAAA,EAAAA,OAAAA,CAAAA,MAAAA,EAAzB,KAAyBA,CAAzB;AACA+E,YAAAA,OAAO,CAAPA,GAAAA,CAAa,KAAIzH,IAAK,IAAtByH,gBAAAA,EAAAA;AAHF,WAAA,MAIO;AACLA,YAAAA,OAAO,CAAPA,GAAAA,CAAa,KAAbA,IAAAA,EAAAA;AACD;AACF;AACF;;AAlDI,KAAP;AAvBF,GAAc,CAAd;AA6ED;;AAED,SAAA,QAAA,CAAA,GAAA,EAAA,GAAA,EAAA,UAAA,EAAwC;AACtC,MAAImC,GAAG,GAAGvH,GAAG,CAAHA,GAAAA,CAAV,GAAUA,CAAV;;AAEA,MAAIuH,GAAG,KAAP,SAAA,EAAuB;AACrBA,IAAAA,GAAG,GAAGC,UAAND,EAAAA;AACAvH,IAAAA,GAAG,CAAHA,GAAAA,CAAAA,GAAAA,EAAAA,GAAAA;AACD;;AAED,SAAA,GAAA;AACD;;AAED,eAAA,sBAAA","sourcesContent":["import { declare } from '@babel/helper-plugin-utils';\nimport _getTargets, { prettifyTargets, getInclusionReasons, isRequired } from '@babel/helper-compilation-targets';\nimport * as babel from '@babel/core';\nconst {\n  types: t$1,\n  template\n} = babel.default || babel;\n\nfunction intersection(a, b) {\n  const result = new Set();\n  a.forEach(v => b.has(v) && result.add(v));\n  return result;\n}\n\nfunction has$1(object, key) {\n  return Object.prototype.hasOwnProperty.call(object, key);\n}\n\nfunction getType(target) {\n  return Object.prototype.toString.call(target).slice(8, -1);\n}\n\nfunction resolveId(path) {\n  if (path.isIdentifier() && !path.scope.hasBinding(path.node.name,\n  /* noGlobals */\n  true)) {\n    return path.node.name;\n  }\n\n  const {\n    deopt\n  } = path.evaluate();\n\n  if (deopt && deopt.isIdentifier()) {\n    return deopt.node.name;\n  }\n}\n\nfunction resolveKey(path, computed = false) {\n  const {\n    node,\n    parent,\n    scope\n  } = path;\n  if (path.isStringLiteral()) return node.value;\n  const {\n    name\n  } = node;\n  const isIdentifier = path.isIdentifier();\n  if (isIdentifier && !(computed || parent.computed)) return name;\n\n  if (computed && path.isMemberExpression() && path.get(\"object\").isIdentifier({\n    name: \"Symbol\"\n  }) && !scope.hasBinding(\"Symbol\",\n  /* noGlobals */\n  true)) {\n    const sym = resolveKey(path.get(\"property\"), path.node.computed);\n    if (sym) return \"Symbol.\" + sym;\n  }\n\n  if (!isIdentifier || scope.hasBinding(name,\n  /* noGlobals */\n  true)) {\n    const {\n      value\n    } = path.evaluate();\n    if (typeof value === \"string\") return value;\n  }\n}\n\nfunction resolveSource(obj) {\n  if (obj.isMemberExpression() && obj.get(\"property\").isIdentifier({\n    name: \"prototype\"\n  })) {\n    const id = resolveId(obj.get(\"object\"));\n\n    if (id) {\n      return {\n        id,\n        placement: \"prototype\"\n      };\n    }\n\n    return {\n      id: null,\n      placement: null\n    };\n  }\n\n  const id = resolveId(obj);\n\n  if (id) {\n    return {\n      id,\n      placement: \"static\"\n    };\n  }\n\n  const {\n    value\n  } = obj.evaluate();\n\n  if (value !== undefined) {\n    return {\n      id: getType(value),\n      placement: \"prototype\"\n    };\n  } else if (obj.isRegExpLiteral()) {\n    return {\n      id: \"RegExp\",\n      placement: \"prototype\"\n    };\n  } else if (obj.isFunction()) {\n    return {\n      id: \"Function\",\n      placement: \"prototype\"\n    };\n  }\n\n  return {\n    id: null,\n    placement: null\n  };\n}\n\nfunction getImportSource({\n  node\n}) {\n  if (node.specifiers.length === 0) return node.source.value;\n}\n\nfunction getRequireSource({\n  node\n}) {\n  if (!t$1.isExpressionStatement(node)) return;\n  const {\n    expression\n  } = node;\n  const isRequire = t$1.isCallExpression(expression) && t$1.isIdentifier(expression.callee) && expression.callee.name === \"require\" && expression.arguments.length === 1 && t$1.isStringLiteral(expression.arguments[0]);\n  if (isRequire) return expression.arguments[0].value;\n}\n\nfunction hoist(node) {\n  node._blockHoist = 3;\n  return node;\n}\n\nfunction createUtilsGetter(cache) {\n  return path => {\n    const prog = path.findParent(p => p.isProgram());\n    return {\n      injectGlobalImport(url) {\n        cache.storeAnonymous(prog, url, (isScript, source) => {\n          return isScript ? template.statement.ast`require(${source})` : t$1.importDeclaration([], source);\n        });\n      },\n\n      injectNamedImport(url, name, hint = name) {\n        return cache.storeNamed(prog, url, name, (isScript, source, name) => {\n          const id = prog.scope.generateUidIdentifier(hint);\n          return {\n            node: isScript ? hoist(template.statement.ast`\n                  var ${id} = require(${source}).${name}\n                `) : t$1.importDeclaration([t$1.importSpecifier(id, name)], source),\n            name: id.name\n          };\n        });\n      },\n\n      injectDefaultImport(url, hint = url) {\n        return cache.storeNamed(prog, url, \"default\", (isScript, source) => {\n          const id = prog.scope.generateUidIdentifier(hint);\n          return {\n            node: isScript ? hoist(template.statement.ast`var ${id} = require(${source})`) : t$1.importDeclaration([t$1.importDefaultSpecifier(id)], source),\n            name: id.name\n          };\n        });\n      }\n\n    };\n  };\n}\n\nconst {\n  types: t\n} = babel.default || babel;\n\nclass ImportsCache {\n  constructor(resolver) {\n    this._imports = new WeakMap();\n    this._anonymousImports = new WeakMap();\n    this._lastImports = new WeakMap();\n    this._resolver = resolver;\n  }\n\n  storeAnonymous(programPath, url, // eslint-disable-next-line no-undef\n  getVal) {\n    const key = this._normalizeKey(programPath, url);\n\n    const imports = this._ensure(this._anonymousImports, programPath, Set);\n\n    if (imports.has(key)) return;\n    const node = getVal(programPath.node.sourceType === \"script\", t.stringLiteral(this._resolver(url)));\n    imports.add(key);\n\n    this._injectImport(programPath, node);\n  }\n\n  storeNamed(programPath, url, name, getVal) {\n    const key = this._normalizeKey(programPath, url, name);\n\n    const imports = this._ensure(this._imports, programPath, Map);\n\n    if (!imports.has(key)) {\n      const {\n        node,\n        name: id\n      } = getVal(programPath.node.sourceType === \"script\", t.stringLiteral(this._resolver(url)), t.identifier(name));\n      imports.set(key, id);\n\n      this._injectImport(programPath, node);\n    }\n\n    return t.identifier(imports.get(key));\n  }\n\n  _injectImport(programPath, node) {\n    let lastImport = this._lastImports.get(programPath);\n\n    if (lastImport && lastImport.node && // Sometimes the AST is modified and the \"last import\"\n    // we have has been replaced\n    lastImport.parent === programPath.node && lastImport.container === programPath.node.body) {\n      lastImport = lastImport.insertAfter(node);\n    } else {\n      lastImport = programPath.unshiftContainer(\"body\", node);\n    }\n\n    lastImport = lastImport[lastImport.length - 1];\n\n    this._lastImports.set(programPath, lastImport);\n    /*\n    let lastImport;\n     programPath.get(\"body\").forEach(path => {\n      if (path.isImportDeclaration()) lastImport = path;\n      if (\n        path.isExpressionStatement() &&\n        isRequireCall(path.get(\"expression\"))\n      ) {\n        lastImport = path;\n      }\n      if (\n        path.isVariableDeclaration() &&\n        path.get(\"declarations\").length === 1 &&\n        (isRequireCall(path.get(\"declarations.0.init\")) ||\n          (path.get(\"declarations.0.init\").isMemberExpression() &&\n            isRequireCall(path.get(\"declarations.0.init.object\"))))\n      ) {\n        lastImport = path;\n      }\n    });*/\n\n  }\n\n  _ensure(map, programPath, Collection) {\n    let collection = map.get(programPath);\n\n    if (!collection) {\n      collection = new Collection();\n      map.set(programPath, collection);\n    }\n\n    return collection;\n  }\n\n  _normalizeKey(programPath, url, name = \"\") {\n    const {\n      sourceType\n    } = programPath.node; // If we rely on the imported binding (the \"name\" parameter), we also need to cache\n    // based on the sourceType. This is because the module transforms change the names\n    // of the import variables.\n\n    return `${name && sourceType}::${url}::${name}`;\n  }\n\n}\n\nconst presetEnvSilentDebugHeader = \"#__secret_key__@babel/preset-env__don't_log_debug_header_and_resolved_targets\";\n\nfunction stringifyTargetsMultiline(targets) {\n  return JSON.stringify(prettifyTargets(targets), null, 2);\n}\n\nfunction patternToRegExp(pattern) {\n  if (pattern instanceof RegExp) return pattern;\n\n  try {\n    return new RegExp(`^${pattern}$`);\n  } catch {\n    return null;\n  }\n}\n\nfunction buildUnusedError(label, unused) {\n  if (!unused.length) return \"\";\n  return `  - The following \"${label}\" patterns didn't match any polyfill:\\n` + unused.map(original => `    ${String(original)}\\n`).join(\"\");\n}\n\nfunction buldDuplicatesError(duplicates) {\n  if (!duplicates.size) return \"\";\n  return `  - The following polyfills were matched both by \"include\" and \"exclude\" patterns:\\n` + Array.from(duplicates, name => `    ${name}\\n`).join(\"\");\n}\n\nfunction validateIncludeExclude(provider, polyfills, includePatterns, excludePatterns) {\n  let current;\n\n  const filter = pattern => {\n    const regexp = patternToRegExp(pattern);\n    if (!regexp) return false;\n    let matched = false;\n\n    for (const polyfill of polyfills) {\n      if (regexp.test(polyfill)) {\n        matched = true;\n        current.add(polyfill);\n      }\n    }\n\n    return !matched;\n  }; // prettier-ignore\n\n\n  const include = current = new Set();\n  const unusedInclude = Array.from(includePatterns).filter(filter); // prettier-ignore\n\n  const exclude = current = new Set();\n  const unusedExclude = Array.from(excludePatterns).filter(filter);\n  const duplicates = intersection(include, exclude);\n\n  if (duplicates.size > 0 || unusedInclude.length > 0 || unusedExclude.length > 0) {\n    throw new Error(`Error while validating the \"${provider}\" provider options:\\n` + buildUnusedError(\"include\", unusedInclude) + buildUnusedError(\"exclude\", unusedExclude) + buldDuplicatesError(duplicates));\n  }\n\n  return {\n    include,\n    exclude\n  };\n}\n\nfunction applyMissingDependenciesDefaults(options, babelApi) {\n  const {\n    missingDependencies = {}\n  } = options;\n  if (missingDependencies === false) return false;\n  const caller = babelApi.caller(caller => caller?.name);\n  const {\n    log = \"deferred\",\n    inject = caller === \"rollup-plugin-babel\" ? \"throw\" : \"import\",\n    all = false\n  } = missingDependencies;\n  return {\n    log,\n    inject,\n    all\n  };\n}\n\nvar usage = callProvider => {\n  function property(object, key, placement, path) {\n    return callProvider({\n      kind: \"property\",\n      object,\n      key,\n      placement\n    }, path);\n  }\n\n  return {\n    // Symbol(), new Promise\n    ReferencedIdentifier(path) {\n      const {\n        node: {\n          name\n        },\n        scope\n      } = path;\n      if (scope.getBindingIdentifier(name)) return;\n      callProvider({\n        kind: \"global\",\n        name\n      }, path);\n    },\n\n    MemberExpression(path) {\n      const key = resolveKey(path.get(\"property\"), path.node.computed);\n      if (!key || key === \"prototype\") return;\n      const object = path.get(\"object\");\n      const binding = object.scope.getBinding(object.node.name);\n      if (binding && binding.path.isImportNamespaceSpecifier()) return;\n      const source = resolveSource(object);\n      return property(source.id, key, source.placement, path);\n    },\n\n    ObjectPattern(path) {\n      const {\n        parentPath,\n        parent\n      } = path;\n      let obj; // const { keys, values } = Object\n\n      if (parentPath.isVariableDeclarator()) {\n        obj = parentPath.get(\"init\"); // ({ keys, values } = Object)\n      } else if (parentPath.isAssignmentExpression()) {\n        obj = parentPath.get(\"right\"); // !function ({ keys, values }) {...} (Object)\n        // resolution does not work after properties transform :-(\n      } else if (parentPath.isFunction()) {\n        const grand = parentPath.parentPath;\n\n        if (grand.isCallExpression() || grand.isNewExpression()) {\n          if (grand.node.callee === parent) {\n            obj = grand.get(\"arguments\")[path.key];\n          }\n        }\n      }\n\n      let id = null;\n      let placement = null;\n      if (obj) ({\n        id,\n        placement\n      } = resolveSource(obj));\n\n      for (const prop of path.get(\"properties\")) {\n        if (prop.isObjectProperty()) {\n          const key = resolveKey(prop.get(\"key\"));\n          if (key) property(id, key, placement, prop);\n        }\n      }\n    },\n\n    BinaryExpression(path) {\n      if (path.node.operator !== \"in\") return;\n      const source = resolveSource(path.get(\"right\"));\n      const key = resolveKey(path.get(\"left\"), true);\n      if (!key) return;\n      callProvider({\n        kind: \"in\",\n        object: source.id,\n        key,\n        placement: source.placement\n      }, path);\n    }\n\n  };\n};\n\nvar entry = callProvider => ({\n  ImportDeclaration(path) {\n    const source = getImportSource(path);\n    if (!source) return;\n    callProvider({\n      kind: \"import\",\n      source\n    }, path);\n  },\n\n  Program(path) {\n    path.get(\"body\").forEach(bodyPath => {\n      const source = getRequireSource(bodyPath);\n      if (!source) return;\n      callProvider({\n        kind: \"import\",\n        source\n      }, bodyPath);\n    });\n  }\n\n});\n\nfunction resolve(dirname, moduleName, absoluteImports) {\n  if (absoluteImports === false) return moduleName;\n  throw new Error(`\"absoluteImports\" is not supported in bundles prepared for the browser.`);\n} // eslint-disable-next-line no-unused-vars\n\n\nfunction has(basedir, name) {\n  return true;\n} // eslint-disable-next-line no-unused-vars\n\n\nfunction logMissing(missingDeps) {} // eslint-disable-next-line no-unused-vars\n\n\nfunction laterLogMissing(missingDeps) {}\n\nconst PossibleGlobalObjects = new Set([\"global\", \"globalThis\", \"self\", \"window\"]);\n\nfunction createMetaResolver(polyfills) {\n  const {\n    static: staticP,\n    instance: instanceP,\n    global: globalP\n  } = polyfills;\n  return meta => {\n    if (meta.kind === \"global\" && globalP && has$1(globalP, meta.name)) {\n      return {\n        kind: \"global\",\n        desc: globalP[meta.name],\n        name: meta.name\n      };\n    }\n\n    if (meta.kind === \"property\" || meta.kind === \"in\") {\n      const {\n        placement,\n        object,\n        key\n      } = meta;\n\n      if (object && placement === \"static\") {\n        if (globalP && PossibleGlobalObjects.has(object) && has$1(globalP, key)) {\n          return {\n            kind: \"global\",\n            desc: globalP[key],\n            name: key\n          };\n        }\n\n        if (staticP && has$1(staticP, object) && has$1(staticP[object], key)) {\n          return {\n            kind: \"static\",\n            desc: staticP[object][key],\n            name: `${object}$${key}`\n          };\n        }\n      }\n\n      if (instanceP && has$1(instanceP, key)) {\n        return {\n          kind: \"instance\",\n          desc: instanceP[key],\n          name: `${key}`\n        };\n      }\n    }\n  };\n}\n\nconst getTargets = _getTargets.default || _getTargets;\n\nfunction resolveOptions(options, babelApi) {\n  const {\n    method,\n    targets: targetsOption,\n    ignoreBrowserslistConfig,\n    configPath,\n    debug,\n    shouldInjectPolyfill,\n    absoluteImports,\n    ...providerOptions\n  } = options;\n  let methodName;\n  if (method === \"usage-global\") methodName = \"usageGlobal\";else if (method === \"entry-global\") methodName = \"entryGlobal\";else if (method === \"usage-pure\") methodName = \"usagePure\";else if (typeof method !== \"string\") {\n    throw new Error(\".method must be a string\");\n  } else {\n    throw new Error(`.method must be one of \"entry-global\", \"usage-global\"` + ` or \"usage-pure\" (received ${JSON.stringify(method)})`);\n  }\n\n  if (typeof shouldInjectPolyfill === \"function\") {\n    if (options.include || options.exclude) {\n      throw new Error(`.include and .exclude are not supported when using the` + ` .shouldInjectPolyfill function.`);\n    }\n  } else if (shouldInjectPolyfill != null) {\n    throw new Error(`.shouldInjectPolyfill must be a function, or undefined` + ` (received ${JSON.stringify(shouldInjectPolyfill)})`);\n  }\n\n  if (absoluteImports != null && typeof absoluteImports !== \"boolean\" && typeof absoluteImports !== \"string\") {\n    throw new Error(`.absoluteImports must be a boolean, a string, or undefined` + ` (received ${JSON.stringify(absoluteImports)})`);\n  }\n\n  let targets;\n\n  if ( // If any browserslist-related option is specified, fallback to the old\n  // behavior of not using the targets specified in the top-level options.\n  targetsOption || configPath || ignoreBrowserslistConfig) {\n    const targetsObj = typeof targetsOption === \"string\" || Array.isArray(targetsOption) ? {\n      browsers: targetsOption\n    } : targetsOption;\n    targets = getTargets(targetsObj, {\n      ignoreBrowserslistConfig,\n      configPath\n    });\n  } else {\n    targets = babelApi.targets();\n  }\n\n  return {\n    method,\n    methodName,\n    targets,\n    absoluteImports: absoluteImports ?? false,\n    shouldInjectPolyfill,\n    debug: !!debug,\n    providerOptions: providerOptions\n  };\n}\n\nfunction instantiateProvider(factory, options, missingDependencies, dirname, debugLog, babelApi) {\n  const {\n    method,\n    methodName,\n    targets,\n    debug,\n    shouldInjectPolyfill,\n    providerOptions,\n    absoluteImports\n  } = resolveOptions(options, babelApi);\n  const getUtils = createUtilsGetter(new ImportsCache(moduleName => resolve(dirname, moduleName, absoluteImports))); // eslint-disable-next-line prefer-const\n\n  let include, exclude;\n  let polyfillsSupport;\n  let polyfillsNames;\n  let filterPolyfills;\n  const depsCache = new Map();\n  const api = {\n    babel: babelApi,\n    getUtils,\n    method: options.method,\n    targets,\n    createMetaResolver,\n\n    shouldInjectPolyfill(name) {\n      if (polyfillsNames === undefined) {\n        throw new Error(`Internal error in the ${factory.name} provider: ` + `shouldInjectPolyfill() can't be called during initialization.`);\n      }\n\n      if (!polyfillsNames.has(name)) {\n        console.warn(`Internal error in the ${provider.name} provider: ` + `unknown polyfill \"${name}\".`);\n      }\n\n      if (filterPolyfills && !filterPolyfills(name)) return false;\n      let shouldInject = isRequired(name, targets, {\n        compatData: polyfillsSupport,\n        includes: include,\n        excludes: exclude\n      });\n\n      if (shouldInjectPolyfill) {\n        shouldInject = shouldInjectPolyfill(name, shouldInject);\n\n        if (typeof shouldInject !== \"boolean\") {\n          throw new Error(`.shouldInjectPolyfill must return a boolean.`);\n        }\n      }\n\n      return shouldInject;\n    },\n\n    debug(name) {\n      debugLog().found = true;\n      if (!debug || !name) return;\n      if (debugLog().polyfills.has(provider.name)) return;\n      debugLog().polyfills.set(name, polyfillsSupport && name && polyfillsSupport[name]);\n    },\n\n    assertDependency(name, version = \"*\") {\n      if (missingDependencies === false) return;\n\n      if (absoluteImports) {\n        // If absoluteImports is not false, we will try resolving\n        // the dependency and throw if it's not possible. We can\n        // skip the check here.\n        return;\n      }\n\n      const dep = version === \"*\" ? name : `${name}@^${version}`;\n      const found = missingDependencies.all ? false : mapGetOr(depsCache, `${name} :: ${dirname}`, () => has());\n\n      if (!found) {\n        debugLog().missingDeps.add(dep);\n      }\n    }\n\n  };\n  const provider = factory(api, providerOptions, dirname);\n\n  if (typeof provider[methodName] !== \"function\") {\n    throw new Error(`The \"${provider.name || factory.name}\" provider doesn't ` + `support the \"${method}\" polyfilling method.`);\n  }\n\n  if (Array.isArray(provider.polyfills)) {\n    polyfillsNames = new Set(provider.polyfills);\n    filterPolyfills = provider.filterPolyfills;\n  } else if (provider.polyfills) {\n    polyfillsNames = new Set(Object.keys(provider.polyfills));\n    polyfillsSupport = provider.polyfills;\n    filterPolyfills = provider.filterPolyfills;\n  } else {\n    polyfillsNames = new Set();\n  }\n\n  ({\n    include,\n    exclude\n  } = validateIncludeExclude(provider.name || factory.name, polyfillsNames, providerOptions.include || [], providerOptions.exclude || []));\n  return {\n    debug,\n    method,\n    targets,\n    provider,\n\n    callProvider(payload, path) {\n      const utils = getUtils(path); // $FlowIgnore\n\n      provider[methodName](payload, utils, path);\n    }\n\n  };\n}\n\nfunction definePolyfillProvider(factory) {\n  return declare((babelApi, options, dirname) => {\n    babelApi.assertVersion(7);\n    const {\n      traverse\n    } = babelApi;\n    let debugLog;\n    const missingDependencies = applyMissingDependenciesDefaults(options, babelApi);\n    const {\n      debug,\n      method,\n      targets,\n      provider,\n      callProvider\n    } = instantiateProvider(factory, options, missingDependencies, dirname, () => debugLog, babelApi);\n    const createVisitor = method === \"entry-global\" ? entry : usage;\n    const visitor = provider.visitor ? traverse.visitors.merge([createVisitor(callProvider), provider.visitor]) : createVisitor(callProvider);\n\n    if (debug && debug !== presetEnvSilentDebugHeader) {\n      console.log(`${provider.name}: \\`DEBUG\\` option`);\n      console.log(`\\nUsing targets: ${stringifyTargetsMultiline(targets)}`);\n      console.log(`\\nUsing polyfills with \\`${method}\\` method:`);\n    }\n\n    return {\n      name: \"inject-polyfills\",\n      visitor,\n\n      pre() {\n        debugLog = {\n          polyfills: new Map(),\n          found: false,\n          providers: new Set(),\n          missingDeps: new Set()\n        }; // $FlowIgnore - Flow doesn't support optional calls\n\n        provider.pre?.apply(this, arguments);\n      },\n\n      post() {\n        // $FlowIgnore - Flow doesn't support optional calls\n        provider.post?.apply(this, arguments);\n\n        if (missingDependencies !== false) {\n          if (missingDependencies.log === \"per-file\") {\n            logMissing(debugLog.missingDeps);\n          } else {\n            laterLogMissing(debugLog.missingDeps);\n          }\n        }\n\n        if (!debug) return;\n        if (this.filename) console.log(`\\n[${this.filename}]`);\n\n        if (debugLog.polyfills.size === 0) {\n          console.log(method === \"entry-global\" ? debugLog.found ? `Based on your targets, the ${provider.name} polyfill did not add any polyfill.` : `The entry point for the ${provider.name} polyfill has not been found.` : `Based on your code and targets, the ${provider.name} polyfill did not add any polyfill.`);\n          return;\n        }\n\n        if (method === \"entry-global\") {\n          console.log(`The ${provider.name} polyfill entry has been replaced with ` + `the following polyfills:`);\n        } else {\n          console.log(`The ${provider.name} polyfill added the following polyfills:`);\n        }\n\n        for (const [name, support] of debugLog.polyfills) {\n          if (support) {\n            const filteredTargets = getInclusionReasons(name, targets, support);\n            const formattedTargets = JSON.stringify(filteredTargets).replace(/,/g, \", \").replace(/^\\{\"/, '{ \"').replace(/\"\\}$/, '\" }');\n            console.log(`  ${name} ${formattedTargets}`);\n          } else {\n            console.log(`  ${name}`);\n          }\n        }\n      }\n\n    };\n  });\n}\n\nfunction mapGetOr(map, key, getDefault) {\n  let val = map.get(key);\n\n  if (val === undefined) {\n    val = getDefault();\n    map.set(key, val);\n  }\n\n  return val;\n}\n\nexport default definePolyfillProvider;"],"file":"index.browser.js"}